########################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
########################################################################################


def build(bld):

    if bld.is_target_platform_enabled('android'):
        bld.recurse(['Platform/Android'], mandatory=True)

    bld.CryLauncher(
        ############
        # Common
        ############
        target              = 'ClientLauncher',
        file_list           = 'launcher.waf_files',
        pch                 = 'Launcher_precompiled.cpp',
        client_only         = True,
        exclude_test        = False,
        use                 = ['AzGameFramework'],
        includes            = [bld.Path('Code/CryEngine/CryCommon')],

        # Platform Specific
        platform_roots      = [{'root': 'Platform', 'export_includes': False}],
    
        test_file_list      = ['launcher_test.waf_files'],
        test_use            = ['AzTest'],
        test_uselib         = ['GMOCK'],
        test_win_linkflags  = ['/SUBSYSTEM:CONSOLE']
    )

    bld.CryDedicatedServer(
        target          = 'ServerLauncher',
        file_list       = 'launcher.waf_files',
        platforms       = ['linux', 'win'],
        server_only     = True,
        exclude_test    = True,
        use             = ['AzGameFramework'],
        includes        = [bld.Path('Code/CryEngine/CryCommon')],

        # Platform Specific
        platform_roots      = [{'root': 'Platform', 'export_includes': False}],
    )


def package(pkg):
    build(pkg) # Need to execute this to generate our task_generator...

    pkg.package_game(
        target          = '{}Launcher'.format(pkg.project),
        task_gen_name   = '{}ClientLauncher'.format(pkg.project),
        platforms       = ['appletv', 'darwin', 'ios'],
        client_only     = True,
        exclude_test    = True,
    )

    pkg.package_game_legacy(
        target              = 'ClientLauncher',
        platforms           = ['android'],
        client_only         = True,
        exclude_test        = False,
        restricted_script   = 'update_restricted_package_parameters',
    )


def deploy(ctx):
    ctx.deploy_game_legacy(
        target              = 'ClientLauncher',
        platforms           = ['android'],
        client_only         = True,
        exclude_test        = False,
        restricted_script   = 'update_restricted_deploy_parameters',
    )
    

def run_unit_test(ctx):
    ctx.run_unit_test(
        target              = 'ClientLauncher',
        test_only           = True,
        platforms           = ['android', 'win'],
        restricted_script   = 'update_restricted_deploy_parameters',
    )