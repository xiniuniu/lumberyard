########################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#
# Original file Copyright Crytek GMBH or its affiliates, used under license.
#
########################################################################################


def should_build_darwin_editor(ctx):
    return ctx.engine_root_version == '0.0.0.0' or ctx.options.enable_experimental_features.lower() == 'true'

def build(bld):

    qt_version = None
    if getattr(bld, "get_qt_version", None):
        qt_version = bld.get_qt_version()

    # macOS requires access to the versioned specific headers for platform specific
    # support for the editor
    additional_qt_includes = []
    if qt_version is not None:
        additional_qt_includes = [bld.ThirdPartyPath('qt', '/clang_64/lib/QtGui.framework/Headers/'+qt_version),
                                  bld.ThirdPartyPath('qt', '/clang_64/lib/QtWidgets.framework/Headers/'+qt_version),
                                  bld.ThirdPartyPath('qt', '/clang_64/lib/QtWidgets.framework/Headers/'+qt_version+'/QtWidgets') ]

    additionalDefines = [ ]
    version = bld.get_lumberyard_version()
    additionalDefines.append( 'METRICS_VERSION="' + version + '"' )
    if version != "0.0.0.0":
        additionalDefines.append( 'USE_EXTERNAL_METRICS_ENDPOINT' )

    bld.CryEditorCore(

        # Settings
        target                  = 'EditorCore',
        vs_filter               = 'Sandbox',
        pch                     = 'StdAfx.cpp',
        file_list               = 'editor_core.waf_files',
        platforms               = ['win', 'darwin'],
        configurations          = ['all'],
        exclude_monolithic      = True,
        client_only             = True,
        use                     = ['AzToolsFramework', 'AzQtComponents'],
        uselib                  = ['QT5CORE',
                                   'QT5GUI',
                                   'QT5NETWORK',
                                   'QT5WEBKITWIDGETS',
                                   'QT5WEBKIT',
                                   'QT5WIDGETS',
                                   'QT5WINEXTRAS',
                                   'ZLIB'],
        features                = ['qt5'],
        includes                = [bld.Path('Code/CryEngine/CryCommon'),
                                   bld.Path('Code/Sandbox/Plugins/EditorCommon'),
                                   bld.ThirdPartyPath('squish'),
                                   'Include',
                                   bld.Path('Code/CryEngine/CryAction'),
                                   bld.Path('Code/Tools')],

        # Compiler Specific
        msvc_cxxflags           = ['/wd4355'],
        clang_cxxflags          = ['-Wno-array-bounds', # Squish includes have this code like this that triggers this warning: sets >= 2? array[sets - 2] : NULL
                                   '-Wno-format',
                                   '-Wno-macro-redefined',],

        # Platform Specific
        darwin_includes         = additional_qt_includes,
        darwin_enable_rtti      = True,

        win_features            = ['crcfix'],

        # Testing
        test_all_file_list  = ['editor_core_test.waf_files'],
    )

    #By default the Editor is built with tools to edit Terrain.
    #If you remove the LY_TERRAIN_EDITOR macro constant, then all of those
    #Terrain editing tools will be removed from Editor.exe.
    #This is useful for customers who author Terrain assets through external
    #tools, or simply make games that don't require a terrain system at all.
    enableTerrainEditing = getattr(bld, 'enable_legacy_terrain', True)

    fileList = ['editor_lib.waf_files']
    testFileList = ['editor_lib_test.waf_files']

    if enableTerrainEditing:
        additionalDefines.append('LY_TERRAIN_EDITOR')
        fileList.append('editor_lib_terrain.waf_files')
        testFileList.append('editor_lib_test_terrain.waf_files')

    kw = dict(
        # Settings
        target                              = 'EditorLib',
        vs_filter                           = 'Sandbox',
        copyright_org                       = 'Amazon-CryTek',
        pch                                 = 'StdAfx.cpp',
        file_list                           = fileList,
        darwin_file_list                    = 'editor_lib_darwin.waf_files',
        win_file_list                       = [ ],
        platforms                           = ['win', 'darwin'],
        configurations                      = ['all'],
        exclude_monolithic                  = True,
        client_only                         = True,
        includes                            = ['.',
                                               bld.Path('Code/CryEngine/CryCommon'),
                                               bld.Path('Code/Sandbox/Plugins/EditorCommon'),
                                               '..',
                                               'Include',
                                               bld.ThirdPartyPath('squish'),
                                               bld.Path('Code/CryEngine'),
                                               bld.Path('Code/CryEngine/CryAction'),
                                               bld.Path('Code/CryEngine/CrySystem'),
                                               bld.Path('Gems/LmbrCentral/Code/include'),
                                               bld.Path('Code/Tools/'),
                                               bld.Path('Code/Tools/News'),
                                               bld.Path('Code/Tools/GemRegistry/include'),
                                               bld.Path('Code/Lyzard/SDK/include'),
                                               bld.Path('Code/Lyzard/Modules/Gems/include'),
                                               bld.Path('Code/Lyzard/Modules/Projects/include'),
                                               bld.Path('Code/Lyzard/Modules/Engines/include')],

        defines                             = ['LY_BUILD={}'.format(bld.get_lumberyard_build()),
                                               'DONT_BAN_STD_STRING',
                                               'USE_MEM_ALLOCATOR',
                                               'IS_NEW_AUDIO_BRANCH' ] + additionalDefines,

        use                                 = ['AzToolsFramework',
                                               'AzQtComponents',
                                               'EditorCommon',
                                               'EditorCore',
                                               'EditorUI_QT',
                                               'NewsShared',
                                               'AWSNativeSDKInit',
                                               'ToolsCrashHandler'] + bld.make_aws_library_task_list(['LyMetricsProducer', 'LyMetricsShared', 'LyIdentity']),
        uselib                              = ['QT5CORE',
                                               'QT5GUI',
                                               'QT5NETWORK',
                                               'QT5QML',
                                               'QT5WEBKITWIDGETS',
                                               'QT5WEBKIT',
                                               'QT5WIDGETS',
                                               'QT5WINEXTRAS',
                                               'QT5XML',
                                               'QT5CONCURRENT',
                                               'TIFF',
                                               'AWS_CPP_SDK_STS',
                                               'AWS_CPP_SDK_CORE',
                                               'AWS_CPP_SDK_COGNITO_IDENTITY',
                                               'AWS_CPP_SDK_DEVICEFARM',
                                               'AWS_CPP_SDK_MOBILEANALYTICS',
                                               'AWS_CPP_SDK_IDENTITY_MANAGEMENT',
                                               'AWS_CPP_SDK_IDENTITY_LAMBDA',
                                               'AWS_CPP_SDK_IDENTITY_METRICS',
                                               'BOOSTPYTHON',
                                               'ZLIB'],
        use_required_gems                   = True,
        features                            = ['qt5',
                                               'EmbeddedPython',
                                               'ExternalLyIdentity', 'ExternalLyMetrics'],

        langname                            = 'en-us',

        win_linkflags                       = ['/SUBSYSTEM:WINDOWS'],
        win_debug_all_linkflags             = '/NODEFAULTLIB:LIBCMTD.lib',
        win_ndebug_linkflags                = '/NODEFAULTLIB:LIBCMT.lib',
        msvc_cxxflags                       = [ '/Zm200', '/wd4355', '/wd4018', '/wd4267' ],

        # Platform Specific
        win_features                        = [ 'crcfix' ],
        winres_defines                      = ['NDEBUG' ],
        win_lib                             = ['version'],

        clang_cxxflags                      = ['-Wno-sometimes-uninitialized', # required for squish library to compile
                                               '-Wno-shift-negative-value', # required for squish library to compile
                                               '-Wno-null-dereference', # required for squish library to compile
                                               '-Wno-deprecated-declarations', # using Gesalt macOS calls that are deprecated.
                                               '-Wno-unused-local-typedef', #BOOSTPYTHON
                                               '-Wno-inconsistent-dllimport', #BOOSTPYTHON
                                               '-Wno-deprecated-register', #BOOSTPYTHON
                                               '-Wno-writable-strings',
                                               '-Wno-return-type',
                                               '-Wno-enum-compare-switch',
                                               '-Wno-microsoft-include', #SQUISH
                                               '-fexceptions', #BOOSTPYTHON
                                              ],
        darwin_x64_lib                      = ['python2.7'],
        darwin_lib                          = ['curl', 'bsm'],
        darwin_includes                     = [bld.Path('Code/Sandbox/Editor/HyperGraph'),
                                               bld.Path('Code/Sandbox/Editor/Mannequin/Controls'),
                                               bld.Path('Code/Sandbox/Editor/AssetBrowser'),
                                               bld.Path('Code/Sandbox/Editor/Controls'),
                                               bld.Path('Code/Sandbox/Editor/AI')] + additional_qt_includes,
        darwin_x64_framework                = ['Security'],


        # Testing
        test_all_file_list  = testFileList,
    )
    
    for p0, p1, p2, p3 in bld.env['RESTRICTED_PLATFORMS']:
        kw['win_file_list'].append('{0}/editor_lib_{1}.waf_files'.format(p0, p1))

    bld.CryEditorLib(**kw)

    enabled_platforms = ['win']
    if should_build_darwin_editor(bld):
        enabled_platforms.append('darwin') 

    tsk_gen = bld.CryEditor(
        # Settings
        target                              = 'Editor',
        vs_filter                           = 'Sandbox',
        copyright_org                       = 'Amazon-CryTek',
        file_list                           = 'editor.waf_files',
        platforms                           = enabled_platforms,
        configurations                      = ['all'],
        exclude_monolithic                  = True,
        client_only                         = True,
        includes                            = ['.',
                                               bld.Path('Code/CryEngine/CryCommon'),
                                               '..',
                                               'Include',
                                               bld.Path('Code/CryEngine'),
                                               bld.Path('Code/CryEngine/CryAction'),
                                               bld.Path('Code/CryEngine/CrySystem'),
                                               bld.Path('Gems/LmbrCentral/Code/include'),
                                               bld.Path('Code/Tools/'),
                                               bld.ThirdPartyPath('squish'),
                                               bld.Path('Code/Tools/News'),
                                               bld.Path('Code/Tools/GemRegistry/include'),
                                               bld.Path('Code/Lyzard/SDK/include'),
                                               bld.Path('Code/Lyzard/Modules/Gems/include'),
                                               bld.Path('Code/Lyzard/Modules/Projects/include'),
                                               bld.Path('Code/Lyzard/Modules/Engines/include')],

        defines                             = ['DONT_BAN_STD_STRING',
                                               'USE_MEM_ALLOCATOR',
                                               'IS_NEW_AUDIO_BRANCH'] + additionalDefines,

        use                                 = ['AzToolsFramework',
                                               'AzQtComponents',
                                               'EditorCommon',
                                               'EditorCore',
                                               'EditorLib',
                                               'EditorUI_QT',
                                               'NewsShared'],
        uselib                              = ['QT5CORE',
                                               'QT5GUI',
                                               'QT5NETWORK',
                                               'QT5QML',
                                               'QT5WEBKITWIDGETS',
                                               'QT5WEBKIT',
                                               'QT5WIDGETS',
                                               'QT5WINEXTRAS',
                                               'QT5CONCURRENT',
                                               'QT5XML',
                                               'QTMAIN',
                                               'AWS_CPP_SDK_STS',
                                               'AWS_CPP_SDK_CORE',
                                               'AWS_CPP_SDK_COGNITO_IDENTITY',
                                               'AWS_CPP_SDK_MOBILEANALYTICS',
                                               'AWS_CPP_SDK_IDENTITY_MANAGEMENT',
                                               'BOOSTPYTHON',
                                               'TIFF',
                                               'ZLIB',
                                               'D3D_COMPILER',
                                               'OPENSSL',
                                               'MSVC90',
                                               'LUA_COMPILER'
                                               ],

        use_required_gems                   = True,

        features                            = ['qt5',
                                               'EmbeddedPython',
                                               'ExternalLyIdentity', 'ExternalLyMetrics'],

        langname                            = 'en-us',

        win_file_list                       = ['editor_win.waf_files'],
        win_linkflags                       = ['/SUBSYSTEM:WINDOWS'],
        win_debug_all_linkflags             = '/NODEFAULTLIB:LIBCMTD.lib',
        win_ndebug_linkflags                = '/NODEFAULTLIB:LIBCMT.lib',
        msvc_cxxflags                        = [ '/Zm200', '/wd4355', '/wd4018', '/wd4267' ],

        # Platform Specific
        win_features                        = [ 'crcfix' ],
        win_use                             = bld.make_aws_library_task_list(['LyMetricsProducer', 'LyIdentity']),
        winres_defines                      = ['NDEBUG' ],
        win_lib                             = ['Shell32'],


        darwin_file_list                    = ['editor_darwin.waf_files'],
        darwin_enable_rtti                  = True,
        clang_cxxflags                      = ['-Wno-error', '-Wno-unused-local-typedef'],
        darwin_x64_lib                      = ['python2.7'],
        darwin_lib                          = ['curl', 'bsm'],
        darwin_rpath                        = ['@executable_path/', '@executable_path/qtlibs/lib', '@executable_path/rc', '@executable_path/EditorPlugins', '@executable_path/../Frameworks'],
        darwin_use                          = bld.make_aws_library_task_list(['LyMetricsProducer', 'LyIdentity']),
        darwin_includes                     = [bld.Path('Code/Sandbox/Editor/HyperGraph'),
                                               bld.Path('Code/Sandbox/Editor/Mannequin/Controls'),
                                               bld.Path('Code/Sandbox/Editor/AssetBrowser'),
                                               bld.Path('Code/Sandbox/Editor/Controls'),
                                               bld.Path('Code/Sandbox/Editor/AI')] + additional_qt_includes,
        darwin_x64_framework                = ['Security'],

        darwin_xcassets                     = 'Code/Sandbox/Editor/res/Images.xcassets',
    )

    if tsk_gen != None:
        # Copy Resource.h for Ribbon UI
        tsk_gen.create_task('copy_outputs', tsk_gen.path.make_node('Resource.h'), bld.srcnode.make_node('Editor/UI/Resource.h') )


def package(pkg):
    if should_build_darwin_editor(pkg):
        build(pkg) # Need to call this to generate our task_generator
        pkg.package_tool(
            target           = 'Editor',
            platforms        = ['darwin'],
            configurations   = ['debug', 'profile'],
            include_all_libs = True,
            dir_resources    = ['qtlibs', 'EditorPlugins'],
        )
