!function(a){function b(a,b,c){a in i||(i[a]={name:a,declarative:!0,deps:b,declare:c,normalizedDeps:b})}function c(a){return m[a]||(m[a]={name:a,dependencies:[],exports:{},importers:[]})}function d(b){if(!b.module){var e=b.module=c(b.name),f=b.module.exports,g=b.declare.call(a,function(a,b){if(e.locked=!0,"object"==typeof a)for(var c in a)f[c]=a[c];else f[a]=b;for(var d=0,g=e.importers.length;g>d;d++){var h=e.importers[d];if(!h.locked)for(var i=0;i<h.dependencies.length;++i)h.dependencies[i]===e&&h.setters[i](f)}return e.locked=!1,b},b.name);e.setters=g.setters,e.execute=g.execute;for(var j=0,k=b.normalizedDeps.length;k>j;j++){var l,n=b.normalizedDeps[j],o=i[n],p=m[n];p?l=p.exports:o&&!o.declarative?l=o.esModule:o?(d(o),p=o.module,l=p.exports):l=h(n),p&&p.importers?(p.importers.push(e),e.dependencies.push(p)):e.dependencies.push(null),e.setters[j]&&e.setters[j](l)}}}function e(b){var c={};if(("object"==typeof b||"function"==typeof b)&&b!==a)if(k)for(var d in b)"default"!==d&&f(c,b,d);else{var e=b&&b.hasOwnProperty;for(var d in b)"default"===d||e&&!b.hasOwnProperty(d)||(c[d]=b[d])}return c.default=b,l(c,"__useDefault",{value:!0}),c}function f(a,b,c){try{var d;(d=Object.getOwnPropertyDescriptor(b,c))&&l(a,c,d)}catch(d){return a[c]=b[c],!1}}function g(b,c){var d=i[b];if(d&&!d.evaluated&&d.declarative){c.push(b);for(var e=0,f=d.normalizedDeps.length;f>e;e++){var k=d.normalizedDeps[e];-1==j.call(c,k)&&(i[k]?g(k,c):h(k))}d.evaluated||(d.evaluated=!0,d.module.execute.call(a))}}function h(a){if(o[a])return o[a];if("@node/"==a.substr(0,6))return o[a]=e(n(a.substr(6)));var b=i[a];if(!b)throw"Module "+a+" not present.";return d(i[a]),g(a,[]),i[a]=void 0,b.declarative&&l(b.module.exports,"__esModule",{value:!0}),o[a]=b.declarative?b.module.exports:b.esModule}var i={},j=Array.prototype.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},k=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(a){k=!1}var l;!function(){try{Object.defineProperty({},"a",{})&&(l=Object.defineProperty)}catch(a){l=function(a,b,c){try{a[b]=c.value||c.get.call(a)}catch(a){}}}}();var m={},n="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,o={"@empty":{}};return function(a,c,d,f){return function(g){g(function(g){for(var i=0;i<c.length;i++)!function(a,b){b&&b.__esModule?o[a]=b:o[a]=e(b)}(c[i],arguments[i]);f({register:b});var j=h(a[0]);if(a.length>1)for(var i=1;i<a.length;i++)h(a[i]);return d?j.default:j})}}}("undefined"!=typeof self?self:global)(["1","2"],["4","9","7","8","a","b","12","10","13","11","15","1a","1b"],!1,function(a){this.require,this.exports,this.module;a.register("3",["4"],function(a,b){"use strict";var c,d,e=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();b&&b.id;return{setters:[function(a){c=a}],execute:function(){d=function(a){function b(b,c,d,e,f){return void 0===e&&(e=null),void 0===f&&(f=""),a.call(this,b,c,d,e,f)||this}return e(b,a),b.prototype.createQuestion=function(b,c){return a.prototype.post.call(this,"surveys/"+encodeURIComponent(b)+"/questions",c)},b.prototype.modifyQuestion=function(b,c,d){return a.prototype.put.call(this,"surveys/"+encodeURIComponent(b)+"/questions/"+encodeURIComponent(c),d)},b.prototype.deleteQuestion=function(b,c){return a.prototype.delete.call(this,"surveys/"+encodeURIComponent(b)+"/questions/"+encodeURIComponent(c))},b.prototype.enableQuestion=function(b,c,d){return a.prototype.put.call(this,"surveys/"+encodeURIComponent(b)+"/questions/"+encodeURIComponent(c)+"/status",{enabled:d})},b.prototype.createSurvey=function(b){return a.prototype.post.call(this,"surveys",{survey_name:b})},b.prototype.cloneSurvey=function(b,c){return a.prototype.post.call(this,"surveys",{survey_name:b,survey_id_to_clone:c})},b.prototype.getSurvey=function(b){return a.prototype.get.call(this,"surveys/"+encodeURIComponent(b))},b.prototype.deleteSurvey=function(b){return a.prototype.delete.call(this,"surveys/"+encodeURIComponent(b))},b.prototype.getSurveyMetadataList=function(b,c){var d="";return c&&(d+="pagination_token="+encodeURIComponent(c)),b&&(d&&(d+="&"),d+="survey_name="+encodeURIComponent(b)),d&&(d="?"+d),a.prototype.get.call(this,"survey_metadata/"+d)},b.prototype.getSurveyAnswerAggregations=function(b){return a.prototype.get.call(this,"surveys/"+encodeURIComponent(b)+"/answer_aggregations")},b.prototype.getSurveyAnswerSubmissions=function(b,c,d,e){var f="";return f=c?"?limit="+String(d)+"&pagination_token="+encodeURIComponent(c)+"&sort="+e:"?limit="+String(d)+"&sort="+e,a.prototype.get.call(this,"surveys/"+encodeURIComponent(b)+"/answers"+f)},b.prototype.deleteAnswerSubmission=function(b,c){return a.prototype.delete.call(this,"surveys/"+encodeURIComponent(b)+"/answers/"+encodeURIComponent(c))},b.prototype.setSurveyActivationPeriod=function(b,c,d){var e={activation_start_time:c};return d&&(e.activation_end_time=d),a.prototype.put.call(this,"surveys/"+encodeURIComponent(b)+"/activation_period",e)},b.prototype.publishSurvey=function(b){return a.prototype.put.call(this,"surveys/"+encodeURIComponent(b)+"/published",{published:!0})},b.prototype.setSurveyQuestionOrder=function(b,c){return a.prototype.put.call(this,"surveys/"+encodeURIComponent(b)+"/question_order",c)},b.prototype.exportSurveyAnswerSubmissionsToCSV=function(b){return a.prototype.post.call(this,"surveys/"+encodeURIComponent(b)+"/answers/export_csv",{})},b.prototype.getExportSurveyAnswerSubmissionsToCSVStatus=function(b,c){return a.prototype.get.call(this,"surveys/"+encodeURIComponent(b)+"/answers/export_csv/"+encodeURIComponent(c))},b}(c.ApiHandler),a("InGameSurveyApi",d)}}}),a.register("5",["9","7","6","8","a","b"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(a){function b(b,d,e){var f=a.call(this)||this;return f.http=b,f.aws=d,f.metricservice=e,f.displayName="In Game Survey",f.srcIcon="https://m.media-amazon.com/images/G/01/cloudcanvas/images/In_Game_Survey_Optimized._V518452895_.png",f.state=new c.TackableStatus,f.metric=new c.TackableMeasure,f}return j(b,a),b.prototype.ngOnInit=function(){this._apiHandler=new e.InGameSurveyApi(this.context.ServiceUrl,this.http,this.aws,this.metricservice,this.context.identifier),this.report(this.metric),this.assign(this.state)},b.prototype.report=function(a){a.name="Active Survey(s)",a.value="Loading...",this._apiHandler.get("active/survey_metadata").subscribe(function(b){var c=JSON.parse(b.body.text());a.value=c.result.metadata_list.length},function(b){a.value="Offline"})},b.prototype.assign=function(a){a.label="Loading",a.styleType="Loading",this._apiHandler.get("service/status").subscribe(function(b){var c=JSON.parse(b.body.text());a.label="online"==c.result.status?"Online":"Offline",a.styleType="online"==c.result.status?"Enabled":"Offline"},function(b){a.label="Offline",a.styleType="Offline"})},k([d.Input(),l("design:type",Object)],b.prototype,"context",void 0),k([d.Input(),l("design:type",String)],b.prototype,"displayName",void 0),k([d.Input(),l("design:type",String)],b.prototype,"srcIcon",void 0),b=k([d.Component({selector:"cloudgemingamesurvey-thumbnail",template:'\n    <thumbnail-gem \n        [title]="displayName" \n        [cost]="\'Low\'" \n        [srcIcon]="srcIcon" \n        [metric]="metric" \n        [state]="state" \n        >\n    </thumbnail-gem>'}),l("design:paramtypes",[f.Http,g.AwsService,h.LyMetricService])],b)}(c.AbstractCloudGemThumbnailComponent),a("InGameSurveyThumbnailComponent",i)}}}),a.register("c",[],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;b&&b.id;return{setters:[],execute:function(){!function(a){a[a.Active=1]="Active",a[a.Scheduled=2]="Scheduled",a[a.Closed=4]="Closed",a[a.Draft=8]="Draft"}(c||(c={})),a("SurveyStatus",c),d=function(){function a(){}return a.prototype.init=function(a){var b=null,c=null;a.activationStartTime?(b=new Date(1e3*a.activationStartTime),this.hasStart=!0):(b=new Date,this.hasStart=!1),a.activationEndTime?(c=new Date(1e3*a.activationEndTime),this.hasEnd=!0):(c=new Date,this.hasEnd=!1),this.start={date:{year:b.getFullYear(),month:b.getMonth()+1,day:b.getDate()},time:this.hasStart?{hour:b.getHours(),minute:b.getMinutes()}:{hour:12,minute:0}},this.end={date:{year:c.getFullYear(),month:c.getMonth()+1,day:c.getDate()},time:this.hasEnd?{hour:c.getHours(),minute:c.getMinutes()}:{hour:12,minute:0}}},a}(),a("SurveyActivationPeriodUIModel",d),e=function(){function a(){this.published=!1,this.activationStartTime=0,this.status=c.Draft,this.numResponses=0}return a.prototype.determineSurveyStatus=function(a){return this.published?a<this.activationStartTime?void(this.status=c.Scheduled):null!=this.activationEndTime&&void 0!=this.activationEndTime&&a>this.activationEndTime?void(this.status=c.Closed):void(this.status=c.Active):void(this.status=c.Draft)},a.prototype.fromBackend=function(a){this.surveyId=a.survey_id,this.surveyName=a.survey_name,this.creationTime=a.creation_time,this.published=a.published,this.activationStartTime=a.activation_start_time,this.activationEndTime=a.activation_end_time,this.status=a.status,this.numResponses=a.num_responses},a}(),a("SurveyMetadata",e),f=function(){function a(){this.surveyMetadata=new e,this.questions=[]}return a.prototype.init=function(a,b){this.surveyMetadata=b,this.questions=a.questions.map(function(a){var b=new g;return b.fromBackend(a),b})},a}(),a("Survey",f),g=function(){function a(){this.enabled=!0}return a.prototype.deepCopy=function(a){this.questionId=a.questionId,this.title=a.title,this.type=a.type,this.maxChars=a.maxChars,this.min=a.min,this.max=a.max,this.minLabel=a.minLabel,this.maxLabel=a.maxLabel,this.predefines=a.predefines?a.predefines.slice():a.predefines,this.multipleSelect=a.multipleSelect,this.enabled=a.enabled},a.prototype.fromBackend=function(a){this.questionId=a.question_id,this.title=a.title,this.type=a.type,this.maxChars=a.max_chars,this.min=a.min,this.max=a.max,this.minLabel=a.min_label,this.maxLabel=a.max_label,this.predefines=a.predefines,this.multipleSelect=a.multiple_select,this.enabled=a.enabled},a.prototype.toBackend=function(){var a={title:this.title,type:this.type};switch(a.type){case"text":a.max_chars=this.maxChars;break;case"scale":a.min=this.min,a.max=this.max,a.min_label=this.minLabel&&this.minLabel.length>0?this.minLabel:null,a.max_label=this.maxLabel&&this.maxLabel.length>0?this.maxLabel:null;break;case"predefined":a.predefines=this.predefines,a.multiple_select=this.multipleSelect}return a},a.prototype.getQuestionTypeDisplayText=function(){switch(this.type){case"text":return"Text";case"scale":return"Slider";case"predefined":return this.multipleSelect?"Multiple Choice (Checkboxes)":"Multiple Choice (Radio Buttons)";default:return"unknown"}},a}(),a("Question",g),function(a){a[a.Bar=0]="Bar",a[a.Pie=1]="Pie"}(h||(h={})),a("Chart",h),i=function(){function a(){this.answerAggregations=[],this.chartData=[],this.chart=h.Bar}return a}(),a("QuestionAnswerAggregationsUIModel",i),j=function(){function a(){}return a.prototype.init=function(a,b){if(this.questionAnswerAggregationsUIModels=[],a.questions){for(var c=0;c<a.questions.length;c++){var d=0,e=a.questions[c],f=new i;f.questionTitle=e.title,f.questionType=e.type,f.questionId=e.questionId;var g=b.get(e.questionId);if("predefined"==e.type)for(var h=0;h<e.predefines.length;h++){var j=e.predefines[h],k=0;g&&void 0==(k=g.questionIndexToAnswerCountMap.get(String(h)))&&(k=0),f.answerAggregations.push({answer:j,count:k}),f.chartData.push({label:j,value:k}),d+=k}else if("scale"==e.type)for(var h=e.min;h<=e.max;h++){var l=String(h),k=0;if(g){var m=g.questionIndexToAnswerCountMap.get(l);m&&(k=m)}f.answerAggregations.push({answer:l,count:k}),f.chartData.push({label:l,value:k}),d+=k}f.totalResponses=d,this.questionAnswerAggregationsUIModels.push(f)}for(var n=0,o=this.questionAnswerAggregationsUIModels;n<o.length;n++){var f=o[n];if("text"!=f.questionType){if(f.answerAggregations.sort(function(a,b){return a.count>b.count?-1:a.count<b.count?1:0}),f.chartData.sort(function(a,b){return a.value>b.value?-1:a.value<b.value?1:0}),"predefined"==f.questionType){for(var c=0;c<f.answerAggregations.length;c++){var p=f.answerAggregations[c];p.answer=String(c+1)+". "+p.answer}for(var c=0;c<f.chartData.length;c++){var q=f.chartData[c];q.label=String(c+1)}}if(("predefined"==f.questionType||"scale"==f.questionType)&&f.totalResponses>0){for(var r=0,s=f.answerAggregations;r<s.length;r++){var p=s[r];p.count+=" ("+Math.floor(p.count/f.totalResponses*100)+"%)"}for(var t=0,u=f.chartData;t<u.length;t++){var q=u[t];q.label+=" ("+Math.floor(q.value/f.totalResponses*100)+"%)"}}}}}},a}(),a("SurveyAnswerAggregationsUIModel",j),k=function(){function a(){}return a.prototype.fromBackend=function(a){this.questionIdToAnswerAggregationsMap=new Map;for(var b=0,c=a.question_answer_aggregations;b<c.length;b++){var d=c[b],e=new l;e.fromBackend(d),this.questionIdToAnswerAggregationsMap.set(e.questionId,e)}},a}(),a("SurveyAnswerAggregations",k),l=function(){function a(){}return a.prototype.fromBackend=function(a){this.questionId=a.question_id,this.questionIndexToAnswerCountMap=new Map;for(var b=0,c=a.answer_aggregations;b<c.length;b++){var d=c[b];this.questionIndexToAnswerCountMap.set(d.answer,d.count)}},a}(),a("QuestionAnswerAggregations",l),m=function(){function a(){this.paginationToken=null,this.answerSubmissions=[]}return a}(),a("SurveyAnswerSubmissions",m),n=function(){function a(){this.answers=[]}return a.prototype.init=function(a,b){this.answers=[];for(var c=0;c<a.questions.length;c++){var d=a.questions[c],e=b.get(d.questionId),f="";if(e)if("predefined"==d.type){for(var g=[],h=0,i=e.answer;h<i.length;h++){var j=i[h],k=Number(j);k>=0&&k<d.predefines.length&&g.push(d.predefines[k])}f=g.join(", ")}else d.type,e.answer.length>0&&(f=e.answer[0]);this.answers.push({questionTitle:d.title,answer:f})}},a}(),a("AnswerSubmissionUIModel",n),o=function(){function a(){}return a.prototype.init=function(a,b){var c=b.questionIdToAnswerMap.get(a);return!(!c||c.answer.length<1)&&(this.creationTime=b.creationTime,this.answer=c.answer[0],!0)},a}(),a("TextAnswerSubmissionsUIModel",o),p=function(){function a(){}return a.prototype.fromBackend=function(a){this.submissionId=a.submission_id,this.creationTime=a.creation_time,this.questionIdToAnswerMap=new Map;for(var b=0,c=a.answers;b<c.length;b++){var d=c[b],e=new q;e.fromBackend(d),this.questionIdToAnswerMap.set(e.questionId,e)}},a}(),a("AnswerSubmission",p),q=function(){function a(){}return a.prototype.fromBackend=function(a){this.questionId=a.question_id,this.answer=a.answer},a}(),a("Answer",q),function(a){a[a.DESC=0]="DESC",a[a.ASC=1]="ASC"}(r||(r={})),a("SortOrder",r)}}}),a.register("d",["4"],function(a,b){"use strict";var c,d,e;b&&b.id;return{setters:[function(a){c=a}],execute:function(){d=function(){function a(){}return a.epochToString=function(a){return c.DateTimeUtil.toString(c.DateTimeUtil.fromEpoch(a),"MMM dd yyyy HH:mm")},a}(),a("TimeUtil",d),e=function(){function a(){}return a.isFormFieldRequiredEmpty=function(a,b){return!a||a.controls[b].hasError("required")&&a.controls[b].touched},a.isFormFieldNotValid=function(a,b){return!a||!a.controls[b].valid&&a.controls[b].touched},a.isFormFieldNotNonNegativeNum=function(a,b){return!a||a.controls[b].hasError("nonNegativeNum")&&a.controls[b].touched},a.nonNegativeNumberValidator=function(a){var b=Number(a.value);return!isNaN(b)&&b>=0?null:{nonNegativeNum:!0}},a}(),a("ValidationUtil",e)}}}),a.register("e",["7","9"],function(a,b){"use strict";var c,d,e,f,g=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},i=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){!function(a){a[a.SurveyListPage=0]="SurveyListPage",a[a.SurveyDetailsPage=1]="SurveyDetailsPage"}(e||(e={})),a("InGameSurveyPages",e),f=function(a){function b(){var b=a.call(this)||this;return b.InGameSurveyPages=e,b}return g(b,a),b.prototype.ngOnInit=function(){this.curPage=e.SurveyListPage,this.bindMethods()},b.prototype.bindMethods=function(){this.toSurveyDetailsPage=this.toSurveyDetailsPage.bind(this),this.toSurveyListPage=this.toSurveyListPage.bind(this)},b.prototype.toSurveyDetailsPage=function(a){this.curSurveyMetadata=a,this.curPage=e.SurveyDetailsPage},b.prototype.toSurveyListPage=function(){this.curPage=e.SurveyListPage},h([c.Input(),i("design:type",Object)],b.prototype,"context",void 0),b=h([c.Component({selector:"in-game-survey-index",template:'<div *ngIf="curPage == InGameSurveyPages.SurveyListPage">     <survey-list-page [context]="context"                       [toSurveyDetailsPageCallback]="toSurveyDetailsPage"></survey-list-page> </div>  <div *ngIf="curPage == InGameSurveyPages.SurveyDetailsPage">     <button class="btn l-primary back-survey-list-button" (click)="toSurveyListPage()">         < Back to Survey List Page     </button>      <survey-details-page [context]="context" [surveyMetadata]="curSurveyMetadata"></survey-details-page> </div>',styles:[".back-survey-list-button{margin-bottom:15px}"]}),i("design:paramtypes",[])],b)}(d.AbstractCloudGemIndexComponent),a("InGameSurveyIndexComponent",f)}}}),a.register("f",["7","8","a","4","12","10","13","b","11","6"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m,n,o=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},p=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a},function(a){k=a},function(a){l=a}],execute:function(){!function(a){a[a.None=0]="None",a[a.CreateQuestion=1]="CreateQuestion",a[a.EditQuestion=2]="EditQuestion",a[a.PublishSurvey=3]="PublishSurvey",a[a.EditActivationPeriod=4]="EditActivationPeriod",a[a.DeleteQuestion=5]="DeleteQuestion",a[a.DisableQuestion=6]="DisableQuestion",a[a.EnableQuestion=7]="EnableQuestion",a[a.ConfirmEditActiveSurvey=8]="ConfirmEditActiveSurvey",a[a.CloneSurvey=9]="CloneSurvey",a[a.CloseSurvey=10]="CloseSurvey"}(m||(m={})),n=function(){function a(a,b,c,d,e,f){this.fb=a,this.http=b,this.aws=c,this.toastr=d,this.vcr=e,this.metric=f,this.EditMode=m,this.SurveyStatus=l.SurveyStatus,this.epochToString=l.TimeUtil.epochToString,this.isFormFieldRequiredEmpty=l.ValidationUtil.isFormFieldRequiredEmpty,this.isFormFieldNotNonNegativeNum=l.ValidationUtil.isFormFieldNotNonNegativeNum,this.isFormFieldNotValid=l.ValidationUtil.isFormFieldNotValid,this.questionTypes=[{typeinfo:{type:"predefined",multipleSelect:!0},displayText:"Multiple Choice (Checkboxes)"},{typeinfo:{type:"predefined",multipleSelect:!1},displayText:"Multiple Choice (Radio Buttons)"},{typeinfo:{type:"scale"},displayText:"Slider"},{typeinfo:{type:"text"},displayText:"Text"}],this.disableQuestionAction=new i.ActionItem("Disable Question",this.onShowDisableQuestionModal),this.enableQuestionAction=new i.ActionItem("Enable Question",this.onShowEnableQuestionModal),this.cloneSurveyAction=new i.ActionItem("Clone",this.onShowCloneSurveyModal),this.closeSurveyAction=new i.ActionItem("End",this.onShowCloseSurveyModal),this.editSurveySchedulingAction=new i.ActionItem("Edit Scheduling",this.onShowEditSchedulingModal),this.reopenSurveyAction=new i.ActionItem("Reopen",this.onShowEditSchedulingModal),this.dummyRadioButtonForm=a.group({dummy:"dummy"})}return a.prototype.ngOnInit=function(){if(this.apiHandler=new l.InGameSurveyApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.editMode=m.None,this.activationPeriod=new l.SurveyActivationPeriodUIModel,this.activationPeriod.init(this.survey.surveyMetadata),this.determineCanEditSurvey(),this.dummyTextAreaModels=[],this.survey.questions)for(var a=0;a<this.survey.questions.length;a++)this.dummyTextAreaModels.push("");this.bindMethods()},a.prototype.bindMethods=function(){this.cloneSurveyAction.onClick=this.cloneSurveyAction.onClick.bind(this),this.closeSurveyAction.onClick=this.closeSurveyAction.onClick.bind(this),this.editSurveySchedulingAction.onClick=this.editSurveySchedulingAction.onClick.bind(this),this.reopenSurveyAction.onClick=this.reopenSurveyAction.onClick.bind(this),this.disableQuestionAction.onClick=this.disableQuestionAction.onClick.bind(this),this.enableQuestionAction.onClick=this.enableQuestionAction.onClick.bind(this),this.onQuestoinOrderChanged=this.onQuestoinOrderChanged.bind(this),this.onShowAddQuestionModal=this.onShowAddQuestionModal.bind(this),this.onDismissModal=this.onDismissModal.bind(this),this.onModifyQuestion=this.onModifyQuestion.bind(this),this.onAddQuestion=this.onAddQuestion.bind(this),this.onShowModifyQuestionModal=this.onShowModifyQuestionModal.bind(this),this.onShowPublishSurveyModal=this.onShowPublishSurveyModal.bind(this),this.onShowEditSchedulingModal=this.onShowEditSchedulingModal.bind(this),this.onShowDeleteQuestionModal=this.onShowDeleteQuestionModal.bind(this),this.onShowDisableQuestionModal=this.onShowDisableQuestionModal.bind(this),this.onShowEnableQuestionModal=this.onShowEnableQuestionModal.bind(this),this.onDeleteOption=this.onDeleteOption.bind(this),this.onAddOption=this.onAddOption.bind(this),this.onDeleteQuestion=this.onDeleteQuestion.bind(this),this.onDisableQuestion=this.onDisableQuestion.bind(this),this.onEnableQuestion=this.onEnableQuestion.bind(this),this.onPublishSurvey=this.onPublishSurvey.bind(this),this.onModifyActivationPeriod=this.onModifyActivationPeriod.bind(this),this.onUpdateSurveyActivationPeriod=this.onUpdateSurveyActivationPeriod.bind(this),this.onConfirmEditActiveSurvey=this.onConfirmEditActiveSurvey.bind(this),this.onShowConfirmEditActiveSurveyModal=this.onShowConfirmEditActiveSurveyModal.bind(this),this.onCloneSurvey=this.onCloneSurvey.bind(this),this.onCloseSurvey=this.onCloseSurvey.bind(this),this.onShowCloneSurveyModal=this.onShowCloneSurveyModal.bind(this),this.onShowCloseSurveyModal=this.onShowCloseSurveyModal.bind(this)},a.prototype.onShowCloneSurveyModal=function(){this.createSurveyNameForm(),this.editMode=m.CloneSurvey},a.prototype.onShowCloseSurveyModal=function(){this.editMode=m.CloseSurvey},a.prototype.onCloneSurvey=function(){var a=this;this.validateSurveyNameForm()&&this.apiHandler.cloneSurvey(this.surveyNameForm.value.surveyName,this.survey.surveyMetadata.surveyId).subscribe(function(b){a.toastr.success("The survey has been cloned."),a.closeModal(),a.editMode=m.None},function(b){a.toastr.error("Failed to update activation period. "+b),a.closeModal(),a.editMode=m.None})},a.prototype.onCloseSurvey=function(){var a=this,b=Math.floor(Date.now()/1e3)-1,c=this.survey.surveyMetadata;this.apiHandler.setSurveyActivationPeriod(c.surveyId,c.activationStartTime,b).subscribe(function(d){a.toastr.success("Survey has been closed"),c.activationEndTime=b,c.status=l.SurveyStatus.Closed,a.activationPeriod.init(c),a.closeModal(),a.editMode=m.None},function(b){a.toastr.error("Failed to update activation period. "+b)})},a.prototype.getActions=function(){return this.survey.surveyMetadata.status==l.SurveyStatus.Draft?[this.cloneSurveyAction]:this.survey.surveyMetadata.status==l.SurveyStatus.Active?[this.editSurveySchedulingAction,this.cloneSurveyAction,this.closeSurveyAction]:this.survey.surveyMetadata.status==l.SurveyStatus.Closed?[this.reopenSurveyAction,this.cloneSurveyAction]:[this.editSurveySchedulingAction,this.cloneSurveyAction]},a.prototype.onConfirmEditActiveSurvey=function(){this.canEdit=!0,this.closeModal(),this.editMode=m.None},a.prototype.onUpdateSurveyActivationPeriod=function(a){this.activationPeriod.hasStart=a.hasStart,this.activationPeriod.hasEnd=a.hasEnd,this.activationPeriod.start=a.start,this.activationPeriod.end=a.end},a.prototype.determineCanEditSurvey=function(){this.canEdit=this.survey.surveyMetadata.status!=l.SurveyStatus.Active},a.prototype.validDate=function(){var a=f.DateTimeUtil.toObjDate(this.activationPeriod.start),b=f.DateTimeUtil.toObjDate(this.activationPeriod.end);return this.activationPeriod.hasStart&&!a?(this.activationPeriod.start.valid=!1,this.activationPeriod.start.message="The start date is not a valid date.  A date must have a date, hour and minute.",!1):!(this.activationPeriod.hasEnd&&!b)||(this.activationPeriod.end.valid=!1,this.activationPeriod.end.message="The end date is not a valid date.  A date must have a date, hour and minute.",!1)},a.prototype.onPublishSurvey=function(){var a=this;if(this.validDate()){var b=this.activationPeriod.hasStart?f.DateTimeUtil.toObjDate(this.activationPeriod.start).getTime()/1e3:0,c=this.activationPeriod.hasEnd?f.DateTimeUtil.toObjDate(this.activationPeriod.end).getTime()/1e3:null,d=this.survey.surveyMetadata.surveyId;this.apiHandler.setSurveyActivationPeriod(d,b,c).subscribe(function(e){a.survey.surveyMetadata.activationStartTime=b,a.survey.surveyMetadata.activationEndTime=c,a.apiHandler.publishSurvey(d).subscribe(function(b){a.toastr.success("The survey is now published."),a.survey.surveyMetadata.published=!0,a.survey.surveyMetadata.determineSurveyStatus((new Date).getTime()),a.determineCanEditSurvey(),a.closeModal(),a.editMode=m.None},function(b){a.toastr.error("Failed to publish survey, please try again. "+b)})},function(b){a.toastr.error("Failed to set activation period, please try again. "+b)})}},a.prototype.onModifyActivationPeriod=function(){var a=this;if(this.validDate()){var b=this.activationPeriod.hasStart?f.DateTimeUtil.toObjDate(this.activationPeriod.start).getTime()/1e3:0,c=this.activationPeriod.hasEnd?f.DateTimeUtil.toObjDate(this.activationPeriod.end).getTime()/1e3:null,d=this.survey.surveyMetadata.surveyId;this.apiHandler.setSurveyActivationPeriod(d,b,c).subscribe(function(d){a.survey.surveyMetadata.activationStartTime=b,a.survey.surveyMetadata.activationEndTime=c,a.survey.surveyMetadata.determineSurveyStatus((new Date).getTime()/1e3),a.determineCanEditSurvey(),a.closeModal(),a.editMode=m.None},function(b){a.toastr.error("Failed to modify activation period, please try again. "+b)})}},a.prototype.onDeleteQuestion=function(a){var b=this;this.apiHandler.deleteQuestion(this.survey.surveyMetadata.surveyId,a).subscribe(function(c){var d=(JSON.parse(c.body.text()),b.survey.questions.findIndex(function(b){return b.questionId==a}));-1!=d&&(b.survey.questions.splice(d,1),b.dummyTextAreaModels.splice(d,1)),b.curEditingQuestion=null,b.closeModal()},function(a){b.toastr.error("Failed to delete question, please try again. "+a)})},a.prototype.onDisableQuestion=function(a){var b=this;this.apiHandler.enableQuestion(this.survey.surveyMetadata.surveyId,a,!1).subscribe(function(c){var d=(JSON.parse(c.body.text()),b.survey.questions.findIndex(function(b){return b.questionId==a}));-1!=d&&(b.survey.questions[d].enabled=!1),b.closeModal()},function(a){b.toastr.error("Failed to disable question, please try again. "+a)})},a.prototype.onEnableQuestion=function(a){var b=this;this.apiHandler.enableQuestion(this.survey.surveyMetadata.surveyId,a,!0).subscribe(function(c){var d=(JSON.parse(c.body.text()),b.survey.questions.findIndex(function(b){return b.questionId==a}));-1!=d&&(b.survey.questions[d].enabled=!0),b.closeModal()},function(a){b.toastr.error("Failed to enable question, please try again. "+a)})},a.prototype.trackByFn=function(a,b){return a},a.prototype.onAddOption=function(){this.predefinedQuestionForm.controls.options.push(this.fb.group({value:[null,k.Validators.compose([k.Validators.required])]}))},a.prototype.onDeleteOption=function(a){this.predefinedQuestionForm.controls.options.removeAt(a)},a.prototype.onShowModifyQuestionModal=function(a){this.curEditingQuestion=new l.Question,this.curEditingQuestion.deepCopy(a),this.curEditingQuestion.predefines&&0!=this.curEditingQuestion.predefines.length||(this.curEditingQuestion.predefines=[""]),this.createQuestionForms(),this.editMode=m.EditQuestion},a.prototype.onShowPublishSurveyModal=function(){this.editMode=m.PublishSurvey},a.prototype.onShowEditSchedulingModal=function(){this.editMode=m.EditActivationPeriod},a.prototype.onShowDeleteQuestionModal=function(a){this.curEditingQuestion=a,this.editMode=m.DeleteQuestion},a.prototype.onShowDisableQuestionModal=function(a){this.curEditingQuestion=a,this.editMode=m.DisableQuestion},a.prototype.onShowEnableQuestionModal=function(a){this.curEditingQuestion=a,this.editMode=m.EnableQuestion},a.prototype.onShowConfirmEditActiveSurveyModal=function(){this.editMode=m.ConfirmEditActiveSurvey},a.prototype.closeModal=function(){this.modalRef.close()},a.prototype.extractQuestionForm=function(){switch(this.curEditingQuestion.title=this.questionTitleForm.value.title,this.curEditingQuestion.type){case"predefined":for(var a=[],b=this.predefinedQuestionForm.controls.options,c=0,d=b.controls;c<d.length;c++){var e=d[c];a.push(e.value.value)}this.curEditingQuestion.predefines=a;break;case"scale":this.curEditingQuestion.min=Number(this.scaleQuestionForm.value.min),this.curEditingQuestion.max=Number(this.scaleQuestionForm.value.max),this.curEditingQuestion.minLabel=this.scaleQuestionForm.value.minLabel,this.curEditingQuestion.maxLabel=this.scaleQuestionForm.value.maxLabel;break;case"text":this.curEditingQuestion.maxChars=this.textQuestionForm.value.maxChars}},a.prototype.validateQuestionForms=function(){var a=!0;switch(a=this.validateQuestionTitleForm()&&a,this.curEditingQuestion.type){case"predefined":a=this.validatePredefinedQuestionForm()&&a;break;case"scale":a=this.validateScaleQuestionForm()&&a;break;case"text":a=this.validateTextQuestionForm()&&a}return a},a.prototype.validateQuestionTitleForm=function(){return this.questionTitleForm.controls.title.markAsTouched(),this.questionTitleForm.controls.title.valid},a.prototype.validateTextQuestionForm=function(){return this.textQuestionForm.controls.maxChars.markAsTouched(),this.textQuestionForm.controls.maxChars.valid},a.prototype.validateScaleQuestionForm=function(){return this.scaleQuestionForm.controls.min.markAsTouched(),this.scaleQuestionForm.controls.max.markAsTouched(),this.scaleQuestionForm.controls.min.valid&&this.scaleQuestionForm.controls.max.valid},a.prototype.validatePredefinedQuestionForm=function(){for(var a=!0,b=this.predefinedQuestionForm.controls.options,c=0,d=b.controls;c<d.length;c++){var e=d[c],f=e;f.controls.value.markAsTouched(),a=a&&f.controls.value.valid}return a},a.prototype.createSurveyNameForm=function(){this.surveyNameForm=this.fb.group({surveyName:[null,k.Validators.compose([k.Validators.required])]})},a.prototype.validateSurveyNameForm=function(){return this.surveyNameForm.controls.surveyName.markAsTouched(),this.surveyNameForm.controls.surveyName.valid},a.prototype.onAddQuestion=function(){var a=this;this.validateQuestionForms()&&(this.extractQuestionForm(),this.apiHandler.createQuestion(this.survey.surveyMetadata.surveyId,this.curEditingQuestion.toBackend()).subscribe(function(b){var c=JSON.parse(b.body.text());a.curEditingQuestion.questionId=c.result.question_id,a.survey.questions.push(a.curEditingQuestion),a.dummyTextAreaModels.push(""),a.curEditingQuestion=null,a.closeModal()},function(b){a.toastr.error("Failed to create question, please try again. "+b)}))},a.prototype.onModifyQuestion=function(){var a=this;this.validateQuestionForms()&&(this.extractQuestionForm(),this.apiHandler.modifyQuestion(this.survey.surveyMetadata.surveyId,this.curEditingQuestion.questionId,this.curEditingQuestion.toBackend()).subscribe(function(b){var c=a.survey.questions.findIndex(function(b){return b.questionId==a.curEditingQuestion.questionId});-1!=c&&(a.survey.questions[c]=a.curEditingQuestion),a.curEditingQuestion=null,a.closeModal()},function(b){a.toastr.error("Failed to modify question, please try again. "+b)}))},a.prototype.onDismissModal=function(){this.editMode=m.None},a.prototype.onChangeQuestionType=function(a){this.curEditingQuestion.type=a.typeinfo.type,"predefined"==this.curEditingQuestion.type&&(this.curEditingQuestion.multipleSelect=a.typeinfo.multipleSelect)},a.prototype.createDefaultQuestion=function(){var a=new l.Question;return a.type="predefined",a.multipleSelect=!0,a.predefines=[""],a},a.prototype.createQuestionTitleForm=function(){this.questionTitleForm=this.fb.group({title:[this.curEditingQuestion.title,k.Validators.compose([k.Validators.required])]})},a.prototype.createPredefinedQuestionForm=function(){if(this.predefinedQuestionForm=this.fb.group({options:this.fb.array([])}),this.curEditingQuestion.predefines)for(var a=this.predefinedQuestionForm.controls.options,b=0,c=this.curEditingQuestion.predefines;b<c.length;b++){var d=c[b],e=this.fb.group({value:[d,k.Validators.compose([k.Validators.required])]});a.push(e)}},a.prototype.createScaleQuestionForm=function(){this.scaleQuestionForm=this.fb.group({min:[this.curEditingQuestion.min,k.Validators.compose([k.Validators.required,l.ValidationUtil.nonNegativeNumberValidator])],max:[this.curEditingQuestion.max,k.Validators.compose([k.Validators.required,l.ValidationUtil.nonNegativeNumberValidator])],minLabel:[this.curEditingQuestion.minLabel],maxLabel:[this.curEditingQuestion.maxLabel]})},a.prototype.createTextQuestionForm=function(){this.textQuestionForm=this.fb.group({maxChars:[this.curEditingQuestion.maxChars,k.Validators.compose([k.Validators.required])]})},a.prototype.createQuestionForms=function(){this.createQuestionTitleForm(),this.createPredefinedQuestionForm(),this.createScaleQuestionForm(),this.createTextQuestionForm()},a.prototype.onShowAddQuestionModal=function(){this.curEditingQuestion=this.createDefaultQuestion(),this.createQuestionForms(),this.editMode=m.CreateQuestion},a.prototype.onQuestoinOrderChanged=function(a,b,c){for(var d=this,e=[],f=0,g=b.children;f<g.length;f++){var h=g[f];e.push(h.id)}var i={question_id_list:e};this.apiHandler.setSurveyQuestionOrder(this.survey.surveyMetadata.surveyId,i).subscribe(function(a){d.toastr.success("Question order updated.");for(var b={},c=0,f=d.survey.questions;c<f.length;c++){var g=f[c];b[g.questionId]=g}d.survey.questions=e.map(function(a){return b[a]})},function(a){d.toastr.error("Failed to set question order, please try again. "+a);for(var c=document.getElementById(b.id),e={},f=0,g=b.children;f<g.length;f++){var h=g[f];e[h.id]=h}var i=d.survey.questions.map(function(a){return e[a.questionId]});c.innerHTML="";for(var j=0,k=i;j<k.length;j++){var h=k[j];c.appendChild(h)}})},o([c.Input(),p("design:type",l.Survey)],a.prototype,"survey",void 0),o([c.Input(),p("design:type",Object)],a.prototype,"context",void 0),o([c.ViewChild(g.ModalComponent),p("design:type",g.ModalComponent)],a.prototype,"modalRef",void 0),a=o([c.Component({selector:"edit-survey",template:'<div class="survey-info">     <span class="float-right">         <action-stub-items [edit]="canEdit == false? onShowConfirmEditActiveSurveyModal: null" [custom]="getActions()"></action-stub-items>     </span>     <div>         <div class="survey-name">             {{survey.surveyMetadata.surveyName}}         </div>         Survey ID: {{survey.surveyMetadata.surveyId}}     </div>     <ng-container [ngSwitch]="survey.surveyMetadata.status">         <span *ngSwitchCase="SurveyStatus.Active" class="fa fa-check-circle active-survey-icon"></span>         <span *ngSwitchCase="SurveyStatus.Draft" class="fa fa-file-text-o"></span>         <span *ngSwitchCase="SurveyStatus.Scheduled" class="fa fa-clock-o scheduled-survey-icon"></span>     </ng-container>     {{SurveyStatus[survey.surveyMetadata.status]}}     Created: {{epochToString(survey.surveyMetadata.creationTime)}} </div> <ng-container [ngSwitch]="canEdit">     <ng-container *ngSwitchCase="true">         <dragable [drop]="onQuestoinOrderChanged">             <div class="question-preview" id="{{question.questionId}}" *ngFor="let question of survey.questions; let questionIndex = index">                 <span class="float-right">                     <ng-container *ngIf="canEdit">                         <i class="fa fa-arrows movement-icon" data-toggle="tooltip" data-placement="top" title="Move"></i>                         <span class="float-right" [ngSwitch]="question.enabled">                             <action-stub-items *ngSwitchCase="true"  [model]="question" [edit]="onShowModifyQuestionModal" [delete]="onShowDeleteQuestionModal" [custom]="[disableQuestionAction]"></action-stub-items>                             <action-stub-items *ngSwitchCase="false" [model]="question" [edit]="onShowModifyQuestionModal" [delete]="onShowDeleteQuestionModal" [custom]="[enableQuestionAction]"></action-stub-items>                         </span>                     </ng-container>                 </span>                                      <div class="disabled-question-text" *ngIf="question.enabled == false">This question is disabled and not collecting responses</div>                                        <div [class.disabled-question]="question.enabled == false" class="questino-title">                     {{question.title}}                 </div>                                      <div [class.disabled-question]="question.enabled == false" class="questions" *ngIf="question.type == \'predefined\'">                     <ng-container *ngIf="question.multipleSelect == true">                         <div class="radio-btn-label" *ngFor="let predefine of question.predefines; let i = index">                             <input id="question_{{questionIndex}}_option_{{i}}" type="checkbox" />                             <label class="l-checkbox" for="question_{{questionIndex}}_option_{{i}}">                                 {{predefine}}                             </label>                         </div>                     </ng-container>                     <ng-container *ngIf="question.multipleSelect == false">                         <div [formGroup]="dummyRadioButtonForm">                             <div class="radio-btn-container">                                 <div *ngFor="let predefine of question.predefines; let i = index">                                     <label class="radio-btn-label">                                         <input class="form-control" type="radio" [value]="i" formControlName="dummy" />                                         <span></span> {{predefine}}                                     </label>                                 </div>                             </div>                         </div>                     </ng-container>                 </div>                  <div [class.disabled-question]="question.enabled == false" class="questions" *ngIf="question.type == \'scale\'">                     {{question.min}}                     <ng-container *ngIf="question.minLabel && question.minLabel.length > 0">                         ({{question.minLabel}})                     </ng-container>                     <input type="range">                                             {{question.max}}                     <ng-container *ngIf="question.maxLabel && question.maxLabel.length > 0">                         ({{question.maxLabel}})                     </ng-container>                                   </div>                  <div [class.disabled-question]="question.enabled == false" class="questions" *ngIf="question.type == \'text\'">                     <div>                         <textarea class="question-textarea-preview" [(ngModel)]="dummyTextAreaModels[questionIndex]" [maxLength]="question.maxChars"></textarea>                         <div class="question-textarea-chars-label">                             {{dummyTextAreaModels[questionIndex].length}}/{{question.maxChars}}                         </div>                     </div>                 </div>             </div>         </dragable>     </ng-container>     <ng-container *ngSwitchCase="false">         <div class="question-preview" id="{{question.questionId}}" *ngFor="let question of survey.questions; let questionIndex = index">             <span class="float-right">                 <ng-container *ngIf="canEdit">                     <i class="fa fa-arrows" data-toggle="tooltip" data-placement="top" title="Move"></i>                     <span class="float-right" [ngSwitch]="question.enabled">                         <action-stub-items *ngSwitchCase="true" [model]="question" [edit]="onShowModifyQuestionModal" [delete]="onShowDeleteQuestionModal" [custom]="[disableQuestionAction]"></action-stub-items>                         <action-stub-items *ngSwitchCase="false" [model]="question" [edit]="onShowModifyQuestionModal" [delete]="onShowDeleteQuestionModal" [custom]="[enableQuestionAction]"></action-stub-items>                     </span>                 </ng-container>             </span>             <div class="disabled-question-text" *ngIf="question.enabled == false">This question is disabled and not collecting responses</div>             <div [class.disabled-question]="question.enabled == false" class="questino-title">                 {{question.title}}             </div>              <div [class.disabled-question]="question.enabled == false" class="questions"  *ngIf="question.type == \'predefined\'">                 <ng-container *ngIf="question.multipleSelect == true">                     <div *ngFor="let predefine of question.predefines; let i = index">                         <input id="question_{{questionIndex}}_option_{{i}}" type="checkbox" />                         <label class="l-checkbox" for="question_{{questionIndex}}_option_{{i}}">                             {{predefine}}                         </label>                     </div>                 </ng-container>                 <ng-container *ngIf="question.multipleSelect == false">                     <div [formGroup]="dummyRadioButtonForm">                         <div class="radio-btn-container">                             <div *ngFor="let predefine of question.predefines; let i = index">                                 <label class="radio-btn-label">                                     <input class="form-control" type="radio" [value]="i" formControlName="dummy" />                                     <span></span> {{predefine}}                                 </label>                             </div>                         </div>                     </div>                 </ng-container>             </div>              <div [class.disabled-question]="question.enabled == false" class="questions" *ngIf="question.type == \'scale\'">                 {{question.min}}                 <ng-container *ngIf="question.minLabel && question.minLabel.length > 0">                     ({{question.minLabel}})                 </ng-container>                 <input type="range">                                     {{question.max}}                 <ng-container *ngIf="question.maxLabel && question.maxLabel.length > 0">                     ({{question.maxLabel}})                 </ng-container>             </div>              <div [class.disabled-question]="question.enabled == false" class="questions" *ngIf="question.type == \'text\'">                 <div>                     <textarea class="question-textarea-preview" [(ngModel)]="dummyTextAreaModels[questionIndex]" [maxLength]="question.maxChars"></textarea>                     <div class="question-textarea-chars-label">                         {{dummyTextAreaModels[questionIndex].length}}/{{question.maxChars}}                     </div>                 </div>             </div>         </div>     </ng-container> </ng-container>  <ng-container *ngIf="canEdit">     <button class="btn l-primary add-question-button" (click)="onShowAddQuestionModal()">         Add New Question     </button> </ng-container>  <ng-container [ngSwitch]="survey.surveyMetadata.status == SurveyStatus.Draft">     <button *ngSwitchCase="true" class="btn btn-outline-primary publish-survey-button" (click)="onShowPublishSurveyModal()">         Publish Survey     </button> </ng-container>   <modal *ngIf="editMode == EditMode.EditQuestion || editMode == EditMode.CreateQuestion"        [title]="editMode == EditMode.EditQuestion ? \'Edit Question\' : \'Add New Question\'"        [autoOpen]="true"        [hasSubmit]="true"        [submitButtonText]="editMode == EditMode.EditQuestion ? \'Save Changes\' : \'Add Question\'"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        (modalSubmitted)="editMode == EditMode.EditQuestion ? onModifyQuestion() : onAddQuestion()">     <div class="modal-body">         <div class="form-group row">             <label class="col-form-label col-3">                 Question Type             </label>             <div class="d-inline-block dropdown-outer col-8 question-type-dropdown"ngbDropdown>                 <button type="button" class="btn l-dropdown col-12" id="path-dropdown" ngbDropdownToggle>                     <span class="dropdown-inner"> {{curEditingQuestion.getQuestionTypeDisplayText()}} </span>                     <i class="fa fa-caret-down" aria-hidden="true"></i>                 </button>                 <div class="dropdown-menu dropdown-menu-center" aria-labelledby="path-dropdown">                     <button *ngFor="let questionType of questionTypes" type="button" class="dropdown-item" (click)="onChangeQuestionType(questionType)"> {{questionType.displayText}} </button>                 </div>             </div>         </div>                  <form [formGroup]="questionTitleForm">             <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(questionTitleForm, \'title\')}">                 <label class="col-form-label col-3" for="title">                     Title                 </label>                 <input class="form-control col-8" id="title" type="text" [formControl]="questionTitleForm.controls[\'title\']"                        [ngClass]="{\'form-control-danger\': isFormFieldNotValid(questionTitleForm, \'title\')}" />                  <span class="col-3"></span>                 <div *ngIf="isFormFieldRequiredEmpty(questionTitleForm, \'title\')" class="form-control-feedback col-8">Title cannot be empty</div>             </div>         </form>          <ng-container *ngIf="curEditingQuestion.type == \'text\'">             <form [formGroup]="textQuestionForm">                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(textQuestionForm, \'maxChars\')}">                     <label class="col-form-label col-3" for="maxChars">                         Character Limit                     </label>                     <input class="form-control col-8" id="maxChars" type="number" [formControl]="textQuestionForm.controls[\'maxChars\']"                            [ngClass]="{\'form-control-danger\': isFormFieldNotValid(textQuestionForm, \'maxChars\')}" />                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(textQuestionForm, \'maxChars\')" class="form-control-feedback col-8">Character Limit is invalid</div>                 </div>             </form>         </ng-container>          <ng-container *ngIf="curEditingQuestion.type == \'scale\'">             <form [formGroup]="scaleQuestionForm">                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(scaleQuestionForm, \'min\')}">                     <label class="col-form-label col-3" for="min">                         Minimum Value                     </label>                     <input class="form-control col-8" id="min" [formControl]="scaleQuestionForm.controls[\'min\']"                            [ngClass]="{\'form-control-danger\': isFormFieldNotValid(scaleQuestionForm, \'min\')}" />                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(scaleQuestionForm, \'min\')" class="form-control-feedback col-8">Minimum Value cannot be emtpy</div>                     <div *ngIf="!isFormFieldRequiredEmpty(scaleQuestionForm, \'min\') &&                          isFormFieldNotNonNegativeNum(scaleQuestionForm, \'min\')" class="form-control-feedback col-8">                         Invalid number                     </div>                 </div>                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(scaleQuestionForm, \'max\')}">                     <label class="col-form-label col-3"  for="max">                         Maximum Value                     </label>                     <input class="form-control col-8" id="max" [formControl]="scaleQuestionForm.controls[\'max\']"                            [ngClass]="{\'form-control-danger\': isFormFieldNotValid(scaleQuestionForm, \'max\')}" />                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(scaleQuestionForm, \'max\')" class="form-control-feedback col-8">Maximum Value cannot be emtpy</div>                     <div *ngIf="!isFormFieldRequiredEmpty(scaleQuestionForm, \'max\') &&                          isFormFieldNotNonNegativeNum(scaleQuestionForm, \'max\')" class="form-control-feedback col-8">                         Invalid number                     </div>                 </div>                 <div class="form-group row">                     <label class="col-form-label col-3"  for="minLabel">                         Minimum Value Label                     </label>                     <input class="form-control col-8" id="minLabel" type="text" [formControl]="scaleQuestionForm.controls[\'minLabel\']"/>                 </div>                 <div class="form-group row">                     <label class="col-form-label col-3" for="maxLabel">                         Maximum Value Label                     </label>                     <input class="form-control col-8" id="maxLabel" type="text" [formControl]="scaleQuestionForm.controls[\'maxLabel\']"/>                 </div>             </form>                     </ng-container>          <ng-container *ngIf="curEditingQuestion.type == \'predefined\'">             <div *ngFor="let optionForm of predefinedQuestionForm.controls[\'options\'].controls; let i = index; trackBy:trackByFn">                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(optionForm, \'value\')}">                     <label class="col-form-label col-3" *ngIf="i==0">                         Multiple Choice Options                     </label>                     <span class="col-3" *ngIf="i>0"></span>                      <input class="form-control col-8" type="text" [formControl]="optionForm.controls[\'value\']"                            [ngClass]="{\'form-control-danger\': isFormFieldNotValid(optionForm, \'value\')}" />                     <i *ngIf="i > 0" class="fa fa-close col-form-label col-1 delete-option-icon" (click)="onDeleteOption(i)"></i>                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(optionForm, \'value\')" class="form-control-feedback col-8">Option cannot be emtpy</div>                 </div>             </div>             <div class="form-group row">                 <span class="col-3"></span>                 <div class="col-8 add-option-button">                     <button class="btn btn-outline-primary" (click)="onAddOption()">                         + Add Option                     </button>                 </div>             </div>         </ng-container>     </div> </modal>  <modal *ngIf="editMode == EditMode.DeleteQuestion"        title="Delete Question"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        submitButtonText="Delete Question"        (modalSubmitted)="onDeleteQuestion(this.curEditingQuestion.questionId)">        [metricIdentifier]="context.identifier"     <div class="modal-body">                 <p *ngIf="this.survey.surveyMetadata.status != SurveyStatus.Draft">             Deleting a question from a active survey will prevent you from viewing responses collected so far for this             question. If you would like to keep viewing the responses, use the "Disable Question" option instead.         </p>         <p>             Are you sure you want to delete this question?         </p>     </div> </modal>  <modal *ngIf="editMode == EditMode.DisableQuestion || editMode == EditMode.EnableQuestion"        [title]="editMode == EditMode.DisableQuestion ? \'Disable Question\' : \'Enable Question\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        [submitButtonText]="editMode == EditMode.DisableQuestion ? \'Disable Question\' : \'Enable Question\'"        (modalSubmitted)="editMode == EditMode.DisableQuestion ? onDisableQuestion(this.curEditingQuestion.questionId) : onEnableQuestion(this.curEditingQuestion.questionId)">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <ng-container [ngSwitch]="editMode">             <p *ngSwitchCase="EditMode.DisableQuestion">                 Disabling this question will prevent it from appearing in the survey and responses to it will no longer be collected. Any existing responses to this question will be preserved.             </p>             <p *ngSwitchCase="EditMode.EnableQuestion">                 Enable a question will make the question reappear in the survey and start collecting                 responses again.             </p>         </ng-container>             </div> </modal>  <modal *ngIf="editMode == EditMode.ConfirmEditActiveSurvey"        title="Edit Active Survey?"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        submitButtonText="Edit Active Survey"        (modalSubmitted)="onConfirmEditActiveSurvey()">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <p>             Are you sure you want to edit an active survey?         </p>     </div> </modal>  <modal *ngIf="editMode == EditMode.PublishSurvey || editMode == EditMode.EditActivationPeriod"        [title]="editMode == EditMode.PublishSurvey ? \'Publish Survey\' : \'Edit Activation Period\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        [submitButtonText]="editMode == EditMode.PublishSurvey ? \'Publish Survey\' : \'Modify\'"        (modalSubmitted)="editMode == EditMode.PublishSurvey ? onPublishSurvey() : onModifyActivationPeriod()">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <form>             <div class="form-group row" [class.has-danger]="activationPeriod.start.valid === false || activationPeriod.end.valid === false">                 <label for="schedule" class="col-3 col-form-label affix"> Scheduling </label>                 <div class="col-9">                     <datetime-range-picker (dateTimeRange)="onUpdateSurveyActivationPeriod($event)"                                            [startDateModel]="activationPeriod.start.date"                                            [endDateModel]="activationPeriod.end.date"                                            [startTime]="activationPeriod.start.time"                                            [endTime]="activationPeriod.end.time"                                            [hasStart]="activationPeriod.hasStart"                                            [hasEnd]="activationPeriod.hasEnd">                     </datetime-range-picker>                     <div *ngIf="activationPeriod.start.valid === false" class="form-control-feedback">{{activationPeriod.start.message}}</div>                     <div *ngIf="activationPeriod.end.valid === false" class="form-control-feedback">{{activationPeriod.end.message}}</div>                 </div>             </div>         </form>     </div> </modal>  <modal *ngIf="editMode == EditMode.CloneSurvey"        title="Clone Survey"        [autoOpen]="true"        [hasSubmit]="true"        submitButtonText="Clone Survey"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        (modalSubmitted)="onCloneSurvey()">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <form [formGroup]="surveyNameForm">             <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(surveyNameForm, \'surveyName\')}">                 <label class="col-form-label col-4" for="survey_name">                     Survey Name                 </label>                 <input class="form-control col-8" id="survey_name" type="text" [formControl]="surveyNameForm.controls[\'surveyName\']"                        [ngClass]="{\'form-control-danger\': isFormFieldNotValid(surveyNameForm, \'surveyName\')}" />                  <span class="col-4"></span>                 <div *ngIf="isFormFieldRequiredEmpty(surveyNameForm, \'surveyName\')" class="form-control-feedback col-8">Survey name cannot be empty</div>             </div>         </form>     </div> </modal>  <modal *ngIf="editMode == EditMode.CloseSurvey"        title="End Survey"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        closeButtonText="Cancel"        submitButtonText="End Survey"        (modalSubmitted)="onCloseSurvey()">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <p> Are you sure you want to end this survey? </p>     </div> </modal>',styles:['.survey-name{font-weight:bold}.questino-title{font-weight:bold}.survey-info{border:1px solid #6441A5;width:450px;padding:10px}.question-preview{border:1px solid #eee;width:800px;padding:10px;margin-top:15px;margin-bottom:15px}.question-preview .questions{padding-top:10px}.question-preview .question-textarea-preview{width:560px;height:200px;max-height:200px}.question-preview .question-textarea-chars-label{width:70%;text-align:right}.default-cursor{cursor:auto}input[type=\'range\']{vertical-align:middle}.disabled-question{opacity:0.5}.disabled-question-text{color:red}.delete-option-icon{color:red;cursor:pointer}.active-survey-icon{color:green}.scheduled-survey-icon{color:orangered}.movement-icon{margin-right:5px}.question-type-dropdown{padding:0px}.add-option-button{padding:0px}.add-question-button{margin-top:10px}.publish-survey-button{margin-top:10px}input[type="range"]{-webkit-appearance:none;border-radius:2px;height:3px;box-shadow:inset #6441A5 0 0 5px;outline:none;transition:.1s}input[type="range"]::-webkit-slider-thumb{-webkit-appearance:none;width:10px;height:10px;background:#6441A5;border-radius:50%;transition:.1s}']}),p("design:paramtypes",[k.FormBuilder,d.Http,e.AwsService,h.ToastsManager,c.ViewContainerRef,j.LyMetricService])],a)}(),a("InGameSurveyEditSurveyComponent",n)}}}),a.register("2",["7","8","a","12","10","b","6"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){j=function(){function a(a,b,c,d,e){this.http=a,this.aws=b,this.toastr=c,this.vcr=d,this.metric=e,this.Chart=i.Chart}return a.prototype.ngOnInit=function(){this.apiHandler=new i.InGameSurveyApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.surveyAnswerAggregationsUIModel=new i.SurveyAnswerAggregationsUIModel,this.isLoading=!1,this.bindMethods(),this.loadSurveyAnswerAggregations()},a.prototype.bindMethods=function(){this.onShowTextAnswers=this.onShowTextAnswers.bind(this),this.onShowAggregatedResults=this.onShowAggregatedResults.bind(this),this.onShowBarChart=this.onShowBarChart.bind(this),this.onShowPieChart=this.onShowPieChart.bind(this)},a.prototype.onShowBarChart=function(a){a.chart=i.Chart.Bar},a.prototype.onShowPieChart=function(a){a.chart=i.Chart.Pie},a.prototype.onShowTextAnswers=function(a){this.curViewingTextQuestionId=a},a.prototype.onShowAggregatedResults=function(){this.curViewingTextQuestionId=null},a.prototype.loadSurveyAnswerAggregations=function(){var a=this;this.isLoading=!0,this.apiHandler.getSurveyAnswerAggregations(this.survey.surveyMetadata.surveyId).subscribe(function(b){var c=JSON.parse(b.body.text());a.surveyAnswerAggregations=new i.SurveyAnswerAggregations,a.surveyAnswerAggregations.fromBackend(c.result),a.surveyAnswerAggregationsUIModel.init(a.survey,a.surveyAnswerAggregations.questionIdToAnswerAggregationsMap),a.isLoading=!1},function(b){a.toastr.error("Survey answer aggregations did not refresh properly. "+b),a.isLoading=!1})},k([c.Input(),l("design:type",i.Survey)],a.prototype,"survey",void 0),k([c.Input(),l("design:type",Object)],a.prototype,"context",void 0),k([c.ViewChild(f.ModalComponent),l("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),a=k([c.Component({selector:"answer-aggregation",template:'<div *ngIf="!curViewingTextQuestionId">     <div *ngIf="isLoading == true">         <loading-spinner></loading-spinner>     </div>      <div *ngIf="isLoading == false">         <div class="answer-aggregation" *ngFor="let questionAnswerAggregation of surveyAnswerAggregationsUIModel.questionAnswerAggregationsUIModels; let questionIndex = index">             <div class="question-title">                 {{questionAnswerAggregation.questionTitle}}             </div>             <div class="row" *ngIf="questionAnswerAggregation.questionType == \'predefined\' || questionAnswerAggregation.questionType == \'scale\'">                 <div class="col-3">                     <table class="answer-table col-12">                         <thead>                             <tr>                                                                 <td>                                     ANSWER                                 </td>                                 <td>                                     RESPONSES                                 </td>                             </tr>                         </thead>                         <tbody>                             <tr *ngFor="let answerAggregation of questionAnswerAggregation.answerAggregations">                                 <td>                                     {{answerAggregation.answer}}                                 </td>                                 <td>                                     {{answerAggregation.count}}                                 </td>                             </tr>                             <tr>                                 <td>                                     <b>TOTAL RESPONSES</b>                                 </td>                                 <td>                                     <b>{{questionAnswerAggregation.totalResponses}}</b>                                 </td>                             </tr>                         </tbody>                     </table>                 </div>                 <div class="col-9">                     <div class="row">                         <span [class.active-chart]="questionAnswerAggregation.chart == Chart.Bar" class="fa fa-bar-chart cursor-pointer" data-toggle="tooltip" data-placement="top" title="Show Bar Chart" (click)="onShowBarChart(questionAnswerAggregation)"></span>                         &nbsp;                         <span [class.active-chart]="questionAnswerAggregation.chart == Chart.Pie" class="fa fa-pie-chart cursor-pointer" data-toggle="tooltip" data-placement="top" title="Show Pie Chart" (click)="onShowPieChart(questionAnswerAggregation)"></span>                          <ng-container [ngSwitch]="questionAnswerAggregation.chart">                             <barchart *ngSwitchCase="Chart.Bar" class="col-12" [data]="questionAnswerAggregation.chartData" [y-axis-label]="\'Number of Responses\'"></barchart>                             <piechart *ngSwitchCase="Chart.Pie" class="col-12" [data]="questionAnswerAggregation.chartData"></piechart>                         </ng-container>                                             </div>                 </div>             </div>             <div *ngIf="questionAnswerAggregation.questionType == \'text\'">                 <div class="col-12">                     <div>                         Answers to text questions can be accessed by viewing each individual responses.                                             </div>                                                             <button (click)="onShowTextAnswers(questionAnswerAggregation.questionId)" class="btn l-primary">                         View Answers                     </button>                 </div>                             </div>         </div>     </div> </div>  <div *ngIf="curViewingTextQuestionId">     <button (click)="onShowAggregatedResults()" class="btn l-primary">         < Back to aggregated results     </button>     <text-answer-submission-list [context]="context" [survey]="survey" [questionId]="curViewingTextQuestionId"></text-answer-submission-list> </div>',styles:[".answer-aggregation{border:1px solid #eee;padding:10px;margin-top:15px;margin-bottom:15px}.answer-table tr{border-bottom:1px solid #999}.answer-table tbody{border:none;border:1px solid #999;border-collapse:collapse}.active-chart{color:#6441A5}.cursor-pointer{cursor:pointer}.question-title{font-weight:bold;padding-bottom:5px}"]}),l("design:paramtypes",[d.Http,e.AwsService,g.ToastsManager,c.ViewContainerRef,h.LyMetricService])],a)}(),a("InGameSurveyAnswerAggregationComponent",j)}}}),a.register("14",["7","8","a","12","10","15","b","6"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},n=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a}],execute:function(){!function(a){a[a.None=0]="None",a[a.DeleteSubmission=1]="DeleteSubmission"}(k||(k={})),l=function(){function a(a,b,c,d,e){this.http=a,this.aws=b,this.toastr=c,this.vcr=d,this.metric=e,this.epochToString=j.TimeUtil.epochToString,this.EditMode=k,this.loadSubmissionBatchSize=100,this.checkExportStatusIntervalMilliSeconds=3e3}return a.prototype.ngOnInit=function(){this.apiHandler=new j.InGameSurveyApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.editMode=k.None,this.isLoading=!1,this.hasMoreSubmissionToLoad=!0,this.surveyAnswerSubmissions=new j.SurveyAnswerSubmissions,this.sortOrder=j.SortOrder.DESC,this.isExportingCSV=!1,this.bindMethods(),this.loadNextPageOfAnswerSubmissions()},a.prototype.bindMethods=function(){this.loadNextPageOfAnswerSubmissions=this.loadNextPageOfAnswerSubmissions.bind(this),this.onReverseSubmissionTimeSortOrder=this.onReverseSubmissionTimeSortOrder.bind(this),this.onShowAnswerSubmissionDetail=this.onShowAnswerSubmissionDetail.bind(this),this.onShowSumissionList=this.onShowSumissionList.bind(this),this.onExportAnswerSubmissionsToCSV=this.onExportAnswerSubmissionsToCSV.bind(this),this.onDismissModal=this.onDismissModal.bind(this),this.onShowDeleteSubmissionModal=this.onShowDeleteSubmissionModal.bind(this),this.onDeleteAnswerSubmission=this.onDeleteAnswerSubmission.bind(this)},a.prototype.closeModal=function(){this.modalRef.close()},a.prototype.onDeleteAnswerSubmission=function(a){var b=this;this.apiHandler.deleteAnswerSubmission(this.survey.surveyMetadata.surveyId,a.submissionId).subscribe(function(c){var d=b.surveyAnswerSubmissions.answerSubmissions.findIndex(function(b){return b.submissionId==a.submissionId});-1!=d&&b.surveyAnswerSubmissions.answerSubmissions.splice(d,1),b.answerSubmission==a&&(b.answerSubmission=null,b.answerSubmissionUIModel=null),b.closeModal(),b.editMode=k.None},function(a){b.toastr.error("Failed to delete submission. "+a)})},a.prototype.onShowDeleteSubmissionModal=function(a){this.curEditingAnswerSubmission=a,this.editMode=k.DeleteSubmission},a.prototype.onDismissModal=function(){this.editMode=k.None},a.prototype.onExportAnswerSubmissionsToCSV=function(){var a=this;if(!this.isExportingCSV){this.isExportingCSV=!0,this.numResponsesExported=0;var b=this.survey.surveyMetadata.surveyId;this.apiHandler.exportSurveyAnswerSubmissionsToCSV(b).subscribe(function(c){var d=JSON.parse(c.body.text());a.exportCSVRequestId=d.result.request_id;var e=h.Observable.timer(0,a.checkExportStatusIntervalMilliSeconds).subscribe(function(c){a.apiHandler.getExportSurveyAnswerSubmissionsToCSVStatus(b,a.exportCSVRequestId).subscribe(function(b){var c=JSON.parse(b.body.text());a.numResponsesExported=c.result.num_submissions_exported,c.result.s3_presigned_url&&(a.isExportingCSV=!1,e.unsubscribe(),window.open(c.result.s3_presigned_url))})})},function(b){a.isExportingCSV=!1,a.toastr.error("Failed to export answer submissions to CSV, please try again. "+b)})}},a.prototype.onShowSumissionList=function(){this.answerSubmission=null,this.answerSubmissionUIModel=null},a.prototype.onShowAnswerSubmissionDetail=function(a){this.answerSubmission=a,this.answerSubmissionUIModel=new j.AnswerSubmissionUIModel,this.answerSubmissionUIModel.init(this.survey,a.questionIdToAnswerMap)},a.prototype.onReverseSubmissionTimeSortOrder=function(){this.sortOrder^=1,this.hasMoreSubmissionToLoad=!0,this.surveyAnswerSubmissions=new j.SurveyAnswerSubmissions,this.loadNextPageOfAnswerSubmissions()},a.prototype.loadNextPageOfAnswerSubmissions=function(){var a=this;this.hasMoreSubmissionToLoad&&(this.isLoading=!0,this.apiHandler.getSurveyAnswerSubmissions(this.survey.surveyMetadata.surveyId,this.surveyAnswerSubmissions.paginationToken,this.loadSubmissionBatchSize,j.SortOrder[this.sortOrder]).subscribe(function(b){var c=JSON.parse(b.body.text());a.surveyAnswerSubmissions.answerSubmissions=a.surveyAnswerSubmissions.answerSubmissions.concat(c.result.submissions.map(function(a){var b=new j.AnswerSubmission;return b.fromBackend(a),b})),a.surveyAnswerSubmissions.paginationToken=c.result.pagination_token,a.surveyAnswerSubmissions.paginationToken||(a.hasMoreSubmissionToLoad=!1),a.isLoading=!1},function(b){a.toastr.error("The survey answer submissions did not refresh properly. "+b),a.isLoading=!1}))},m([c.Input(),n("design:type",j.Survey)],a.prototype,"survey",void 0),m([c.Input(),n("design:type",Object)],a.prototype,"context",void 0),m([c.ViewChild(f.ModalComponent),n("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),a=m([c.Component({selector:"answer-submission-list",template:'<div *ngIf="answerSubmissionUIModel">     <div>         <button class="btn l-primary" (click)="onShowSumissionList()">             < Back to all responses         </button>     </div>     <div class="submission-info">         <span class="float-right">                             <i class="fa fa-trash-o" data-toggle="tooltip" data-placement="top" title="Delete" (click)="onShowDeleteSubmissionModal(answerSubmission)"></i>         </span>         <div>             <b>Submission ID: {{answerSubmission.submissionId}}</b>         </div>         <div>             <b>Submitted: {{epochToString(answerSubmission.creationTime)}}</b>         </div>     </div>     <div class="response" *ngFor="let answer of answerSubmissionUIModel.answers; let i = index">         <div>             <b>{{answer.questionTitle}}</b>         </div>         <div>             Response: {{answer.answer}}         </div>     </div> </div>  <div *ngIf="!answerSubmissionUIModel">     <div *ngIf="!isLoading && surveyAnswerSubmissions.answerSubmissions.length == 0" class="no-submission-text">         No submission     </div>          <div *ngIf="surveyAnswerSubmissions.answerSubmissions.length > 0">         <button class="btn l-primary" (click)="onExportAnswerSubmissionsToCSV()">             Export to CSV         </button>          <ng-container *ngIf="isExportingCSV">             <span class="fa fa-spinner fa-spin"></span>             Number of Submission Exported: {{numResponsesExported}} / Total Submissions: {{this.survey.surveyMetadata.numResponses}}         </ng-container>                                     <table class="table table-hover">             <thead>                 <tr>                     <th> SUBMISSION ID </th>                     <th>                         SUBMITTED                         <div class="fa fa-caret-down" (click)="onReverseSubmissionTimeSortOrder()"></div>                     </th>                 </tr>             </thead>             <tbody>                 <tr *ngFor="let submission of surveyAnswerSubmissions.answerSubmissions">                     <td (click)="onShowAnswerSubmissionDetail(submission)"> {{submission.submissionId}} </td>                     <td (click)="onShowAnswerSubmissionDetail(submission)"> {{epochToString(submission.creationTime)}} </td>                     <td>                         <div class="float-right">                             <i (click)="onShowDeleteSubmissionModal(submission)" class="fa fa-trash-o" data-toggle="tooltip" data-placement="top" title="Delete"></i>                         </div>                     </td>                 </tr>             </tbody>         </table>     </div>     <div *ngIf="isLoading">         <loading-spinner></loading-spinner>     </div>      <div *ngIf="surveyAnswerSubmissions.answerSubmissions.length > 0 && !hasMoreSubmissionToLoad" class="no-more-submission-text">         No more answers to load.     </div>              <ng-container [ngSwitch]="hasMoreSubmissionToLoad">         <button *ngSwitchCase="true" class="btn l-primary" (click)="loadNextPageOfAnswerSubmissions()">             Load next {{loadSubmissionBatchSize}} submissions         </button>         <button *ngSwitchCase="false" class="btn l-primary" (click)="loadNextPageOfAnswerSubmissions()" disabled>             Load next {{loadSubmissionBatchSize}} submissions         </button>     </ng-container> </div>   <modal *ngIf="editMode == EditMode.DeleteSubmission"        title="Delete Answer Submission"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        submitButtonText="Delete Submission"        (modalSubmitted)="onDeleteAnswerSubmission(curEditingAnswerSubmission)"        [metricIdentifier]="context.identifier">            <div class="modal-body">         <p>             Are you sure you want to delete this submission?         </p>     </div> </modal>',styles:[".submission-info{border:1px solid #6441A5;width:600px;padding:10px;margin-top:15px;margin-bottom:15px}.response{border:1px solid #eee;width:800px;padding:10px;margin-top:15px;margin-bottom:15px}.no-submission-text{margin:10px}.no-more-submission-text{margin:10px;color:green}"]}),n("design:paramtypes",[d.Http,e.AwsService,g.ToastsManager,c.ViewContainerRef,i.LyMetricService])],a)}(),a("InGameSurveyAnswerSubmissionComponent",l)}}}),a.register("16",["7","8","a","12","10","b","6"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){j=function(){function a(a,b,c,d,e){this.http=a,this.aws=b,this.toastr=c,this.vcr=d,this.metric=e,this.epochToString=i.TimeUtil.epochToString,this.loadSubmissionBatchSize=100}return a.prototype.ngOnInit=function(){this.apiHandler=new i.InGameSurveyApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.isLoading=!1,this.hasMoreSubmissionToLoad=!0,this.paginationToken=null,this.sortOrder=i.SortOrder.DESC,this.textAnswerSubmissionUIModels=[],this.bindMethods(),this.loadNextPageOfAnswerSubmissions()},a.prototype.bindMethods=function(){this.loadNextPageOfAnswerSubmissions=this.loadNextPageOfAnswerSubmissions.bind(this),this.onReverseSubmissionTimeSortOrder=this.onReverseSubmissionTimeSortOrder.bind(this)},a.prototype.onReverseSubmissionTimeSortOrder=function(){this.sortOrder^=1,this.hasMoreSubmissionToLoad=!0,this.textAnswerSubmissionUIModels=[],this.paginationToken=null,this.loadNextPageOfAnswerSubmissions()},a.prototype.loadNextPageOfAnswerSubmissions=function(){var a=this;this.hasMoreSubmissionToLoad&&(this.isLoading=!0,this.apiHandler.getSurveyAnswerSubmissions(this.survey.surveyMetadata.surveyId,this.paginationToken,this.loadSubmissionBatchSize,i.SortOrder[this.sortOrder]).subscribe(function(b){var c=JSON.parse(b.body.text());c.result.submissions.map(function(a){var b=new i.AnswerSubmission;return b.fromBackend(a),b}).forEach(function(b){var c=new i.TextAnswerSubmissionsUIModel;c.init(a.questionId,b)&&a.textAnswerSubmissionUIModels.push(c)}),a.paginationToken=c.result.pagination_token,a.paginationToken||(a.hasMoreSubmissionToLoad=!1),a.isLoading=!1},function(b){a.toastr.error("The survey answer submissions did not refresh properly. "+b),a.isLoading=!1}))},k([c.Input(),l("design:type",i.Survey)],a.prototype,"survey",void 0),k([c.Input(),l("design:type",String)],a.prototype,"questionId",void 0),k([c.Input(),l("design:type",Object)],a.prototype,"context",void 0),k([c.ViewChild(f.ModalComponent),l("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),a=k([c.Component({selector:"text-answer-submission-list",template:'<div *ngIf="!isLoading && textAnswerSubmissionUIModels.length == 0" class="no-submission-text">     No submission </div>  <div *ngIf="textAnswerSubmissionUIModels.length > 0">     <table class="table table-hover">         <thead>             <tr>                 <th> ANSWER </th>                 <th>                     SUBMITTED                     <div class="fa fa-caret-down" (click)="onReverseSubmissionTimeSortOrder()"></div>                 </th>             </tr>         </thead>         <tbody>             <tr *ngFor="let submission of textAnswerSubmissionUIModels">                 <td> {{submission.answer}} </td>                 <td> {{epochToString(submission.creationTime)}} </td>             </tr>         </tbody>     </table> </div> <div *ngIf="isLoading">     <loading-spinner></loading-spinner> </div>      <div *ngIf="textAnswerSubmissionUIModels.length > 0 && !hasMoreSubmissionToLoad" class="no-more-submission-text">     No more answers to load. </div>  <ng-container [ngSwitch]="hasMoreSubmissionToLoad">     <button *ngSwitchCase="true" class="btn l-primary" (click)="loadNextPageOfAnswerSubmissions()">         Load next {{loadSubmissionBatchSize}} submissions     </button>     <button *ngSwitchCase="false" class="btn l-primary" (click)="loadNextPageOfAnswerSubmissions()" disabled>         Load next {{loadSubmissionBatchSize}} submissions     </button> </ng-container>',styles:[".submission-info{padding-top:10px}.response{border:1px solid #eee;width:800px;padding:10px;margin-top:15px;margin-bottom:15px}.no-submission-text{margin:10px}.no-more-submission-text{color:green;margin:10px}"]}),l("design:paramtypes",[d.Http,e.AwsService,g.ToastsManager,c.ViewContainerRef,h.LyMetricService])],a)}(),a("InGameSurveyTextAnswerSubmissionComponent",j)}}}),a.register("17",["7","8","a","10","b","6"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(){function a(a,b,c,d,e){this.http=a,this.aws=b,this.toastr=c,this.vcr=d,this.metric=e}return a.prototype.ngOnInit=function(){this.apiHandler=new h.InGameSurveyApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.isLoading=!1,this.tabIndex=0,this.bindMethods(),this.loadSurvey(this.surveyMetadata)},a.prototype.bindMethods=function(){this.onTabIndexUpdated=this.onTabIndexUpdated.bind(this)},a.prototype.onTabIndexUpdated=function(a){this.tabIndex=a},a.prototype.loadSurvey=function(a){var b=this;this.isLoading=!0,this.apiHandler.getSurvey(a.surveyId).subscribe(function(a){var c=JSON.parse(a.body.text());b.survey=new h.Survey,b.survey.init(c.result,b.surveyMetadata),b.isLoading=!1},function(a){b.toastr.error("Failed to load survey, please try again. "+a),b.isLoading=!1})},j([c.Input(),k("design:type",Object)],a.prototype,"context",void 0),j([c.Input(),k("design:type",h.SurveyMetadata)],a.prototype,"surveyMetadata",void 0),a=j([c.Component({selector:"survey-details-page",template:'<facet-generator [tabs]="[\'Questions\', \'Results\', \'Individual Responses\']"                  (tabClicked)="onTabIndexUpdated($event)"                  [metricIdentifier]="context.identifier"> </facet-generator>  <div *ngIf="isLoading == true">     <loading-spinner></loading-spinner> </div>  <ng-container *ngIf="isLoading == false && survey">     <ng-container *ngIf="tabIndex == 0">         <edit-survey [context]="context" [survey]="survey"></edit-survey>     </ng-container>      <ng-container *ngIf="tabIndex == 1">         <answer-aggregation [context]="context" [survey]="survey"></answer-aggregation>     </ng-container>      <ng-container *ngIf="tabIndex == 2">         <answer-submission-list [context]="context" [survey]="survey"></answer-submission-list>     </ng-container> </ng-container>'}),k("design:paramtypes",[d.Http,e.AwsService,f.ToastsManager,c.ViewContainerRef,g.LyMetricService])],a)}(),a("InGameSurveySurveyDetailsPageComponent",i)}}}),a.register("18",["7","8","a","12","13","10","b","11","6"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m,n=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},o=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a},function(a){k=a}],execute:function(){!function(a){a[a.None=0]="None",a[a.CreateSurvey=1]="CreateSurvey",a[a.CloneSurvey=2]="CloneSurvey",a[a.DeleteSurvey=3]="DeleteSurvey",a[a.CloseSurvey=4]="CloseSurvey"}(l||(l={})),m=function(){function a(a,b,c,d,e,f){this.fb=a,this.http=b,this.aws=c,this.toastr=d,this.vcr=e,this.metric=f,this.EditMode=l,this.SurveyStatus=k.SurveyStatus,this.epochToString=k.TimeUtil.epochToString,this.isFormFieldRequiredEmpty=k.ValidationUtil.isFormFieldRequiredEmpty,this.isFormFieldNotValid=k.ValidationUtil.isFormFieldNotValid,this.cloneSurveyAction=new g.ActionItem("Clone",this.onShowCloneSurveyModal),this.closeSurveyAction=new g.ActionItem("End",this.onShowCloseSurveyModal),this.inactiveSurveyActions=[this.cloneSurveyAction],this.activeSurveyActions=[this.cloneSurveyAction,this.closeSurveyAction],this.numSurveysPerPage=10,this.curFilteredSurveysPageIndex=0,this.curClosedSurveysPageIndex=0,this.filteredSurveySortOrder=k.SortOrder.DESC,this.closedSurveySortOrder=k.SortOrder.DESC,this.surveyFilter=k.SurveyStatus.Active|k.SurveyStatus.Scheduled|k.SurveyStatus.Draft,this.showSurveyFilter=!1,this.activeFilterChecked=!0,this.scheduledFilterChecked=!0,this.draftFilterChecked=!0,this.showEditSurveyOptions=!1}return a.prototype.ngOnInit=function(){this.apiHandler=new k.InGameSurveyApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.isLoading=!1,this.tabIndex=0,this.bindMethods(),this.surveyMetadataList=[],this.loadSurveyMetadataList(null,null)},a.prototype.bindMethods=function(){this.onShowStatusFilter=this.onShowStatusFilter.bind(this),this.cloneSurveyAction.onClick=this.cloneSurveyAction.onClick.bind(this),this.closeSurveyAction.onClick=this.closeSurveyAction.onClick.bind(this),this.onShowCreateSurveyModal=this.onShowCreateSurveyModal.bind(this),this.onSurveyNameSearchUpdated=this.onSurveyNameSearchUpdated.bind(this),this.onReverseCurSurveyMetadataListSortOrder=this.onReverseCurSurveyMetadataListSortOrder.bind(this),this.onApplyFilterChange=this.onApplyFilterChange.bind(this),this.onCancelFilterChange=this.onCancelFilterChange.bind(this),this.onPageChanged=this.onPageChanged.bind(this),this.onShowSurveyDetailsPage=this.onShowSurveyDetailsPage.bind(this),this.onDismissModal=this.onDismissModal.bind(this),this.onCreateSurvey=this.onCreateSurvey.bind(this),this.onCloseSurvey=this.onCloseSurvey.bind(this),this.onCloneSurvey=this.onCloneSurvey.bind(this),this.onShowCloneSurveyModal=this.onShowCloneSurveyModal.bind(this),this.onShowCloseSurveyModal=this.onShowCloseSurveyModal.bind(this),this.onDeleteSurvey=this.onDeleteSurvey.bind(this),this.onShowDeleteSurveyModal=this.onShowDeleteSurveyModal.bind(this)},a.prototype.createSurveyNameForm=function(){this.surveyNameForm=this.fb.group({surveyName:[null,j.Validators.compose([j.Validators.required])]})},a.prototype.validateSurveyNameForm=function(){return this.surveyNameForm.controls.surveyName.markAsTouched(),this.surveyNameForm.controls.surveyName.valid},a.prototype.removeSurveyMetadata=function(a){this.removeSurveyMetadataFromList(a,this.surveyMetadataList),this.removeSurveyMetadataFromList(a,this.filteredSurveyMetadataList),this.removeSurveyMetadataFromList(a,this.closedSurveyMetadataList)},a.prototype.removeSurveyMetadataFromList=function(a,b){var c=b.findIndex(function(b){return b.surveyId==a});return-1!=c?b.splice(c,1)[0]:null},a.prototype.onDeleteSurvey=function(a){var b=this;this.apiHandler.deleteSurvey(a.surveyId).subscribe(function(c){b.removeSurveyMetadata(a.surveyId),b.closeModal(),b.editMode=l.None},function(a){b.toastr.error("Failed to delete survey. "+a)})},a.prototype.onShowStatusFilter=function(){this.showSurveyFilter=!this.showSurveyFilter},a.prototype.closeModal=function(){this.modalRef.close()},a.prototype.onCreateSurvey=function(){var a=this;if(this.validateSurveyNameForm()){var b=this.surveyNameForm.value.surveyName;this.apiHandler.createSurvey(b).subscribe(function(c){var d=JSON.parse(c.body.text()),e=new k.SurveyMetadata;e.surveyName=b,e.surveyId=d.result.survey_id,e.creationTime=d.result.creation_time,a.closeModal(),a.toSurveyDetailsPageCallback&&a.toSurveyDetailsPageCallback(e)},function(b){a.toastr.error("Failed to create survey, please try again. "+b)})}},a.prototype.onDismissModal=function(){this.editMode=l.None},a.prototype.onShowDeleteSurveyModal=function(a){this.curSurveyMetadata=a,this.editMode=l.DeleteSurvey},a.prototype.onPageChanged=function(a){0==this.tabIndex?this.curFilteredSurveysPageIndex=a-1:1==this.tabIndex&&(this.curClosedSurveysPageIndex=a-1)},a.prototype.onShowCloneSurveyModal=function(a){this.curSurveyMetadata=a,this.editMode=l.CloneSurvey,this.createSurveyNameForm()},a.prototype.onShowCloseSurveyModal=function(a){this.curSurveyMetadata=a,this.editMode=l.CloseSurvey},a.prototype.insertSurveyMetadataToList=function(a,b,c){if(c==k.SortOrder.DESC){for(var d=0;d<b.length&&!(a.creationTime>=b[d].creationTime);d++);b.splice(d,0,a)}else{for(var d=b.length;d>0&&!(a.creationTime>=b[d-1].creationTime);d--);b.splice(d,0,a)}},a.prototype.insertSurveyMetadata=function(a){this.insertSurveyMetadataToList(a,this.surveyMetadataList,k.SortOrder.DESC),a.status==k.SurveyStatus.Closed?this.insertSurveyMetadataToList(a,this.closedSurveyMetadataList,this.closedSurveySortOrder):a.status&this.surveyFilter&&this.insertSurveyMetadataToList(a,this.filteredSurveyMetadataList,this.filteredSurveySortOrder)},a.prototype.onCloneSurvey=function(){var a=this;if(this.validateSurveyNameForm()){var b=this.surveyNameForm.value.surveyName;this.apiHandler.cloneSurvey(b,this.curSurveyMetadata.surveyId).subscribe(function(c){var d=JSON.parse(c.body.text()),e=new k.SurveyMetadata;e.surveyName=b,e.surveyId=d.result.survey_id,e.creationTime=d.result.creation_time,a.insertSurveyMetadata(e),a.refreshPagination(),a.closeModal(),a.editMode=l.None},function(b){a.toastr.error("Failed to update activation period. "+b),a.closeModal(),a.editMode=l.None})}},a.prototype.onCloseSurvey=function(a){var b=this,c=Math.floor(Date.now()/1e3)-1;this.apiHandler.setSurveyActivationPeriod(a.surveyId,a.activationStartTime,c).subscribe(function(d){b.toastr.success("Survey has been closed");var e=b.removeSurveyMetadataFromList(a.surveyId,b.filteredSurveyMetadataList);e&&(e.activationEndTime=c,e.status=k.SurveyStatus.Closed,b.insertSurveyMetadataToList(e,b.closedSurveyMetadataList,b.closedSurveySortOrder)),b.closeModal(),b.editMode=l.None},function(a){b.toastr.error("Failed to update activation period. "+a)})},a.prototype.onShowSurveyDetailsPage=function(a){this.toSurveyDetailsPageCallback&&this.toSurveyDetailsPageCallback(a)},a.prototype.onCancelFilterChange=function(){this.activeFilterChecked=Boolean(this.surveyFilter&k.SurveyStatus.Active),this.scheduledFilterChecked=Boolean(this.surveyFilter&k.SurveyStatus.Scheduled),this.draftFilterChecked=Boolean(this.surveyFilter&k.SurveyStatus.Draft)},a.prototype.onApplyFilterChange=function(){var a=0;this.activeFilterChecked&&(a|=k.SurveyStatus.Active),this.scheduledFilterChecked&&(a|=k.SurveyStatus.Scheduled),this.draftFilterChecked&&(a|=k.SurveyStatus.Draft),this.surveyFilter!=a&&(this.surveyFilter=a,this.filterSurveyMetadataList(),this.refreshPagination())},a.prototype.onReverseCurSurveyMetadataListSortOrder=function(){0==this.tabIndex?(this.filteredSurveySortOrder^=1,this.filteredSurveyMetadataList.reverse()):1==this.tabIndex&&(this.closedSurveySortOrder^=1,this.closedSurveyMetadataList.reverse())},a.prototype.getCurSurveyMetadataList=function(){var a=0==this.tabIndex?this.curFilteredSurveysPageIndex:this.curClosedSurveysPageIndex,b=this.numSurveysPerPage*a,c=b+this.numSurveysPerPage;return 0==this.tabIndex?this.filteredSurveyMetadataList.slice(b,c):1==this.tabIndex?this.closedSurveyMetadataList.slice(b,c):null},a.prototype.refreshPagination=function(){var a,b=0==this.tabIndex?this.filteredSurveyMetadataList:this.closedSurveyMetadataList;b&&0!=b.length?(a=Math.floor(b.length/this.numSurveysPerPage),a+=b.length%this.numSurveysPerPage>0?1:0):a=1,0==this.tabIndex?this.numFilteredSurveysPages=a:1==this.tabIndex&&(this.numClosedSurveysPages=a)},a.prototype.clearFilteredSurveyMetadata=function(){this.filteredSurveyMetadataList=[],this.closedSurveyMetadataList=[]},a.prototype.populateSuveyStatuses=function(a){for(var b=Math.floor(Date.now()/1e3),c=0,d=a;c<d.length;c++){d[c].determineSurveyStatus(b)}},a.prototype.filterSurveyMetadataList=function(){this.clearFilteredSurveyMetadata();for(var a=0,b=this.surveyMetadataList;a<b.length;a++){var c=b[a];this.filterSurveyMetadata(c)}},a.prototype.filterSurveyMetadata=function(a){if(a.status==k.SurveyStatus.Closed)return void this.closedSurveyMetadataList.push(a);a.status&this.surveyFilter&&this.filteredSurveyMetadataList.push(a)},a.prototype.loadSurveyMetadataList=function(a,b){var c=this;this.isLoading=!0,this.apiHandler.getSurveyMetadataList(a,b).subscribe(function(b){var d=JSON.parse(b.body.text());c.surveyMetadataList=c.surveyMetadataList.concat(d.result.metadata_list.map(function(a){var b=new k.SurveyMetadata;return b.fromBackend(a),b})),d.result.pagination_token?c.loadSurveyMetadataList(a,d.result.pagination_token):(c.populateSuveyStatuses(c.surveyMetadataList),c.filterSurveyMetadataList(),c.refreshPagination(),c.isLoading=!1)},function(a){c.toastr.error("The survey list did not refresh properly. "+a),c.clearFilteredSurveyMetadata(),c.refreshPagination(),c.isLoading=!1})},a.prototype.onSurveyNameSearchUpdated=function(a){this.surveyMetadataList=[];var b=a.value;this.loadSurveyMetadataList(b,null)},a.prototype.onShowCreateSurveyModal=function(){this.editMode=l.CreateSurvey,this.createSurveyNameForm()},a.prototype.onTabIndexUpdated=function(a){this.tabIndex=a,0==this.tabIndex?this.curFilteredSurveysPageIndex=0:1==this.tabIndex&&(this.curClosedSurveysPageIndex=0),this.refreshPagination()},n([c.Input(),o("design:type",Object)],a.prototype,"context",void 0),n([c.Input(),o("design:type",Function)],a.prototype,"toSurveyDetailsPageCallback",void 0),n([c.ViewChild(f.ModalComponent),o("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),a=n([c.Component({selector:"survey-list-page",template:'<facet-generator [context]="context"                     [tabs]="[\'Overview\', \'History\']"                     (tabClicked)="onTabIndexUpdated($event)"                     [metricIdentifier]="context.identifier"></facet-generator> <div *ngIf="tabIndex == 0 || tabIndex == 1">     <button class="btn l-primary" (click)="onShowCreateSurveyModal()">         Create New Survey     </button>     <search class="float-right"             searchInputPlaceholder="Search Survey"             (searchUpdated)="onSurveyNameSearchUpdated($event)"></search>      <div *ngIf="isLoading">         <loading-spinner></loading-spinner>     </div>      <div *ngIf="!isLoading">         <div>                            <table class="table table-hover">                 <thead>                     <tr>                         <th> SURVEY NAME </th>                         <th>                             CREATION TIME                             <div class="fa fa-caret-down" (click)="onReverseCurSurveyMetadataListSortOrder()"></div>                         </th>                         <th>                             STATUS                             <div *ngIf="tabIndex == 0" class="fa fa-filter status-filter" (click)="onShowStatusFilter()">                                 <div class="survey-status-filter" [hidden]="!showSurveyFilter">                                     <div class="survey-statuses">                                         <div class="survey-status">                                             <input id="active_filter" type="checkbox" [(ngModel)]="activeFilterChecked" />                                             <label class="l-checkbox" for="active_filter">                                                 Active                                             </label>                                         </div>                                         <div class="survey-status">                                             <input id="draft_filter" type="checkbox" [(ngModel)]="draftFilterChecked" />                                             <label class="l-checkbox" for="draft_filter">                                                 Draft                                             </label>                                         </div>                                         <div class="survey-status">                                             <input id="scheduled_filter" type="checkbox" [(ngModel)]="scheduledFilterChecked" />                                             <label class="l-checkbox" for="scheduled_filter">                                                 Scheduled                                             </label>                                         </div>                                     </div>                                     <hr />                                     <div class="survey-status-filter-buttons">                                         <button class="btn btn-outline-primary" (click)="onCancelFilterChange()">cancel</button>                                         <button class="btn l-primary" (click)="onApplyFilterChange()">Apply Filters</button>                                     </div>                                 </div>                             </div>                         </th>                         <th> START </th>                         <th> END </th>                         <th> RESPONSES </th>                     </tr>                 </thead>                 <tbody>                     <tr *ngFor="let surveyMetadata of getCurSurveyMetadataList()">                         <td (click)="onShowSurveyDetailsPage(surveyMetadata)" placement="top"> {{surveyMetadata.surveyName}} </td>                         <td class="float-left" (click)="onShowSurveyDetailsPage(surveyMetadata)"> {{epochToString(surveyMetadata.creationTime)}} </td>                         <td (click)="onShowSurveyDetailsPage(surveyMetadata)">                             <ng-container [ngSwitch]="surveyMetadata.status">                                 <span *ngSwitchCase="SurveyStatus.Active" class="fa fa-check-circle active-survey-icon"></span>                                 <span *ngSwitchCase="SurveyStatus.Draft" class="fa fa-file-text-o"></span>                                 <span *ngSwitchCase="SurveyStatus.Scheduled" class="fa fa-clock-o scheduled-survey-icon"></span>                             </ng-container>                                                                 {{SurveyStatus[surveyMetadata.status]}}                         </td>                         <td (click)="onShowSurveyDetailsPage(surveyMetadata)">                             <ng-container *ngIf="surveyMetadata.activationStartTime > 0">{{epochToString(surveyMetadata.activationStartTime)}}</ng-container>                             <ng-container *ngIf="surveyMetadata.activationStartTime == 0">Now</ng-container>                         </td>                         <td (click)="onShowSurveyDetailsPage(surveyMetadata)">                             <ng-container *ngIf="surveyMetadata.activationEndTime != undefined && surveyMetadata.activationEndTime != null">{{epochToString(surveyMetadata.activationEndTime)}}</ng-container>                             <ng-container *ngIf="surveyMetadata.activationEndTime == undefined || surveyMetadata.activationEndTime == null">Never Expires</ng-container>                         </td>                         <td (click)="onShowSurveyDetailsPage(surveyMetadata)">{{surveyMetadata.numResponses}}</td>                         <td>                                                                                                                                    <div class="float-right">                                 <action-stub-items *ngIf="surveyMetadata.status == SurveyStatus.Active" [model]="surveyMetadata" [edit]="onShowSurveyDetailsPage" [delete]="onShowDeleteSurveyModal" [custom]="activeSurveyActions"></action-stub-items>                                 <action-stub-items *ngIf="surveyMetadata.status != SurveyStatus.Active" [model]="surveyMetadata" [edit]="onShowSurveyDetailsPage" [delete]="onShowDeleteSurveyModal" [custom]="inactiveSurveyActions"></action-stub-items>                             </div>                         </td>                     </tr>                 </tbody>             </table>         </div>          <ng-container [ngSwitch]="tabIndex">             <ng-container *ngSwitchCase="0">                 <pagination [pages]="numFilteredSurveysPages"                             (pageChanged)="onPageChanged($event)">                 </pagination>             </ng-container>             <ng-container *ngSwitchCase="1">                 <pagination [pages]="numClosedSurveysPages"                             (pageChanged)="onPageChanged($event)">                 </pagination>             </ng-container>         </ng-container>                 </div> </div>  <modal *ngIf="editMode == EditMode.CreateSurvey || editMode == EditMode.CloneSurvey"        [title]="editMode == EditMode.CreateSurvey ? \'Create New Survey\' : \'Clone Survey\'"        [autoOpen]="true"        [hasSubmit]="true"        [submitButtonText]="editMode == EditMode.CreateSurvey ? \'Create Survey\' : \'Clone Survey\'"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        (modalSubmitted)="editMode == EditMode.CreateSurvey ? onCreateSurvey() : onCloneSurvey()">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <form [formGroup]="surveyNameForm">             <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(surveyNameForm, \'surveyName\')}">                 <label class="col-form-label col-4" for="survey_name">                     Survey Name                 </label>                 <input class="form-control col-8" id="survey_name" type="text" [formControl]="surveyNameForm.controls[\'surveyName\']"                        [ngClass]="{\'form-control-danger\': isFormFieldNotValid(surveyNameForm, \'surveyName\')}" />                  <span class="col-4"></span>                 <div *ngIf="isFormFieldRequiredEmpty(surveyNameForm, \'surveyName\')" class="form-control-feedback col-8">Survey name cannot be empty</div>             </div>         </form>     </div> </modal>  <modal *ngIf="editMode == EditMode.DeleteSurvey"        title="Delete Survey"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        submitButtonText="Delete Survey"        (modalSubmitted)="onDeleteSurvey(curSurveyMetadata)">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <p> Delete a survey will also delete all responses collected so far. </p>         <p> Are you sure you want to delete this survey? </p>     </div> </modal>  <modal *ngIf="editMode == EditMode.CloseSurvey"        title="End Survey"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="onDismissModal"        [onClose]="onDismissModal"        closeButtonText="Cancel"        submitButtonText="End Survey"        (modalSubmitted)="onCloseSurvey(curSurveyMetadata)">        [metricIdentifier]="context.identifier"     <div class="modal-body">         <p> Are you sure you want to end this survey? </p>     </div> </modal>',styles:["table.table{margin-bottom:30px}.status-filter{cursor:pointer}.survey-status-filter{position:absolute;background-color:#f9f9f9;min-width:160px;overflow:auto;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);z-index:1}.survey-statuses{padding-left:10px;padding-top:10px}.survey-status{display:block}.survey-status-filter hr{margin-bottom:10px}.survey-status-filter-buttons{display:block}.survey-status-filter-buttons{text-align:center;margin-bottom:10px}.active-survey-icon{color:green}.scheduled-survey-icon{color:orangered}"]}),o("design:paramtypes",[j.FormBuilder,d.Http,e.AwsService,h.ToastsManager,c.ViewContainerRef,i.LyMetricService])],a)}(),a("InGameSurveySurveyListPageComponent",m)}}}),a.register("19",["7","1a","1b","6"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(){}return a=h([c.NgModule({imports:[e.GameSharedModule,d.GemModule],declarations:[f.InGameSurveyIndexComponent,f.InGameSurveyThumbnailComponent,f.InGameSurveyEditSurveyComponent,f.InGameSurveyAnswerAggregationComponent,f.InGameSurveyAnswerSubmissionComponent,f.InGameSurveySurveyDetailsPageComponent,f.InGameSurveySurveyListPageComponent,f.InGameSurveyTextAnswerSubmissionComponent],providers:[],bootstrap:[f.InGameSurveyThumbnailComponent,f.InGameSurveyIndexComponent]})],a)}(),a("CloudGemInGameSurveyModule",g)}}}),a.register("6",["3","5","c","d","e","f","2","14","16","17","18","19"],function(a,b){"use strict";function c(b){var c={};for(var d in b)"default"!==d&&(c[d]=b[d]);a(c)}b&&b.id;return{setters:[function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)}],execute:function(){}}}),a.register("1",["6"],function(a,b){"use strict";function c(a){return d.CloudGemInGameSurveyModule}b&&b.id;a("definition",c);var d;return{setters:[function(a){d=a}],execute:function(){}}})})(function(a){if("function"==typeof define&&define.amd)define(["app/shared/class/index.js","app/view/game/module/cloudgems/class/index.js","@angular/core","@angular/http","app/aws/aws.service.js","app/shared/service/index.js","app/shared/component/index.js","ng2-toastr","app/view/game/module/shared/class/index.js","@angular/forms","rxjs/rx.js","app/view/game/module/cloudgems/gem.module.js","app/view/game/module/shared/shared.module.js"],a);else{if("object"!=typeof module||!module.exports||"function"!=typeof require)throw new Error("Module must be loaded as AMD or CommonJS");module.exports=a(require("app/shared/class/index.js"),require("app/view/game/module/cloudgems/class/index.js"),require("@angular/core"),require("@angular/http"),require("app/aws/aws.service.js"),require("app/shared/service/index.js"),require("app/shared/component/index.js"),require("ng2-toastr"),require("app/view/game/module/shared/class/index.js"),require("@angular/forms"),require("rxjs/rx.js"),require("app/view/game/module/cloudgems/gem.module.js"),require("app/view/game/module/shared/shared.module.js"))}});