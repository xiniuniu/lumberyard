/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// THIS CODE IS AUTOGENERATED, DO NOT MODIFY
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
#pragma once
#include <AzCore/Component/Component.h>
#include <AzCore/Component/Entity.h>
#include <AzCore/Component/ComponentBus.h>
#include <AzCore/EBus/EBus.h>
#include <AzCore/Memory/SystemAllocator.h>
#include <AzCore/RTTI/BehaviorContext.h>
#include <AzCore/Serialization/EditContext.h>
#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/std/smart_ptr/make_shared.h>
#include <AzCore/std/smart_ptr/shared_ptr.h>
#include <AzCore/std/string/conversions.h>

#if defined (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)
// The AWS Native SDK AWSAllocator triggers a warning due to accessing members of std::allocator directly.
// AWSAllocator.h(70): warning C4996: 'std::allocator<T>::pointer': warning STL4010: Various members of std::allocator are deprecated in C++17.
// Use std::allocator_traits instead of accessing these members directly.
// You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.

AZ_PUSH_DISABLE_WARNING(4251 4996, "-Wunknown-warning-option")
#include <aws/core/http/HttpRequest.h>
#include <aws/core/http/HttpResponse.h>
AZ_POP_DISABLE_WARNING
#endif // (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)

#include <CloudGemFramework/ServiceRequestJob.h>

#include "CloudGemInGameSurvey_precompiled.h"

namespace CloudGemInGameSurvey {
namespace ServiceAPI {
    
    extern const char* LmbrAWS_CodeGen_AnswerSubmission_UUID;
    
    extern const char* LmbrAWS_CodeGen_AnswerList_UUID;
    
    extern const char* LmbrAWS_CodeGen_Component_UUID;
    
    extern const char* LmbrAWS_CodeGen_SurveyMetadataList_UUID;
    
    extern const char* LmbrAWS_CodeGen_ResponseHandler_UUID;
    
    extern const char* LmbrAWS_CodeGen_NotificationBus1_UUID;
    
    extern const char* LmbrAWS_CodeGen_RequestBus1_UUID;
    
    extern const char* LmbrAWS_CodeGen_GetPlayerSubmissionIdsResponse_UUID;
    
    extern const char* LmbrAWS_CodeGen_Question_UUID;
    
    extern const char* LmbrAWS_CodeGen_Survey_UUID;
    
    extern const char* LmbrAWS_CodeGen_SubmitAnswersResponse_UUID;
    
    extern const char* LmbrAWS_CodeGen_Answer_UUID;
    
    extern const char* LmbrAWS_CodeGen_ServiceStatus_UUID;
    
    extern const char* LmbrAWS_CodeGen_SurveyMetadata_UUID;
    

    // redefs
    

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const int& item);

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AZStd::string& item);

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const double& item);

    
    
    struct ServiceStatus
    {

        AZ_TYPE_INFO(ServiceStatus, LmbrAWS_CodeGen_ServiceStatus_UUID)
        AZ_CLASS_ALLOCATOR(ServiceStatus, AZ::SystemAllocator, 0)

        
        AZStd::string status;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ServiceStatus& item);
    
    
    
    using StringList = AZStd::vector<AZStd::string>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const StringList& list);
    
    
    
    struct Answer
    {

        AZ_TYPE_INFO(Answer, LmbrAWS_CodeGen_Answer_UUID)
        AZ_CLASS_ALLOCATOR(Answer, AZ::SystemAllocator, 0)

        
        StringList answer;
        
        AZStd::string question_id;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const Answer& item);
    
    
    
    using AnswerListPropertyAnswers = AZStd::vector<Answer>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerListPropertyAnswers& list);
    
    
    
    struct AnswerList
    {

        AZ_TYPE_INFO(AnswerList, LmbrAWS_CodeGen_AnswerList_UUID)
        AZ_CLASS_ALLOCATOR(AnswerList, AZ::SystemAllocator, 0)

        
        AnswerListPropertyAnswers answers;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerList& item);
    
    
    
    using AnswerSubmissionPropertyAnswers = AZStd::vector<AnswerList>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerSubmissionPropertyAnswers& list);
    
    
    
    struct AnswerSubmission
    {

        AZ_TYPE_INFO(AnswerSubmission, LmbrAWS_CodeGen_AnswerSubmission_UUID)
        AZ_CLASS_ALLOCATOR(AnswerSubmission, AZ::SystemAllocator, 0)

        
        AZStd::string submission_id;
        
        double creation_time;
        
        AnswerSubmissionPropertyAnswers answers;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerSubmission& item);
    
    
    
    struct SubmitAnswersResponse
    {

        AZ_TYPE_INFO(SubmitAnswersResponse, LmbrAWS_CodeGen_SubmitAnswersResponse_UUID)
        AZ_CLASS_ALLOCATOR(SubmitAnswersResponse, AZ::SystemAllocator, 0)

        
        AZStd::string submission_id;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SubmitAnswersResponse& item);
    
    
    
    struct SurveyMetadata
    {

        AZ_TYPE_INFO(SurveyMetadata, LmbrAWS_CodeGen_SurveyMetadata_UUID)
        AZ_CLASS_ALLOCATOR(SurveyMetadata, AZ::SystemAllocator, 0)

        
        AZStd::string survey_name;
        
        int creation_time;
        
        int activation_start_time;
        
        int activation_end_time;
        
        int num_questions;
        
        AZStd::string survey_id;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyMetadata& item);
    
    
    
    using SurveyMetadataListPropertyMetadata_list = AZStd::vector<SurveyMetadata>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyMetadataListPropertyMetadata_list& list);
    
    
    
    struct SurveyMetadataList
    {

        AZ_TYPE_INFO(SurveyMetadataList, LmbrAWS_CodeGen_SurveyMetadataList_UUID)
        AZ_CLASS_ALLOCATOR(SurveyMetadataList, AZ::SystemAllocator, 0)

        
        SurveyMetadataListPropertyMetadata_list metadata_list;
        
        AZStd::string pagination_token;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyMetadataList& item);
    
    
    
    struct GetPlayerSubmissionIdsResponse
    {

        AZ_TYPE_INFO(GetPlayerSubmissionIdsResponse, LmbrAWS_CodeGen_GetPlayerSubmissionIdsResponse_UUID)
        AZ_CLASS_ALLOCATOR(GetPlayerSubmissionIdsResponse, AZ::SystemAllocator, 0)

        
        StringList submission_id_list;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const GetPlayerSubmissionIdsResponse& item);
    
    
    
    struct Question
    {

        AZ_TYPE_INFO(Question, LmbrAWS_CodeGen_Question_UUID)
        AZ_CLASS_ALLOCATOR(Question, AZ::SystemAllocator, 0)

        
        AZStd::string max_label;
        
        AZStd::string min_label;
        
        AZStd::string title;
        
        int max;
        
        int min;
        
        bool multiple_select;
        
        StringList style;
        
        int max_chars;
        
        StringList predefines;
        
        AZStd::string type;
        
        AZStd::string question_id;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const Question& item);
    
    
    
    using SurveyPropertyQuestions = AZStd::vector<Question>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyPropertyQuestions& list);
    
    
    
    struct Survey
    {

        AZ_TYPE_INFO(Survey, LmbrAWS_CodeGen_Survey_UUID)
        AZ_CLASS_ALLOCATOR(Survey, AZ::SystemAllocator, 0)

        
        AZStd::string survey_name;
        
        AZStd::string survey_id;
        
        SurveyPropertyQuestions questions;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const Survey& item);
    
    


    // Service RequestJobs
    CLOUD_GEM_SERVICE(CloudGemInGameSurvey);


    
    class get_service_statusRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemInGameSurvey, HttpMethod::HTTP_GET, "/service/status");

        struct Parameters
        {
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request);

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const;
        };

        
        ServiceStatus result;
        

        Parameters parameters;
    };


    using get_service_statusRequestJob = CloudGemFramework::ServiceRequestJob<get_service_statusRequest>;
    
    class GetActiveSurveysPlayer_submissionRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemInGameSurvey, HttpMethod::HTTP_GET, "/active/surveys/{survey_id}/player_submission/{submission_id}");

        struct Parameters
        {
            
            AZStd::string survey_id;
            
            AZStd::string submission_id;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request);

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const;
        };

        
        AnswerSubmission result;
        

        Parameters parameters;
    };


    using GetActiveSurveysPlayer_submissionRequestJob = CloudGemFramework::ServiceRequestJob<GetActiveSurveysPlayer_submissionRequest>;
    
    class PostActiveSurveysAnswersRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemInGameSurvey, HttpMethod::HTTP_POST, "/active/surveys/{survey_id}/answers");

        struct Parameters
        {
            
            AZStd::string survey_id;
            
            AnswerList answer_list;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request);

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const;
        };

        
        SubmitAnswersResponse result;
        

        Parameters parameters;
    };


    using PostActiveSurveysAnswersRequestJob = CloudGemFramework::ServiceRequestJob<PostActiveSurveysAnswersRequest>;
    
    class GetActiveSurvey_metadataRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemInGameSurvey, HttpMethod::HTTP_GET, "/active/survey_metadata");

        struct Parameters
        {
            
            int limit;
            
            AZStd::string pagination_token;
            
            AZStd::string sort;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request);

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const;
        };

        
        SurveyMetadataList result;
        

        Parameters parameters;
    };


    using GetActiveSurvey_metadataRequestJob = CloudGemFramework::ServiceRequestJob<GetActiveSurvey_metadataRequest>;
    
    class PutActiveSurveysAnswersRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemInGameSurvey, HttpMethod::HTTP_PUT, "/active/surveys/{survey_id}/answers/{submission_id}");

        struct Parameters
        {
            
            AZStd::string survey_id;
            
            AZStd::string submission_id;
            
            AnswerList answer_list;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request);

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const;
        };

        
        SubmitAnswersResponse result;
        

        Parameters parameters;
    };


    using PutActiveSurveysAnswersRequestJob = CloudGemFramework::ServiceRequestJob<PutActiveSurveysAnswersRequest>;
    
    class GetActiveSurveysPlayer_submissionsRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemInGameSurvey, HttpMethod::HTTP_GET, "/active/surveys/{survey_id}/player_submissions");

        struct Parameters
        {
            
            AZStd::string survey_id;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request);

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const;
        };

        
        GetPlayerSubmissionIdsResponse result;
        

        Parameters parameters;
    };


    using GetActiveSurveysPlayer_submissionsRequestJob = CloudGemFramework::ServiceRequestJob<GetActiveSurveysPlayer_submissionsRequest>;
    
    class GetActiveSurveysRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemInGameSurvey, HttpMethod::HTTP_GET, "/active/surveys/{survey_id}");

        struct Parameters
        {
            
            AZStd::string survey_id;
            
            int question_index;
            
            int question_count;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request);

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const;
        };

        
        Survey result;
        

        Parameters parameters;
    };


    using GetActiveSurveysRequestJob = CloudGemFramework::ServiceRequestJob<GetActiveSurveysRequest>;
    


    // Notification bus for this component
    class CloudGemInGameSurveyNotifications
        : public AZ::ComponentBus
    {
    public:
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void Onget_service_statusRequestSuccess(const ServiceStatus response);
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void Onget_service_statusRequestError(const CloudGemFramework::Error error);
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetActiveSurveysPlayer_submissionRequestSuccess(const AnswerSubmission response);
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetActiveSurveysPlayer_submissionRequestError(const CloudGemFramework::Error error);
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPostActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response);
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostActiveSurveysAnswersRequestError(const CloudGemFramework::Error error);
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetActiveSurvey_metadataRequestSuccess(const SurveyMetadataList response);
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetActiveSurvey_metadataRequestError(const CloudGemFramework::Error error);
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPutActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response);
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPutActiveSurveysAnswersRequestError(const CloudGemFramework::Error error);
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetActiveSurveysPlayer_submissionsRequestSuccess(const GetPlayerSubmissionIdsResponse response);
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetActiveSurveysPlayer_submissionsRequestError(const CloudGemFramework::Error error);
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetActiveSurveysRequestSuccess(const Survey response);
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetActiveSurveysRequestError(const CloudGemFramework::Error error);
        
    };

    using CloudGemInGameSurveyNotificationBus = AZ::EBus<CloudGemInGameSurveyNotifications>;

    class BehaviorCloudGemInGameSurveyNotificationBusHandler
        : public CloudGemInGameSurveyNotificationBus::Handler, public AZ::BehaviorEBusHandler
    {
    public:
        AZ_EBUS_BEHAVIOR_BINDER(BehaviorCloudGemInGameSurveyNotificationBusHandler, LmbrAWS_CodeGen_NotificationBus1_UUID, AZ::SystemAllocator
        
        , Onget_service_statusRequestSuccess
        , Onget_service_statusRequestError
        
        , OnGetActiveSurveysPlayer_submissionRequestSuccess
        , OnGetActiveSurveysPlayer_submissionRequestError
        
        , OnPostActiveSurveysAnswersRequestSuccess
        , OnPostActiveSurveysAnswersRequestError
        
        , OnGetActiveSurvey_metadataRequestSuccess
        , OnGetActiveSurvey_metadataRequestError
        
        , OnPutActiveSurveysAnswersRequestSuccess
        , OnPutActiveSurveysAnswersRequestError
        
        , OnGetActiveSurveysPlayer_submissionsRequestSuccess
        , OnGetActiveSurveysPlayer_submissionsRequestError
        
        , OnGetActiveSurveysRequestSuccess
        , OnGetActiveSurveysRequestError
        
        );
        
        
        void Onget_service_statusRequestSuccess(const ServiceStatus response) override;
        
        void Onget_service_statusRequestError(const CloudGemFramework::Error error) override;
        
        
        void OnGetActiveSurveysPlayer_submissionRequestSuccess(const AnswerSubmission response) override;
        
        void OnGetActiveSurveysPlayer_submissionRequestError(const CloudGemFramework::Error error) override;
        
        
        void OnPostActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response) override;
        
        void OnPostActiveSurveysAnswersRequestError(const CloudGemFramework::Error error) override;
        
        
        void OnGetActiveSurvey_metadataRequestSuccess(const SurveyMetadataList response) override;
        
        void OnGetActiveSurvey_metadataRequestError(const CloudGemFramework::Error error) override;
        
        
        void OnPutActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response) override;
        
        void OnPutActiveSurveysAnswersRequestError(const CloudGemFramework::Error error) override;
        
        
        void OnGetActiveSurveysPlayer_submissionsRequestSuccess(const GetPlayerSubmissionIdsResponse response) override;
        
        void OnGetActiveSurveysPlayer_submissionsRequestError(const CloudGemFramework::Error error) override;
        
        
        void OnGetActiveSurveysRequestSuccess(const Survey response) override;
        
        void OnGetActiveSurveysRequestError(const CloudGemFramework::Error error) override;
        
    };
    class CloudGemInGameSurveyResponseHandler;

    // Request bus for this component
    class CloudGemInGameSurveyRequests
        : public AZ::ComponentBus
    {
    public:
        virtual ~CloudGemInGameSurveyRequests() {}
        
        
        virtual void get_service_status(CloudGemInGameSurveyResponseHandler* responseHandler);
        
        
        
        virtual void GetActiveSurveysPlayer_submission(const AZStd::string& survey_id, const AZStd::string& submission_id, CloudGemInGameSurveyResponseHandler* responseHandler);
        
        
        
        virtual void PostActiveSurveysAnswers(const AZStd::string& survey_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler);
        
        
        
        virtual void GetActiveSurvey_metadata(const int& limit, const AZStd::string& pagination_token, const AZStd::string& sort, CloudGemInGameSurveyResponseHandler* responseHandler);
        
        
        
        virtual void PutActiveSurveysAnswers(const AZStd::string& survey_id, const AZStd::string& submission_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler);
        
        
        
        virtual void GetActiveSurveysPlayer_submissions(const AZStd::string& survey_id, CloudGemInGameSurveyResponseHandler* responseHandler);
        
        
        
        virtual void GetActiveSurveys(const AZStd::string& survey_id, const int& question_index, const int& question_count, CloudGemInGameSurveyResponseHandler* responseHandler);
        
        
    };

    using CloudGemInGameSurveyRequestBus = AZ::EBus<CloudGemInGameSurveyRequests>;

    // This class is used as a parameter for all requests and throws the response on the CloudGemInGameSurveyNotificationBus
    // Inherit from this to define custom behavior.
    class CloudGemInGameSurveyResponseHandler
    {
    public:
        AZ_TYPE_INFO(CloudGemInGameSurveyResponseHandler, LmbrAWS_CodeGen_ResponseHandler_UUID)
        AZ_CLASS_ALLOCATOR(CloudGemInGameSurveyResponseHandler, AZ::SystemAllocator, 0)

        virtual ~CloudGemInGameSurveyResponseHandler() {}
        
        virtual void Handleget_service_statusSuccess(get_service_statusRequestJob* job, AZ::EntityId entityId);
        virtual void Handleget_service_statusError(get_service_statusRequestJob* job, AZ::EntityId entityId);
        
        virtual void HandleGetActiveSurveysPlayer_submissionSuccess(GetActiveSurveysPlayer_submissionRequestJob* job, AZ::EntityId entityId);
        virtual void HandleGetActiveSurveysPlayer_submissionError(GetActiveSurveysPlayer_submissionRequestJob* job, AZ::EntityId entityId);
        
        virtual void HandlePostActiveSurveysAnswersSuccess(PostActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId);
        virtual void HandlePostActiveSurveysAnswersError(PostActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId);
        
        virtual void HandleGetActiveSurvey_metadataSuccess(GetActiveSurvey_metadataRequestJob* job, AZ::EntityId entityId);
        virtual void HandleGetActiveSurvey_metadataError(GetActiveSurvey_metadataRequestJob* job, AZ::EntityId entityId);
        
        virtual void HandlePutActiveSurveysAnswersSuccess(PutActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId);
        virtual void HandlePutActiveSurveysAnswersError(PutActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId);
        
        virtual void HandleGetActiveSurveysPlayer_submissionsSuccess(GetActiveSurveysPlayer_submissionsRequestJob* job, AZ::EntityId entityId);
        virtual void HandleGetActiveSurveysPlayer_submissionsError(GetActiveSurveysPlayer_submissionsRequestJob* job, AZ::EntityId entityId);
        
        virtual void HandleGetActiveSurveysSuccess(GetActiveSurveysRequestJob* job, AZ::EntityId entityId);
        virtual void HandleGetActiveSurveysError(GetActiveSurveysRequestJob* job, AZ::EntityId entityId);
        
    };

    class CloudGemInGameSurveyClientComponent
        : public AZ::Component
        , public CloudGemInGameSurveyRequestBus::Handler
    {
    public:
        AZ_COMPONENT(CloudGemInGameSurveyClientComponent, LmbrAWS_CodeGen_Component_UUID);
        virtual ~CloudGemInGameSurveyClientComponent() = default;

        AZStd::shared_ptr<CloudGemInGameSurveyResponseHandler> m_defaultResponseHandler;

        void Init() override;

        void Activate() override;

        void Deactivate() override;

        static void Reflect(AZ::ReflectContext* reflection)
        {
            
            
            ServiceStatus::Reflect(reflection);
            
            
            
            
            
            Answer::Reflect(reflection);
            
            
            
            
            
            AnswerList::Reflect(reflection);
            
            
            
            
            
            AnswerSubmission::Reflect(reflection);
            
            
            
            SubmitAnswersResponse::Reflect(reflection);
            
            
            
            SurveyMetadata::Reflect(reflection);
            
            
            
            
            
            SurveyMetadataList::Reflect(reflection);
            
            
            
            GetPlayerSubmissionIdsResponse::Reflect(reflection);
            
            
            
            Question::Reflect(reflection);
            
            
            
            
            
            Survey::Reflect(reflection);
            
            

            AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);
            if (serializeContext)
            {
                // we must include any fields we want to expose to the editor or lua in the serialize context
                serializeContext->Class<CloudGemInGameSurveyClientComponent, AZ::Component>()
                    ->Version(1);

                AZ::EditContext* editContext = serializeContext->GetEditContext();
                if (editContext)
                {
                    editContext->Class<CloudGemInGameSurveyClientComponent>("CloudGemInGameSurveyClientComponent", "CloudGemInGameSurvey Component")
                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
                            ->Attribute(AZ::Edit::Attributes::Category, "Cloud Canvas Gems")
                            ->Attribute(AZ::Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("Game"));
                }
            }

            AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
            if (behaviorContext)
            {
                behaviorContext->EBus<CloudGemInGameSurveyRequestBus>("CloudGemInGameSurveyRequestBus")
                    // one of these for each function
                    
                    ->Event("get_service_status", &CloudGemInGameSurveyRequestBus::Events::get_service_status)
                    
                    ->Event("GetActiveSurveysPlayer_submission", &CloudGemInGameSurveyRequestBus::Events::GetActiveSurveysPlayer_submission)
                    
                    ->Event("PostActiveSurveysAnswers", &CloudGemInGameSurveyRequestBus::Events::PostActiveSurveysAnswers)
                    
                    ->Event("GetActiveSurvey_metadata", &CloudGemInGameSurveyRequestBus::Events::GetActiveSurvey_metadata)
                    
                    ->Event("PutActiveSurveysAnswers", &CloudGemInGameSurveyRequestBus::Events::PutActiveSurveysAnswers)
                    
                    ->Event("GetActiveSurveysPlayer_submissions", &CloudGemInGameSurveyRequestBus::Events::GetActiveSurveysPlayer_submissions)
                    
                    ->Event("GetActiveSurveys", &CloudGemInGameSurveyRequestBus::Events::GetActiveSurveys)
                    
                    ;
                behaviorContext->EBus<CloudGemInGameSurveyNotificationBus>("CloudGemInGameSurveyNotificationBus")
                    ->Handler<BehaviorCloudGemInGameSurveyNotificationBusHandler>()
                ;
            }
        }

        // Functions from the swagger definitions
        
        
        void get_service_status(CloudGemInGameSurveyResponseHandler* responseHandler) override;
        
        
        
        void GetActiveSurveysPlayer_submission(const AZStd::string& survey_id, const AZStd::string& submission_id, CloudGemInGameSurveyResponseHandler* responseHandler) override;
        
        
        
        void PostActiveSurveysAnswers(const AZStd::string& survey_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler) override;
        
        
        
        void GetActiveSurvey_metadata(const int& limit, const AZStd::string& pagination_token, const AZStd::string& sort, CloudGemInGameSurveyResponseHandler* responseHandler) override;
        
        
        
        void PutActiveSurveysAnswers(const AZStd::string& survey_id, const AZStd::string& submission_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler) override;
        
        
        
        void GetActiveSurveysPlayer_submissions(const AZStd::string& survey_id, CloudGemInGameSurveyResponseHandler* responseHandler) override;
        
        
        
        void GetActiveSurveys(const AZStd::string& survey_id, const int& question_index, const int& question_count, CloudGemInGameSurveyResponseHandler* responseHandler) override;
        
        
    };
} // ServiceAPI
} // CloudGemInGameSurvey