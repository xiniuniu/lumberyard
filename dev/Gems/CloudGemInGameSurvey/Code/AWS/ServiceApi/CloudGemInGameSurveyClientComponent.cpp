/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// THIS CODE IS AUTOGENERATED, DO NOT MODIFY
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

#include "CloudGemInGameSurvey_precompiled.h"


#include "AWS/ServiceApi/CloudGemInGameSurveyClientComponent.h"

namespace CloudGemInGameSurvey {
namespace ServiceAPI {

    
    const char* LmbrAWS_CodeGen_AnswerSubmission_UUID= "{aa510110-4e91-4813-834d-e8e20d21c850}";
    
    const char* LmbrAWS_CodeGen_AnswerList_UUID= "{1507f707-7985-4e3d-a646-4a2c7d899fb7}";
    
    const char* LmbrAWS_CodeGen_Component_UUID= "{d23c7e1f-96fa-484d-9f10-c2f488eb9db6}";
    
    const char* LmbrAWS_CodeGen_SurveyMetadataList_UUID= "{47afe2fd-98b8-4bf9-865e-3354ab507846}";
    
    const char* LmbrAWS_CodeGen_ResponseHandler_UUID= "{81ccc788-e67e-471b-b06a-c0158f28e0ff}";
    
    const char* LmbrAWS_CodeGen_NotificationBus1_UUID= "{61b0f9c4-9182-4feb-a50d-a485e354d47b}";
    
    const char* LmbrAWS_CodeGen_RequestBus1_UUID= "{02707c36-59b8-41b3-b457-2df564617114}";
    
    const char* LmbrAWS_CodeGen_GetPlayerSubmissionIdsResponse_UUID= "{70ebfa96-d954-4fc0-8044-754f0ceb7bf9}";
    
    const char* LmbrAWS_CodeGen_Question_UUID= "{5ad0f7b9-b9d1-459d-b5be-07742b9bba1f}";
    
    const char* LmbrAWS_CodeGen_Survey_UUID= "{fdac8fcc-60aa-4758-983e-4cf1cedec019}";
    
    const char* LmbrAWS_CodeGen_SubmitAnswersResponse_UUID= "{a8506794-fbff-4b9c-8c23-43c6f406d21e}";
    
    const char* LmbrAWS_CodeGen_Answer_UUID= "{afaa4c95-c023-4ec4-b38f-d0229d141992}";
    
    const char* LmbrAWS_CodeGen_ServiceStatus_UUID= "{5f37b6ba-aeed-4b3a-b3f3-ae0f07c7e761}";
    
    const char* LmbrAWS_CodeGen_SurveyMetadata_UUID= "{fd2bee5b-4ada-472b-867d-4affc9806dc5}";
    

    void Configure()
    {
        // Insert any necessary CloudGemFramework configuration here
    }

    // redefs
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const int& item)
    {
        return writer.Int(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AZStd::string& item)
    {
        return writer.String(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const double& item)
    {
        return writer.Double(item);
    }

    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ServiceStatus& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("status");
            ok = ok && WriteJson(writer, item.status);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const StringList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const Answer& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("answer");
            ok = ok && WriteJson(writer, item.answer);
            
            ok = ok && writer.Key("question_id");
            ok = ok && WriteJson(writer, item.question_id);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerListPropertyAnswers& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerList& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("answers");
            ok = ok && WriteJson(writer, item.answers);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerSubmissionPropertyAnswers& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AnswerSubmission& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("submission_id");
            ok = ok && WriteJson(writer, item.submission_id);
            
            ok = ok && writer.Key("creation_time");
            ok = ok && WriteJson(writer, item.creation_time);
            
            ok = ok && writer.Key("answers");
            ok = ok && WriteJson(writer, item.answers);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SubmitAnswersResponse& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("submission_id");
            ok = ok && WriteJson(writer, item.submission_id);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyMetadata& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("survey_name");
            ok = ok && WriteJson(writer, item.survey_name);
            
            ok = ok && writer.Key("creation_time");
            ok = ok && WriteJson(writer, item.creation_time);
            
            ok = ok && writer.Key("activation_start_time");
            ok = ok && WriteJson(writer, item.activation_start_time);
            
            ok = ok && writer.Key("activation_end_time");
            ok = ok && WriteJson(writer, item.activation_end_time);
            
            ok = ok && writer.Key("num_questions");
            ok = ok && WriteJson(writer, item.num_questions);
            
            ok = ok && writer.Key("survey_id");
            ok = ok && WriteJson(writer, item.survey_id);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyMetadataListPropertyMetadata_list& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyMetadataList& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("metadata_list");
            ok = ok && WriteJson(writer, item.metadata_list);
            
            ok = ok && writer.Key("pagination_token");
            ok = ok && WriteJson(writer, item.pagination_token);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const GetPlayerSubmissionIdsResponse& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("submission_id_list");
            ok = ok && WriteJson(writer, item.submission_id_list);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const Question& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("max_label");
            ok = ok && WriteJson(writer, item.max_label);
            
            ok = ok && writer.Key("min_label");
            ok = ok && WriteJson(writer, item.min_label);
            
            ok = ok && writer.Key("title");
            ok = ok && WriteJson(writer, item.title);
            
            ok = ok && writer.Key("max");
            ok = ok && WriteJson(writer, item.max);
            
            ok = ok && writer.Key("min");
            ok = ok && WriteJson(writer, item.min);
            
            ok = ok && writer.Key("multiple_select");
            ok = ok && WriteJson(writer, item.multiple_select);
            
            ok = ok && writer.Key("style");
            ok = ok && WriteJson(writer, item.style);
            
            ok = ok && writer.Key("max_chars");
            ok = ok && WriteJson(writer, item.max_chars);
            
            ok = ok && writer.Key("predefines");
            ok = ok && WriteJson(writer, item.predefines);
            
            ok = ok && writer.Key("type");
            ok = ok && WriteJson(writer, item.type);
            
            ok = ok && writer.Key("question_id");
            ok = ok && WriteJson(writer, item.question_id);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SurveyPropertyQuestions& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const Survey& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("survey_name");
            ok = ok && WriteJson(writer, item.survey_name);
            
            ok = ok && writer.Key("survey_id");
            ok = ok && WriteJson(writer, item.survey_id);
            
            ok = ok && writer.Key("questions");
            ok = ok && WriteJson(writer, item.questions);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    

    // Generated Function Parameters
    
    bool get_service_statusRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool get_service_statusRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool GetActiveSurveysPlayer_submissionRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""survey_id""}", survey_id);
                
                ok = ok && request.SetPathParameter("{""submission_id""}", submission_id);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetActiveSurveysPlayer_submissionRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool PostActiveSurveysAnswersRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""survey_id""}", survey_id);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PostActiveSurveysAnswersRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemInGameSurvey::ServiceAPI::WriteJson(writer, answer_list);
        
        return ok;
    }
    
    bool GetActiveSurvey_metadataRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.AddQueryParameter("limit", limit);
                
                ok = ok && request.AddQueryParameter("pagination_token", pagination_token);
                
                ok = ok && request.AddQueryParameter("sort", sort);
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetActiveSurvey_metadataRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool PutActiveSurveysAnswersRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""survey_id""}", survey_id);
                
                ok = ok && request.SetPathParameter("{""submission_id""}", submission_id);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PutActiveSurveysAnswersRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemInGameSurvey::ServiceAPI::WriteJson(writer, answer_list);
        
        return ok;
    }
    
    bool GetActiveSurveysPlayer_submissionsRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""survey_id""}", survey_id);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetActiveSurveysPlayer_submissionsRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool GetActiveSurveysRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""survey_id""}", survey_id);
                
                
                ok = ok && request.AddQueryParameter("question_index", question_index);
                
                ok = ok && request.AddQueryParameter("question_count", question_count);
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetActiveSurveysRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    




    // CloudGemInGameSurveyNotificationBus
    
    
    void CloudGemInGameSurveyNotifications::Onget_service_statusRequestSuccess(const ServiceStatus response) { }
    
    void CloudGemInGameSurveyNotifications::Onget_service_statusRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurveysPlayer_submissionRequestSuccess(const AnswerSubmission response) { }
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurveysPlayer_submissionRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemInGameSurveyNotifications::OnPostActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response) { }
    
    void CloudGemInGameSurveyNotifications::OnPostActiveSurveysAnswersRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurvey_metadataRequestSuccess(const SurveyMetadataList response) { }
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurvey_metadataRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemInGameSurveyNotifications::OnPutActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response) { }
    
    void CloudGemInGameSurveyNotifications::OnPutActiveSurveysAnswersRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurveysPlayer_submissionsRequestSuccess(const GetPlayerSubmissionIdsResponse response) { }
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurveysPlayer_submissionsRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurveysRequestSuccess(const Survey response) { }
    
    void CloudGemInGameSurveyNotifications::OnGetActiveSurveysRequestError(const CloudGemFramework::Error error) { }
    


    // BehaviorContext CloudGemInGameSurveyNotificationBus handler implementation
    
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::Onget_service_statusRequestSuccess(const ServiceStatus response)
    {
        Call(FN_Onget_service_statusRequestSuccess, response);
    }
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::Onget_service_statusRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_Onget_service_statusRequestError, error);
    }
    
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurveysPlayer_submissionRequestSuccess(const AnswerSubmission response)
    {
        Call(FN_OnGetActiveSurveysPlayer_submissionRequestSuccess, response);
    }
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurveysPlayer_submissionRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetActiveSurveysPlayer_submissionRequestError, error);
    }
    
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnPostActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response)
    {
        Call(FN_OnPostActiveSurveysAnswersRequestSuccess, response);
    }
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnPostActiveSurveysAnswersRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPostActiveSurveysAnswersRequestError, error);
    }
    
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurvey_metadataRequestSuccess(const SurveyMetadataList response)
    {
        Call(FN_OnGetActiveSurvey_metadataRequestSuccess, response);
    }
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurvey_metadataRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetActiveSurvey_metadataRequestError, error);
    }
    
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnPutActiveSurveysAnswersRequestSuccess(const SubmitAnswersResponse response)
    {
        Call(FN_OnPutActiveSurveysAnswersRequestSuccess, response);
    }
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnPutActiveSurveysAnswersRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPutActiveSurveysAnswersRequestError, error);
    }
    
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurveysPlayer_submissionsRequestSuccess(const GetPlayerSubmissionIdsResponse response)
    {
        Call(FN_OnGetActiveSurveysPlayer_submissionsRequestSuccess, response);
    }
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurveysPlayer_submissionsRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetActiveSurveysPlayer_submissionsRequestError, error);
    }
    
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurveysRequestSuccess(const Survey response)
    {
        Call(FN_OnGetActiveSurveysRequestSuccess, response);
    }
    
    void BehaviorCloudGemInGameSurveyNotificationBusHandler::OnGetActiveSurveysRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetActiveSurveysRequestError, error);
    }
    

    // CloudGemInGameSurveyRequestBus
    
    
    void CloudGemInGameSurveyRequests::get_service_status(CloudGemInGameSurveyResponseHandler* responseHandler) { }
    
    
    
    void CloudGemInGameSurveyRequests::GetActiveSurveysPlayer_submission(const AZStd::string& survey_id, const AZStd::string& submission_id, CloudGemInGameSurveyResponseHandler* responseHandler) { }
    
    
    
    void CloudGemInGameSurveyRequests::PostActiveSurveysAnswers(const AZStd::string& survey_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler) { }
    
    
    
    void CloudGemInGameSurveyRequests::GetActiveSurvey_metadata(const int& limit, const AZStd::string& pagination_token, const AZStd::string& sort, CloudGemInGameSurveyResponseHandler* responseHandler) { }
    
    
    
    void CloudGemInGameSurveyRequests::PutActiveSurveysAnswers(const AZStd::string& survey_id, const AZStd::string& submission_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler) { }
    
    
    
    void CloudGemInGameSurveyRequests::GetActiveSurveysPlayer_submissions(const AZStd::string& survey_id, CloudGemInGameSurveyResponseHandler* responseHandler) { }
    
    
    
    void CloudGemInGameSurveyRequests::GetActiveSurveys(const AZStd::string& survey_id, const int& question_index, const int& question_count, CloudGemInGameSurveyResponseHandler* responseHandler) { }
    
    

    // CloudGemInGameSurveyResponseHandler
    
    void CloudGemInGameSurveyResponseHandler::Handleget_service_statusSuccess(get_service_statusRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, Onget_service_statusRequestSuccess, job->result);
        
    }

    void CloudGemInGameSurveyResponseHandler::Handleget_service_statusError(get_service_statusRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, Onget_service_statusRequestError, job->error);
    }
    
    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurveysPlayer_submissionSuccess(GetActiveSurveysPlayer_submissionRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurveysPlayer_submissionRequestSuccess, job->result);
        
    }

    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurveysPlayer_submissionError(GetActiveSurveysPlayer_submissionRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurveysPlayer_submissionRequestError, job->error);
    }
    
    void CloudGemInGameSurveyResponseHandler::HandlePostActiveSurveysAnswersSuccess(PostActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnPostActiveSurveysAnswersRequestSuccess, job->result);
        
    }

    void CloudGemInGameSurveyResponseHandler::HandlePostActiveSurveysAnswersError(PostActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnPostActiveSurveysAnswersRequestError, job->error);
    }
    
    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurvey_metadataSuccess(GetActiveSurvey_metadataRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurvey_metadataRequestSuccess, job->result);
        
    }

    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurvey_metadataError(GetActiveSurvey_metadataRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurvey_metadataRequestError, job->error);
    }
    
    void CloudGemInGameSurveyResponseHandler::HandlePutActiveSurveysAnswersSuccess(PutActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnPutActiveSurveysAnswersRequestSuccess, job->result);
        
    }

    void CloudGemInGameSurveyResponseHandler::HandlePutActiveSurveysAnswersError(PutActiveSurveysAnswersRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnPutActiveSurveysAnswersRequestError, job->error);
    }
    
    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurveysPlayer_submissionsSuccess(GetActiveSurveysPlayer_submissionsRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurveysPlayer_submissionsRequestSuccess, job->result);
        
    }

    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurveysPlayer_submissionsError(GetActiveSurveysPlayer_submissionsRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurveysPlayer_submissionsRequestError, job->error);
    }
    
    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurveysSuccess(GetActiveSurveysRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurveysRequestSuccess, job->result);
        
    }

    void CloudGemInGameSurveyResponseHandler::HandleGetActiveSurveysError(GetActiveSurveysRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemInGameSurveyNotificationBus, OnGetActiveSurveysRequestError, job->error);
    }
    


    // CloudGemInGameSurveyClientComponent
    void CloudGemInGameSurveyClientComponent::Init()
    {
        m_defaultResponseHandler = AZStd::make_shared<CloudGemInGameSurveyResponseHandler>();
        CloudGemInGameSurvey::ServiceAPI::Configure();
    }

    void CloudGemInGameSurveyClientComponent::Activate()
    {
        CloudGemInGameSurveyRequestBus::Handler::BusConnect(m_entity->GetId());
    }

    void CloudGemInGameSurveyClientComponent::Deactivate()
    {
        CloudGemInGameSurveyRequestBus::Handler::BusDisconnect();
    }

    
    
    void CloudGemInGameSurveyClientComponent::get_service_status(CloudGemInGameSurveyResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemInGameSurveyResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        get_service_statusRequestJob* requestJob = get_service_statusRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](get_service_statusRequestJob* successJob)
            {
                // handle success
                CloudGemInGameSurveyResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->Handleget_service_statusSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](get_service_statusRequestJob* failedJob)
            {
                // handle error
                CloudGemInGameSurveyResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->Handleget_service_statusError(failedJob, entityId);
                }
            }
        );
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemInGameSurveyClientComponent::GetActiveSurveysPlayer_submission(const AZStd::string& survey_id, const AZStd::string& submission_id, CloudGemInGameSurveyResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemInGameSurveyResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetActiveSurveysPlayer_submissionRequestJob* requestJob = GetActiveSurveysPlayer_submissionRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurveysPlayer_submissionRequestJob* successJob)
            {
                // handle success
                CloudGemInGameSurveyResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetActiveSurveysPlayer_submissionSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurveysPlayer_submissionRequestJob* failedJob)
            {
                // handle error
                CloudGemInGameSurveyResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetActiveSurveysPlayer_submissionError(failedJob, entityId);
                }
            }
        );
        
        
        requestJob->parameters.survey_id = survey_id;
        
        requestJob->parameters.submission_id = submission_id;
        
        
        requestJob->Start();
    }
    
    
    void CloudGemInGameSurveyClientComponent::PostActiveSurveysAnswers(const AZStd::string& survey_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemInGameSurveyResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PostActiveSurveysAnswersRequestJob* requestJob = PostActiveSurveysAnswersRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PostActiveSurveysAnswersRequestJob* successJob)
            {
                // handle success
                CloudGemInGameSurveyResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePostActiveSurveysAnswersSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PostActiveSurveysAnswersRequestJob* failedJob)
            {
                // handle error
                CloudGemInGameSurveyResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePostActiveSurveysAnswersError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.answer_list = answer_list;
        
        
        requestJob->parameters.survey_id = survey_id;
        
        
        requestJob->Start();
    }
    
    
    void CloudGemInGameSurveyClientComponent::GetActiveSurvey_metadata(const int& limit, const AZStd::string& pagination_token, const AZStd::string& sort, CloudGemInGameSurveyResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemInGameSurveyResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetActiveSurvey_metadataRequestJob* requestJob = GetActiveSurvey_metadataRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurvey_metadataRequestJob* successJob)
            {
                // handle success
                CloudGemInGameSurveyResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetActiveSurvey_metadataSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurvey_metadataRequestJob* failedJob)
            {
                // handle error
                CloudGemInGameSurveyResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetActiveSurvey_metadataError(failedJob, entityId);
                }
            }
        );
        
        
        
        requestJob->parameters.limit = limit;
        
        requestJob->parameters.pagination_token = pagination_token;
        
        requestJob->parameters.sort = sort;
        
        requestJob->Start();
    }
    
    
    void CloudGemInGameSurveyClientComponent::PutActiveSurveysAnswers(const AZStd::string& survey_id, const AZStd::string& submission_id, const AnswerList& answer_list, CloudGemInGameSurveyResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemInGameSurveyResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PutActiveSurveysAnswersRequestJob* requestJob = PutActiveSurveysAnswersRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PutActiveSurveysAnswersRequestJob* successJob)
            {
                // handle success
                CloudGemInGameSurveyResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePutActiveSurveysAnswersSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PutActiveSurveysAnswersRequestJob* failedJob)
            {
                // handle error
                CloudGemInGameSurveyResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePutActiveSurveysAnswersError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.answer_list = answer_list;
        
        
        requestJob->parameters.survey_id = survey_id;
        
        requestJob->parameters.submission_id = submission_id;
        
        
        requestJob->Start();
    }
    
    
    void CloudGemInGameSurveyClientComponent::GetActiveSurveysPlayer_submissions(const AZStd::string& survey_id, CloudGemInGameSurveyResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemInGameSurveyResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetActiveSurveysPlayer_submissionsRequestJob* requestJob = GetActiveSurveysPlayer_submissionsRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurveysPlayer_submissionsRequestJob* successJob)
            {
                // handle success
                CloudGemInGameSurveyResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetActiveSurveysPlayer_submissionsSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurveysPlayer_submissionsRequestJob* failedJob)
            {
                // handle error
                CloudGemInGameSurveyResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetActiveSurveysPlayer_submissionsError(failedJob, entityId);
                }
            }
        );
        
        
        requestJob->parameters.survey_id = survey_id;
        
        
        requestJob->Start();
    }
    
    
    void CloudGemInGameSurveyClientComponent::GetActiveSurveys(const AZStd::string& survey_id, const int& question_index, const int& question_count, CloudGemInGameSurveyResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemInGameSurveyResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetActiveSurveysRequestJob* requestJob = GetActiveSurveysRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurveysRequestJob* successJob)
            {
                // handle success
                CloudGemInGameSurveyResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetActiveSurveysSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetActiveSurveysRequestJob* failedJob)
            {
                // handle error
                CloudGemInGameSurveyResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetActiveSurveysError(failedJob, entityId);
                }
            }
        );
        
        
        requestJob->parameters.survey_id = survey_id;
        
        
        requestJob->parameters.question_index = question_index;
        
        requestJob->parameters.question_count = question_count;
        
        requestJob->Start();
    }
    

    
    
    bool ServiceStatus::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "status") == 0) return reader.Accept(status);
        
        return reader.Ignore();
    }

    void ServiceStatus::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ServiceStatus>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ServiceStatus>("CloudGemInGameSurvey_ServiceStatus")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("status", BehaviorValueProperty(&ServiceStatus::status))
            
            ;
        }
    }
    
    
    
    
    
    bool Answer::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "answer") == 0) return reader.Accept(answer);
        
        if (strcmp(key, "question_id") == 0) return reader.Accept(question_id);
        
        return reader.Ignore();
    }

    void Answer::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<Answer>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<Answer>("CloudGemInGameSurvey_Answer")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("answer", BehaviorValueProperty(&Answer::answer))
            
                ->Property("question_id", BehaviorValueProperty(&Answer::question_id))
            
            ;
        }
    }
    
    
    
    
    
    bool AnswerList::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "answers") == 0) return reader.Accept(answers);
        
        return reader.Ignore();
    }

    void AnswerList::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<AnswerList>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<AnswerList>("CloudGemInGameSurvey_AnswerList")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("answers", BehaviorValueProperty(&AnswerList::answers))
            
            ;
        }
    }
    
    
    
    
    
    bool AnswerSubmission::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "submission_id") == 0) return reader.Accept(submission_id);
        
        if (strcmp(key, "creation_time") == 0) return reader.Accept(creation_time);
        
        if (strcmp(key, "answers") == 0) return reader.Accept(answers);
        
        return reader.Ignore();
    }

    void AnswerSubmission::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<AnswerSubmission>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<AnswerSubmission>("CloudGemInGameSurvey_AnswerSubmission")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("submission_id", BehaviorValueProperty(&AnswerSubmission::submission_id))
            
                ->Property("creation_time", BehaviorValueProperty(&AnswerSubmission::creation_time))
            
                ->Property("answers", BehaviorValueProperty(&AnswerSubmission::answers))
            
            ;
        }
    }
    
    
    
    bool SubmitAnswersResponse::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "submission_id") == 0) return reader.Accept(submission_id);
        
        return reader.Ignore();
    }

    void SubmitAnswersResponse::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<SubmitAnswersResponse>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<SubmitAnswersResponse>("CloudGemInGameSurvey_SubmitAnswersResponse")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("submission_id", BehaviorValueProperty(&SubmitAnswersResponse::submission_id))
            
            ;
        }
    }
    
    
    
    bool SurveyMetadata::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "survey_name") == 0) return reader.Accept(survey_name);
        
        if (strcmp(key, "creation_time") == 0) return reader.Accept(creation_time);
        
        if (strcmp(key, "activation_start_time") == 0) return reader.Accept(activation_start_time);
        
        if (strcmp(key, "activation_end_time") == 0) return reader.Accept(activation_end_time);
        
        if (strcmp(key, "num_questions") == 0) return reader.Accept(num_questions);
        
        if (strcmp(key, "survey_id") == 0) return reader.Accept(survey_id);
        
        return reader.Ignore();
    }

    void SurveyMetadata::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<SurveyMetadata>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<SurveyMetadata>("CloudGemInGameSurvey_SurveyMetadata")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("survey_name", BehaviorValueProperty(&SurveyMetadata::survey_name))
            
                ->Property("creation_time", BehaviorValueProperty(&SurveyMetadata::creation_time))
            
                ->Property("activation_start_time", BehaviorValueProperty(&SurveyMetadata::activation_start_time))
            
                ->Property("activation_end_time", BehaviorValueProperty(&SurveyMetadata::activation_end_time))
            
                ->Property("num_questions", BehaviorValueProperty(&SurveyMetadata::num_questions))
            
                ->Property("survey_id", BehaviorValueProperty(&SurveyMetadata::survey_id))
            
            ;
        }
    }
    
    
    
    
    
    bool SurveyMetadataList::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "metadata_list") == 0) return reader.Accept(metadata_list);
        
        if (strcmp(key, "pagination_token") == 0) return reader.Accept(pagination_token);
        
        return reader.Ignore();
    }

    void SurveyMetadataList::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<SurveyMetadataList>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<SurveyMetadataList>("CloudGemInGameSurvey_SurveyMetadataList")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("metadata_list", BehaviorValueProperty(&SurveyMetadataList::metadata_list))
            
                ->Property("pagination_token", BehaviorValueProperty(&SurveyMetadataList::pagination_token))
            
            ;
        }
    }
    
    
    
    bool GetPlayerSubmissionIdsResponse::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "submission_id_list") == 0) return reader.Accept(submission_id_list);
        
        return reader.Ignore();
    }

    void GetPlayerSubmissionIdsResponse::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<GetPlayerSubmissionIdsResponse>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<GetPlayerSubmissionIdsResponse>("CloudGemInGameSurvey_GetPlayerSubmissionIdsResponse")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("submission_id_list", BehaviorValueProperty(&GetPlayerSubmissionIdsResponse::submission_id_list))
            
            ;
        }
    }
    
    
    
    bool Question::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "max_label") == 0) return reader.Accept(max_label);
        
        if (strcmp(key, "min_label") == 0) return reader.Accept(min_label);
        
        if (strcmp(key, "title") == 0) return reader.Accept(title);
        
        if (strcmp(key, "max") == 0) return reader.Accept(max);
        
        if (strcmp(key, "min") == 0) return reader.Accept(min);
        
        if (strcmp(key, "multiple_select") == 0) return reader.Accept(multiple_select);
        
        if (strcmp(key, "style") == 0) return reader.Accept(style);
        
        if (strcmp(key, "max_chars") == 0) return reader.Accept(max_chars);
        
        if (strcmp(key, "predefines") == 0) return reader.Accept(predefines);
        
        if (strcmp(key, "type") == 0) return reader.Accept(type);
        
        if (strcmp(key, "question_id") == 0) return reader.Accept(question_id);
        
        return reader.Ignore();
    }

    void Question::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<Question>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<Question>("CloudGemInGameSurvey_Question")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("max_label", BehaviorValueProperty(&Question::max_label))
            
                ->Property("min_label", BehaviorValueProperty(&Question::min_label))
            
                ->Property("title", BehaviorValueProperty(&Question::title))
            
                ->Property("max", BehaviorValueProperty(&Question::max))
            
                ->Property("min", BehaviorValueProperty(&Question::min))
            
                ->Property("multiple_select", BehaviorValueProperty(&Question::multiple_select))
            
                ->Property("style", BehaviorValueProperty(&Question::style))
            
                ->Property("max_chars", BehaviorValueProperty(&Question::max_chars))
            
                ->Property("predefines", BehaviorValueProperty(&Question::predefines))
            
                ->Property("type", BehaviorValueProperty(&Question::type))
            
                ->Property("question_id", BehaviorValueProperty(&Question::question_id))
            
            ;
        }
    }
    
    
    
    
    
    bool Survey::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "survey_name") == 0) return reader.Accept(survey_name);
        
        if (strcmp(key, "survey_id") == 0) return reader.Accept(survey_id);
        
        if (strcmp(key, "questions") == 0) return reader.Accept(questions);
        
        return reader.Ignore();
    }

    void Survey::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<Survey>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<Survey>("CloudGemInGameSurvey_Survey")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("survey_name", BehaviorValueProperty(&Survey::survey_name))
            
                ->Property("survey_id", BehaviorValueProperty(&Survey::survey_id))
            
                ->Property("questions", BehaviorValueProperty(&Survey::questions))
            
            ;
        }
    }
    
    
}
}