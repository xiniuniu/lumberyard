/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// THIS CODE IS AUTOGENERATED, DO NOT MODIFY
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


#include "CloudGemDefectReporter_precompiled.h"



#include "AWS/ServiceApi/CloudGemDefectReporterClientComponent.h"

namespace CloudGemDefectReporter {
namespace ServiceAPI {

    
    const char* LmbrAWS_CodeGen_ResponseStatus_UUID= "{58c0d242-22ee-47d7-88cc-17327aee9504}";
    
    const char* LmbrAWS_CodeGen_EncryptedPresignedPostFields_UUID= "{48a7b3b3-1445-48d1-a20e-0f395bd97880}";
    
    const char* LmbrAWS_CodeGen_ProjectKeys_UUID= "{a0b3a3b5-75f2-4235-941b-5bf5ca243307}";
    
    const char* LmbrAWS_CodeGen_ClientConfiguration_UUID= "{e926ee4e-47b9-43dd-bb03-11aead2f1f20}";
    
    const char* LmbrAWS_CodeGen_UploadRequestResults_UUID= "{d3f9d029-35b2-487f-a372-4a91604cc7f7}";
    
    const char* LmbrAWS_CodeGen_Component_UUID= "{1359e9a0-9d48-4e87-bc13-1b8c392ca2c2}";
    
    const char* LmbrAWS_CodeGen_IssueTypes_UUID= "{0e20baeb-b599-47d3-b4ca-13d9cf2e9c86}";
    
    const char* LmbrAWS_CodeGen_SearchEntry_UUID= "{e6c7dbc9-24bd-4c07-84bf-46329d557662}";
    
    const char* LmbrAWS_CodeGen_ResponseHandler_UUID= "{4501c9a4-1854-4a3a-8e08-f894d9da36f1}";
    
    const char* LmbrAWS_CodeGen_ReportHeader_UUID= "{f3431ae3-a1e7-4b47-b431-4ea7a4bb58c8}";
    
    const char* LmbrAWS_CodeGen_NotificationBus1_UUID= "{99fb2fc0-5960-48df-a532-554db8c9bdf3}";
    
    const char* LmbrAWS_CodeGen_RequestBus1_UUID= "{9192d80c-229a-475c-b9e8-d41c62f80025}";
    
    const char* LmbrAWS_CodeGen_Credentials_UUID= "{793bc832-749c-40a5-a5b0-697f65737d4c}";
    
    const char* LmbrAWS_CodeGen_UnencryptedPresignedPostFields_UUID= "{abf3b3e4-d64c-4e1e-95f9-cbd643d64aab}";
    
    const char* LmbrAWS_CodeGen_ServiceStatus_UUID= "{fbaa352a-e063-4a62-8c93-5948d0fb5ee2}";
    
    const char* LmbrAWS_CodeGen_UploadRequest_UUID= "{eec92e6e-3099-41e7-8694-11b524a4b269}";
    
    const char* LmbrAWS_CodeGen_CustomField_UUID= "{8db257e0-b885-4ec9-9bd1-8315e335b395}";
    
    const char* LmbrAWS_CodeGen_ReportComments_UUID= "{29474136-196a-41a6-bd20-1365378401d3}";
    
    const char* LmbrAWS_CodeGen_JiraIntegrationSettings_UUID= "{aaa1600d-3d38-4ca7-a135-ef5014e723ac}";
    
    const char* LmbrAWS_CodeGen_ObjectFieldProperty_UUID= "{560fe822-aa72-4f7d-a728-55f19177fb6b}";
    

    void Configure()
    {
        // Insert any necessary CloudGemFramework configuration here
    }

    // redefs
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const int& item)
    {
        return writer.Int(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AZStd::string& item)
    {
        return writer.String(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const double& item)
    {
        return writer.Double(item);
    }

    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const StringList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ObjectFieldProperty& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("title");
            ok = ok && WriteJson(writer, item.title);
            
            ok = ok && writer.Key("maxChars");
            ok = ok && WriteJson(writer, item.maxChars);
            
            ok = ok && writer.Key("defaultValue");
            ok = ok && WriteJson(writer, item.defaultValue);
            
            ok = ok && writer.Key("predefines");
            ok = ok && WriteJson(writer, item.predefines);
            
            ok = ok && writer.Key("multipleSelect");
            ok = ok && WriteJson(writer, item.multipleSelect);
            
            ok = ok && writer.Key("type");
            ok = ok && WriteJson(writer, item.type);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const CustomFieldPropertyProperties& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const CustomField& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("title");
            ok = ok && WriteJson(writer, item.title);
            
            ok = ok && writer.Key("maxChars");
            ok = ok && WriteJson(writer, item.maxChars);
            
            ok = ok && writer.Key("defaultValue");
            ok = ok && WriteJson(writer, item.defaultValue);
            
            ok = ok && writer.Key("predefines");
            ok = ok && WriteJson(writer, item.predefines);
            
            ok = ok && writer.Key("multipleSelect");
            ok = ok && WriteJson(writer, item.multipleSelect);
            
            ok = ok && writer.Key("type");
            ok = ok && WriteJson(writer, item.type);
            
            ok = ok && writer.Key("properties");
            ok = ok && WriteJson(writer, item.properties);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ClientConfigurationPropertyClientConfiguration& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ClientConfiguration& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("clientConfiguration");
            ok = ok && WriteJson(writer, item.clientConfiguration);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ServiceStatus& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("status");
            ok = ok && WriteJson(writer, item.status);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const IssueTypes& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("issueTypes");
            ok = ok && WriteJson(writer, item.issueTypes);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const JiraIntegrationSettings& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("project");
            ok = ok && WriteJson(writer, item.project);
            
            ok = ok && writer.Key("issuetype");
            ok = ok && WriteJson(writer, item.issuetype);
            
            ok = ok && writer.Key("submitMode");
            ok = ok && WriteJson(writer, item.submitMode);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ProjectKeys& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("projectKeys");
            ok = ok && WriteJson(writer, item.projectKeys);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ReportComments& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("universal_unique_identifier");
            ok = ok && WriteJson(writer, item.universal_unique_identifier);
            
            ok = ok && writer.Key("comments");
            ok = ok && WriteJson(writer, item.comments);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const UploadRequest& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("NumberOfEncryptedPosts");
            ok = ok && WriteJson(writer, item.NumberOfEncryptedPosts);
            
            ok = ok && writer.Key("NumberOfUnencryptedPosts");
            ok = ok && WriteJson(writer, item.NumberOfUnencryptedPosts);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const EncryptedPresignedPostFields& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("AmzSignature");
            ok = ok && WriteJson(writer, item.AmzSignature);
            
            ok = ok && writer.Key("AmzServerSideEncryption");
            ok = ok && WriteJson(writer, item.AmzServerSideEncryption);
            
            ok = ok && writer.Key("AmzCredential");
            ok = ok && WriteJson(writer, item.AmzCredential);
            
            ok = ok && writer.Key("AmzDate");
            ok = ok && WriteJson(writer, item.AmzDate);
            
            ok = ok && writer.Key("AmzSecurityToken");
            ok = ok && WriteJson(writer, item.AmzSecurityToken);
            
            ok = ok && writer.Key("AmzAlgorithm");
            ok = ok && WriteJson(writer, item.AmzAlgorithm);
            
            ok = ok && writer.Key("Key");
            ok = ok && WriteJson(writer, item.Key);
            
            ok = ok && writer.Key("Policy");
            ok = ok && WriteJson(writer, item.Policy);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const UploadRequestResultsPropertyEncryptedPresignedPostFieldsArray& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const UnencryptedPresignedPostFields& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("AmzSignature");
            ok = ok && WriteJson(writer, item.AmzSignature);
            
            ok = ok && writer.Key("AmzCredential");
            ok = ok && WriteJson(writer, item.AmzCredential);
            
            ok = ok && writer.Key("AmzDate");
            ok = ok && WriteJson(writer, item.AmzDate);
            
            ok = ok && writer.Key("AmzSecurityToken");
            ok = ok && WriteJson(writer, item.AmzSecurityToken);
            
            ok = ok && writer.Key("AmzAlgorithm");
            ok = ok && WriteJson(writer, item.AmzAlgorithm);
            
            ok = ok && writer.Key("Key");
            ok = ok && WriteJson(writer, item.Key);
            
            ok = ok && writer.Key("Policy");
            ok = ok && WriteJson(writer, item.Policy);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const UploadRequestResultsPropertyUnencryptedPresignedPostFieldsArray& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const UploadRequestResults& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("Url");
            ok = ok && WriteJson(writer, item.Url);
            
            ok = ok && writer.Key("EncryptedPresignedPostFieldsArray");
            ok = ok && WriteJson(writer, item.EncryptedPresignedPostFieldsArray);
            
            ok = ok && writer.Key("UnencryptedPresignedPostFieldsArray");
            ok = ok && WriteJson(writer, item.UnencryptedPresignedPostFieldsArray);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const Credentials& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("userName");
            ok = ok && WriteJson(writer, item.userName);
            
            ok = ok && writer.Key("password");
            ok = ok && WriteJson(writer, item.password);
            
            ok = ok && writer.Key("server");
            ok = ok && WriteJson(writer, item.server);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ResponseStatus& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("status");
            ok = ok && WriteJson(writer, item.status);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SearchEntry& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("query_params");
            ok = ok && WriteJson(writer, item.query_params);
            
            ok = ok && writer.Key("sql_id");
            ok = ok && WriteJson(writer, item.sql_id);
            
            ok = ok && writer.Key("user_id");
            ok = ok && WriteJson(writer, item.user_id);
            
            ok = ok && writer.Key("timestamp");
            ok = ok && WriteJson(writer, item.timestamp);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ReportHeader& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("bookmark");
            ok = ok && WriteJson(writer, item.bookmark);
            
            ok = ok && writer.Key("read_status");
            ok = ok && WriteJson(writer, item.read_status);
            
            ok = ok && writer.Key("universal_unique_identifier");
            ok = ok && WriteJson(writer, item.universal_unique_identifier);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    

    // Generated Function Parameters
    
    bool PutClientconfigurationRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PutClientconfigurationRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemDefectReporter::ServiceAPI::WriteJson(writer, client_configuration);
        
        return ok;
    }
    
    bool GetClientconfigurationRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetClientconfigurationRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool GetJiraintegrationIssuetypesRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""project_key""}", project_key);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetJiraintegrationIssuetypesRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool GetServiceStatusRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetServiceStatusRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool GetJiraintegrationSettingsRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetJiraintegrationSettingsRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool GetJiraintegrationProjectkeysRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetJiraintegrationProjectkeysRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool GetCommentRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""universal_unique_identifier""}", universal_unique_identifier);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetCommentRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool PostServiceUploadRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PostServiceUploadRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemDefectReporter::ServiceAPI::WriteJson(writer, request_content);
        
        return ok;
    }
    
    bool PutJiraintegrationCredentialsRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PutJiraintegrationCredentialsRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemDefectReporter::ServiceAPI::WriteJson(writer, credentials);
        
        return ok;
    }
    
    bool GetJiraintegrationCredentialsRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool GetJiraintegrationCredentialsRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        return ok;
    }
    
    bool PutCommentRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PutCommentRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemDefectReporter::ServiceAPI::WriteJson(writer, report);
        
        return ok;
    }
    
    bool PutRecentsearchRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PutRecentsearchRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemDefectReporter::ServiceAPI::WriteJson(writer, search);
        
        return ok;
    }
    
    bool PutHeaderRequest::Parameters::BuildRequest(CloudGemFramework::RequestBuilder& request)
    {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
    }

    bool PutHeaderRequest::Parameters::WriteJson(CloudGemFramework::JsonWriter& writer) const
    {
        bool ok = true;
        
        ok = ok && CloudGemDefectReporter::ServiceAPI::WriteJson(writer, report);
        
        return ok;
    }
    




    // CloudGemDefectReporterNotificationBus
    
    
    void CloudGemDefectReporterNotifications::OnPutClientconfigurationRequestSuccess(const ServiceStatus response) { }
    
    void CloudGemDefectReporterNotifications::OnPutClientconfigurationRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnGetClientconfigurationRequestSuccess(const ClientConfiguration response) { }
    
    void CloudGemDefectReporterNotifications::OnGetClientconfigurationRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationIssuetypesRequestSuccess(const IssueTypes response) { }
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationIssuetypesRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnGetServiceStatusRequestSuccess(const ServiceStatus response) { }
    
    void CloudGemDefectReporterNotifications::OnGetServiceStatusRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationSettingsRequestSuccess(const JiraIntegrationSettings response) { }
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationSettingsRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationProjectkeysRequestSuccess(const ProjectKeys response) { }
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationProjectkeysRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnGetCommentRequestSuccess(const ReportComments response) { }
    
    void CloudGemDefectReporterNotifications::OnGetCommentRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnPostServiceUploadRequestSuccess(const UploadRequestResults response) { }
    
    void CloudGemDefectReporterNotifications::OnPostServiceUploadRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnPutJiraintegrationCredentialsRequestSuccess(const ResponseStatus response) { }
    
    void CloudGemDefectReporterNotifications::OnPutJiraintegrationCredentialsRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationCredentialsRequestSuccess(const Credentials response) { }
    
    void CloudGemDefectReporterNotifications::OnGetJiraintegrationCredentialsRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnPutCommentRequestSuccess(const ServiceStatus response) { }
    
    void CloudGemDefectReporterNotifications::OnPutCommentRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnPutRecentsearchRequestSuccess(const ServiceStatus response) { }
    
    void CloudGemDefectReporterNotifications::OnPutRecentsearchRequestError(const CloudGemFramework::Error error) { }
    
    
    void CloudGemDefectReporterNotifications::OnPutHeaderRequestSuccess(const ServiceStatus response) { }
    
    void CloudGemDefectReporterNotifications::OnPutHeaderRequestError(const CloudGemFramework::Error error) { }
    


    // BehaviorContext CloudGemDefectReporterNotificationBus handler implementation
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutClientconfigurationRequestSuccess(const ServiceStatus response)
    {
        Call(FN_OnPutClientconfigurationRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutClientconfigurationRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPutClientconfigurationRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetClientconfigurationRequestSuccess(const ClientConfiguration response)
    {
        Call(FN_OnGetClientconfigurationRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetClientconfigurationRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetClientconfigurationRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationIssuetypesRequestSuccess(const IssueTypes response)
    {
        Call(FN_OnGetJiraintegrationIssuetypesRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationIssuetypesRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetJiraintegrationIssuetypesRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetServiceStatusRequestSuccess(const ServiceStatus response)
    {
        Call(FN_OnGetServiceStatusRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetServiceStatusRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetServiceStatusRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationSettingsRequestSuccess(const JiraIntegrationSettings response)
    {
        Call(FN_OnGetJiraintegrationSettingsRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationSettingsRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetJiraintegrationSettingsRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationProjectkeysRequestSuccess(const ProjectKeys response)
    {
        Call(FN_OnGetJiraintegrationProjectkeysRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationProjectkeysRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetJiraintegrationProjectkeysRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetCommentRequestSuccess(const ReportComments response)
    {
        Call(FN_OnGetCommentRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetCommentRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetCommentRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPostServiceUploadRequestSuccess(const UploadRequestResults response)
    {
        Call(FN_OnPostServiceUploadRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPostServiceUploadRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPostServiceUploadRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutJiraintegrationCredentialsRequestSuccess(const ResponseStatus response)
    {
        Call(FN_OnPutJiraintegrationCredentialsRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutJiraintegrationCredentialsRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPutJiraintegrationCredentialsRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationCredentialsRequestSuccess(const Credentials response)
    {
        Call(FN_OnGetJiraintegrationCredentialsRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnGetJiraintegrationCredentialsRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnGetJiraintegrationCredentialsRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutCommentRequestSuccess(const ServiceStatus response)
    {
        Call(FN_OnPutCommentRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutCommentRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPutCommentRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutRecentsearchRequestSuccess(const ServiceStatus response)
    {
        Call(FN_OnPutRecentsearchRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutRecentsearchRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPutRecentsearchRequestError, error);
    }
    
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutHeaderRequestSuccess(const ServiceStatus response)
    {
        Call(FN_OnPutHeaderRequestSuccess, response);
    }
    
    void BehaviorCloudGemDefectReporterNotificationBusHandler::OnPutHeaderRequestError(const CloudGemFramework::Error error)
    {
        Call(FN_OnPutHeaderRequestError, error);
    }
    

    // CloudGemDefectReporterRequestBus
    
    
    void CloudGemDefectReporterRequests::PutClientconfiguration(const ClientConfiguration& client_configuration, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::GetClientconfiguration(CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::GetJiraintegrationIssuetypes(const AZStd::string& project_key, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::GetServiceStatus(CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::GetJiraintegrationSettings(CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::GetJiraintegrationProjectkeys(CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::GetComment(const AZStd::string& universal_unique_identifier, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::PostServiceUpload(const UploadRequest& request_content, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::PutJiraintegrationCredentials(const Credentials& credentials, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::GetJiraintegrationCredentials(CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::PutComment(const ReportComments& report, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::PutRecentsearch(const SearchEntry& search, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    
    
    void CloudGemDefectReporterRequests::PutHeader(const ReportHeader& report, CloudGemDefectReporterResponseHandler* responseHandler) { }
    
    

    // CloudGemDefectReporterResponseHandler
    
    void CloudGemDefectReporterResponseHandler::HandlePutClientconfigurationSuccess(PutClientconfigurationRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutClientconfigurationRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandlePutClientconfigurationError(PutClientconfigurationRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutClientconfigurationRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandleGetClientconfigurationSuccess(GetClientconfigurationRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetClientconfigurationRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandleGetClientconfigurationError(GetClientconfigurationRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetClientconfigurationRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationIssuetypesSuccess(GetJiraintegrationIssuetypesRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationIssuetypesRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationIssuetypesError(GetJiraintegrationIssuetypesRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationIssuetypesRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandleGetServiceStatusSuccess(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetServiceStatusRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandleGetServiceStatusError(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetServiceStatusRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationSettingsSuccess(GetJiraintegrationSettingsRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationSettingsRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationSettingsError(GetJiraintegrationSettingsRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationSettingsRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationProjectkeysSuccess(GetJiraintegrationProjectkeysRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationProjectkeysRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationProjectkeysError(GetJiraintegrationProjectkeysRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationProjectkeysRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandleGetCommentSuccess(GetCommentRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetCommentRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandleGetCommentError(GetCommentRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetCommentRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandlePostServiceUploadSuccess(PostServiceUploadRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPostServiceUploadRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandlePostServiceUploadError(PostServiceUploadRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPostServiceUploadRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandlePutJiraintegrationCredentialsSuccess(PutJiraintegrationCredentialsRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutJiraintegrationCredentialsRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandlePutJiraintegrationCredentialsError(PutJiraintegrationCredentialsRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutJiraintegrationCredentialsRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationCredentialsSuccess(GetJiraintegrationCredentialsRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationCredentialsRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandleGetJiraintegrationCredentialsError(GetJiraintegrationCredentialsRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnGetJiraintegrationCredentialsRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandlePutCommentSuccess(PutCommentRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutCommentRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandlePutCommentError(PutCommentRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutCommentRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandlePutRecentsearchSuccess(PutRecentsearchRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutRecentsearchRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandlePutRecentsearchError(PutRecentsearchRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutRecentsearchRequestError, job->error);
    }
    
    void CloudGemDefectReporterResponseHandler::HandlePutHeaderSuccess(PutHeaderRequestJob* job, AZ::EntityId entityId)
    {
        
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutHeaderRequestSuccess, job->result);
        
    }

    void CloudGemDefectReporterResponseHandler::HandlePutHeaderError(PutHeaderRequestJob* job, AZ::EntityId entityId)
    {
        EBUS_EVENT_ID(entityId, CloudGemDefectReporterNotificationBus, OnPutHeaderRequestError, job->error);
    }
    


    // CloudGemDefectReporterClientComponent
    void CloudGemDefectReporterClientComponent::Init()
    {
        m_defaultResponseHandler = AZStd::make_shared<CloudGemDefectReporterResponseHandler>();
        CloudGemDefectReporter::ServiceAPI::Configure();
    }

    void CloudGemDefectReporterClientComponent::Activate()
    {
        CloudGemDefectReporterRequestBus::Handler::BusConnect(m_entity->GetId());
    }

    void CloudGemDefectReporterClientComponent::Deactivate()
    {
        CloudGemDefectReporterRequestBus::Handler::BusDisconnect();
    }

    
    
    void CloudGemDefectReporterClientComponent::PutClientconfiguration(const ClientConfiguration& client_configuration, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PutClientconfigurationRequestJob* requestJob = PutClientconfigurationRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PutClientconfigurationRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePutClientconfigurationSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PutClientconfigurationRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePutClientconfigurationError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.client_configuration = client_configuration;
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::GetClientconfiguration(CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetClientconfigurationRequestJob* requestJob = GetClientconfigurationRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetClientconfigurationRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetClientconfigurationSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetClientconfigurationRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetClientconfigurationError(failedJob, entityId);
                }
            }
        );
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::GetJiraintegrationIssuetypes(const AZStd::string& project_key, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetJiraintegrationIssuetypesRequestJob* requestJob = GetJiraintegrationIssuetypesRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationIssuetypesRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetJiraintegrationIssuetypesSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationIssuetypesRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetJiraintegrationIssuetypesError(failedJob, entityId);
                }
            }
        );
        
        
        requestJob->parameters.project_key = project_key;
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::GetServiceStatus(CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetServiceStatusRequestJob* requestJob = GetServiceStatusRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetServiceStatusSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetServiceStatusError(failedJob, entityId);
                }
            }
        );
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::GetJiraintegrationSettings(CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetJiraintegrationSettingsRequestJob* requestJob = GetJiraintegrationSettingsRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationSettingsRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetJiraintegrationSettingsSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationSettingsRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetJiraintegrationSettingsError(failedJob, entityId);
                }
            }
        );
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::GetJiraintegrationProjectkeys(CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetJiraintegrationProjectkeysRequestJob* requestJob = GetJiraintegrationProjectkeysRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationProjectkeysRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetJiraintegrationProjectkeysSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationProjectkeysRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetJiraintegrationProjectkeysError(failedJob, entityId);
                }
            }
        );
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::GetComment(const AZStd::string& universal_unique_identifier, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetCommentRequestJob* requestJob = GetCommentRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetCommentRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetCommentSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetCommentRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetCommentError(failedJob, entityId);
                }
            }
        );
        
        
        requestJob->parameters.universal_unique_identifier = universal_unique_identifier;
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::PostServiceUpload(const UploadRequest& request_content, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PostServiceUploadRequestJob* requestJob = PostServiceUploadRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PostServiceUploadRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePostServiceUploadSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PostServiceUploadRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePostServiceUploadError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.request_content = request_content;
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::PutJiraintegrationCredentials(const Credentials& credentials, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PutJiraintegrationCredentialsRequestJob* requestJob = PutJiraintegrationCredentialsRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PutJiraintegrationCredentialsRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePutJiraintegrationCredentialsSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PutJiraintegrationCredentialsRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePutJiraintegrationCredentialsError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.credentials = credentials;
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::GetJiraintegrationCredentials(CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        GetJiraintegrationCredentialsRequestJob* requestJob = GetJiraintegrationCredentialsRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationCredentialsRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandleGetJiraintegrationCredentialsSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](GetJiraintegrationCredentialsRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandleGetJiraintegrationCredentialsError(failedJob, entityId);
                }
            }
        );
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::PutComment(const ReportComments& report, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PutCommentRequestJob* requestJob = PutCommentRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PutCommentRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePutCommentSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PutCommentRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePutCommentError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.report = report;
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::PutRecentsearch(const SearchEntry& search, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PutRecentsearchRequestJob* requestJob = PutRecentsearchRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PutRecentsearchRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePutRecentsearchSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PutRecentsearchRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePutRecentsearchError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.search = search;
        
        
        
        requestJob->Start();
    }
    
    
    void CloudGemDefectReporterClientComponent::PutHeader(const ReportHeader& report, CloudGemDefectReporterResponseHandler* responseHandler)
    
    {
        // Cache our entityId in case the entity goes away
        AZ::EntityId entityId;
        if (m_entity)
        {
            entityId = m_entity->GetId();
        }

        // Cache our default response handler in case this component goes away
        AZStd::shared_ptr < CloudGemDefectReporterResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

        // Create job
        PutHeaderRequestJob* requestJob = PutHeaderRequestJob::Create(
            [responseHandler, defaultResponseHandler, entityId](PutHeaderRequestJob* successJob)
            {
                // handle success
                CloudGemDefectReporterResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (successHandler)
                {
                    successHandler->HandlePutHeaderSuccess(successJob, entityId);
                }
            },
            [responseHandler, defaultResponseHandler, entityId](PutHeaderRequestJob* failedJob)
            {
                // handle error
                CloudGemDefectReporterResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                if (failureHandler)
                {
                    failureHandler->HandlePutHeaderError(failedJob, entityId);
                }
            }
        );
        
        requestJob->parameters.report = report;
        
        
        
        requestJob->Start();
    }
    

    
    
    
    
    bool ObjectFieldProperty::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "title") == 0) return reader.Accept(title);
        
        if (strcmp(key, "maxChars") == 0) return reader.Accept(maxChars);
        
        if (strcmp(key, "defaultValue") == 0) return reader.Accept(defaultValue);
        
        if (strcmp(key, "predefines") == 0) return reader.Accept(predefines);
        
        if (strcmp(key, "multipleSelect") == 0) return reader.Accept(multipleSelect);
        
        if (strcmp(key, "type") == 0) return reader.Accept(type);
        
        return reader.Ignore();
    }

    void ObjectFieldProperty::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ObjectFieldProperty>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ObjectFieldProperty>("CloudGemDefectReporter_ObjectFieldProperty")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("title", BehaviorValueProperty(&ObjectFieldProperty::title))
            
                ->Property("maxChars", BehaviorValueProperty(&ObjectFieldProperty::maxChars))
            
                ->Property("defaultValue", BehaviorValueProperty(&ObjectFieldProperty::defaultValue))
            
                ->Property("predefines", BehaviorValueProperty(&ObjectFieldProperty::predefines))
            
                ->Property("multipleSelect", BehaviorValueProperty(&ObjectFieldProperty::multipleSelect))
            
                ->Property("type", BehaviorValueProperty(&ObjectFieldProperty::type))
            
            ;
        }
    }
    
    
    
    
    
    bool CustomField::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "title") == 0) return reader.Accept(title);
        
        if (strcmp(key, "maxChars") == 0) return reader.Accept(maxChars);
        
        if (strcmp(key, "defaultValue") == 0) return reader.Accept(defaultValue);
        
        if (strcmp(key, "predefines") == 0) return reader.Accept(predefines);
        
        if (strcmp(key, "multipleSelect") == 0) return reader.Accept(multipleSelect);
        
        if (strcmp(key, "type") == 0) return reader.Accept(type);
        
        if (strcmp(key, "properties") == 0) return reader.Accept(properties);
        
        return reader.Ignore();
    }

    void CustomField::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<CustomField>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<CustomField>("CloudGemDefectReporter_CustomField")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("title", BehaviorValueProperty(&CustomField::title))
            
                ->Property("maxChars", BehaviorValueProperty(&CustomField::maxChars))
            
                ->Property("defaultValue", BehaviorValueProperty(&CustomField::defaultValue))
            
                ->Property("predefines", BehaviorValueProperty(&CustomField::predefines))
            
                ->Property("multipleSelect", BehaviorValueProperty(&CustomField::multipleSelect))
            
                ->Property("type", BehaviorValueProperty(&CustomField::type))
            
                ->Property("properties", BehaviorValueProperty(&CustomField::properties))
            
            ;
        }
    }
    
    
    
    
    
    bool ClientConfiguration::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "clientConfiguration") == 0) return reader.Accept(clientConfiguration);
        
        return reader.Ignore();
    }

    void ClientConfiguration::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ClientConfiguration>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ClientConfiguration>("CloudGemDefectReporter_ClientConfiguration")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("clientConfiguration", BehaviorValueProperty(&ClientConfiguration::clientConfiguration))
            
            ;
        }
    }
    
    
    
    bool ServiceStatus::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "status") == 0) return reader.Accept(status);
        
        return reader.Ignore();
    }

    void ServiceStatus::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ServiceStatus>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ServiceStatus>("CloudGemDefectReporter_ServiceStatus")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("status", BehaviorValueProperty(&ServiceStatus::status))
            
            ;
        }
    }
    
    
    
    bool IssueTypes::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "issueTypes") == 0) return reader.Accept(issueTypes);
        
        return reader.Ignore();
    }

    void IssueTypes::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<IssueTypes>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<IssueTypes>("CloudGemDefectReporter_IssueTypes")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("issueTypes", BehaviorValueProperty(&IssueTypes::issueTypes))
            
            ;
        }
    }
    
    
    
    bool JiraIntegrationSettings::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "project") == 0) return reader.Accept(project);
        
        if (strcmp(key, "issuetype") == 0) return reader.Accept(issuetype);
        
        if (strcmp(key, "submitMode") == 0) return reader.Accept(submitMode);
        
        return reader.Ignore();
    }

    void JiraIntegrationSettings::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<JiraIntegrationSettings>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<JiraIntegrationSettings>("CloudGemDefectReporter_JiraIntegrationSettings")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("project", BehaviorValueProperty(&JiraIntegrationSettings::project))
            
                ->Property("issuetype", BehaviorValueProperty(&JiraIntegrationSettings::issuetype))
            
                ->Property("submitMode", BehaviorValueProperty(&JiraIntegrationSettings::submitMode))
            
            ;
        }
    }
    
    
    
    bool ProjectKeys::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "projectKeys") == 0) return reader.Accept(projectKeys);
        
        return reader.Ignore();
    }

    void ProjectKeys::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ProjectKeys>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ProjectKeys>("CloudGemDefectReporter_ProjectKeys")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("projectKeys", BehaviorValueProperty(&ProjectKeys::projectKeys))
            
            ;
        }
    }
    
    
    
    bool ReportComments::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "universal_unique_identifier") == 0) return reader.Accept(universal_unique_identifier);
        
        if (strcmp(key, "comments") == 0) return reader.Accept(comments);
        
        return reader.Ignore();
    }

    void ReportComments::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ReportComments>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ReportComments>("CloudGemDefectReporter_ReportComments")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("universal_unique_identifier", BehaviorValueProperty(&ReportComments::universal_unique_identifier))
            
                ->Property("comments", BehaviorValueProperty(&ReportComments::comments))
            
            ;
        }
    }
    
    
    
    bool UploadRequest::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "NumberOfEncryptedPosts") == 0) return reader.Accept(NumberOfEncryptedPosts);
        
        if (strcmp(key, "NumberOfUnencryptedPosts") == 0) return reader.Accept(NumberOfUnencryptedPosts);
        
        return reader.Ignore();
    }

    void UploadRequest::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<UploadRequest>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<UploadRequest>("CloudGemDefectReporter_UploadRequest")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("NumberOfEncryptedPosts", BehaviorValueProperty(&UploadRequest::NumberOfEncryptedPosts))
            
                ->Property("NumberOfUnencryptedPosts", BehaviorValueProperty(&UploadRequest::NumberOfUnencryptedPosts))
            
            ;
        }
    }
    
    
    
    bool EncryptedPresignedPostFields::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "AmzSignature") == 0) return reader.Accept(AmzSignature);
        
        if (strcmp(key, "AmzServerSideEncryption") == 0) return reader.Accept(AmzServerSideEncryption);
        
        if (strcmp(key, "AmzCredential") == 0) return reader.Accept(AmzCredential);
        
        if (strcmp(key, "AmzDate") == 0) return reader.Accept(AmzDate);
        
        if (strcmp(key, "AmzSecurityToken") == 0) return reader.Accept(AmzSecurityToken);
        
        if (strcmp(key, "AmzAlgorithm") == 0) return reader.Accept(AmzAlgorithm);
        
        if (strcmp(key, "Key") == 0) return reader.Accept(Key);
        
        if (strcmp(key, "Policy") == 0) return reader.Accept(Policy);
        
        return reader.Ignore();
    }

    void EncryptedPresignedPostFields::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<EncryptedPresignedPostFields>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<EncryptedPresignedPostFields>("CloudGemDefectReporter_EncryptedPresignedPostFields")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("AmzSignature", BehaviorValueProperty(&EncryptedPresignedPostFields::AmzSignature))
            
                ->Property("AmzServerSideEncryption", BehaviorValueProperty(&EncryptedPresignedPostFields::AmzServerSideEncryption))
            
                ->Property("AmzCredential", BehaviorValueProperty(&EncryptedPresignedPostFields::AmzCredential))
            
                ->Property("AmzDate", BehaviorValueProperty(&EncryptedPresignedPostFields::AmzDate))
            
                ->Property("AmzSecurityToken", BehaviorValueProperty(&EncryptedPresignedPostFields::AmzSecurityToken))
            
                ->Property("AmzAlgorithm", BehaviorValueProperty(&EncryptedPresignedPostFields::AmzAlgorithm))
            
                ->Property("Key", BehaviorValueProperty(&EncryptedPresignedPostFields::Key))
            
                ->Property("Policy", BehaviorValueProperty(&EncryptedPresignedPostFields::Policy))
            
            ;
        }
    }
    
    
    
    
    
    bool UnencryptedPresignedPostFields::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "AmzSignature") == 0) return reader.Accept(AmzSignature);
        
        if (strcmp(key, "AmzCredential") == 0) return reader.Accept(AmzCredential);
        
        if (strcmp(key, "AmzDate") == 0) return reader.Accept(AmzDate);
        
        if (strcmp(key, "AmzSecurityToken") == 0) return reader.Accept(AmzSecurityToken);
        
        if (strcmp(key, "AmzAlgorithm") == 0) return reader.Accept(AmzAlgorithm);
        
        if (strcmp(key, "Key") == 0) return reader.Accept(Key);
        
        if (strcmp(key, "Policy") == 0) return reader.Accept(Policy);
        
        return reader.Ignore();
    }

    void UnencryptedPresignedPostFields::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<UnencryptedPresignedPostFields>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<UnencryptedPresignedPostFields>("CloudGemDefectReporter_UnencryptedPresignedPostFields")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("AmzSignature", BehaviorValueProperty(&UnencryptedPresignedPostFields::AmzSignature))
            
                ->Property("AmzCredential", BehaviorValueProperty(&UnencryptedPresignedPostFields::AmzCredential))
            
                ->Property("AmzDate", BehaviorValueProperty(&UnencryptedPresignedPostFields::AmzDate))
            
                ->Property("AmzSecurityToken", BehaviorValueProperty(&UnencryptedPresignedPostFields::AmzSecurityToken))
            
                ->Property("AmzAlgorithm", BehaviorValueProperty(&UnencryptedPresignedPostFields::AmzAlgorithm))
            
                ->Property("Key", BehaviorValueProperty(&UnencryptedPresignedPostFields::Key))
            
                ->Property("Policy", BehaviorValueProperty(&UnencryptedPresignedPostFields::Policy))
            
            ;
        }
    }
    
    
    
    
    
    bool UploadRequestResults::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "Url") == 0) return reader.Accept(Url);
        
        if (strcmp(key, "EncryptedPresignedPostFieldsArray") == 0) return reader.Accept(EncryptedPresignedPostFieldsArray);
        
        if (strcmp(key, "UnencryptedPresignedPostFieldsArray") == 0) return reader.Accept(UnencryptedPresignedPostFieldsArray);
        
        return reader.Ignore();
    }

    void UploadRequestResults::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<UploadRequestResults>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<UploadRequestResults>("CloudGemDefectReporter_UploadRequestResults")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("Url", BehaviorValueProperty(&UploadRequestResults::Url))
            
                ->Property("EncryptedPresignedPostFieldsArray", BehaviorValueProperty(&UploadRequestResults::EncryptedPresignedPostFieldsArray))
            
                ->Property("UnencryptedPresignedPostFieldsArray", BehaviorValueProperty(&UploadRequestResults::UnencryptedPresignedPostFieldsArray))
            
            ;
        }
    }
    
    
    
    bool Credentials::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "userName") == 0) return reader.Accept(userName);
        
        if (strcmp(key, "password") == 0) return reader.Accept(password);
        
        if (strcmp(key, "server") == 0) return reader.Accept(server);
        
        return reader.Ignore();
    }

    void Credentials::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<Credentials>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<Credentials>("CloudGemDefectReporter_Credentials")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("userName", BehaviorValueProperty(&Credentials::userName))
            
                ->Property("password", BehaviorValueProperty(&Credentials::password))
            
                ->Property("server", BehaviorValueProperty(&Credentials::server))
            
            ;
        }
    }
    
    
    
    bool ResponseStatus::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "status") == 0) return reader.Accept(status);
        
        return reader.Ignore();
    }

    void ResponseStatus::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ResponseStatus>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ResponseStatus>("CloudGemDefectReporter_ResponseStatus")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("status", BehaviorValueProperty(&ResponseStatus::status))
            
            ;
        }
    }
    
    
    
    bool SearchEntry::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "query_params") == 0) return reader.Accept(query_params);
        
        if (strcmp(key, "sql_id") == 0) return reader.Accept(sql_id);
        
        if (strcmp(key, "user_id") == 0) return reader.Accept(user_id);
        
        if (strcmp(key, "timestamp") == 0) return reader.Accept(timestamp);
        
        return reader.Ignore();
    }

    void SearchEntry::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<SearchEntry>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<SearchEntry>("CloudGemDefectReporter_SearchEntry")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("query_params", BehaviorValueProperty(&SearchEntry::query_params))
            
                ->Property("sql_id", BehaviorValueProperty(&SearchEntry::sql_id))
            
                ->Property("user_id", BehaviorValueProperty(&SearchEntry::user_id))
            
                ->Property("timestamp", BehaviorValueProperty(&SearchEntry::timestamp))
            
            ;
        }
    }
    
    
    
    bool ReportHeader::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "bookmark") == 0) return reader.Accept(bookmark);
        
        if (strcmp(key, "read_status") == 0) return reader.Accept(read_status);
        
        if (strcmp(key, "universal_unique_identifier") == 0) return reader.Accept(universal_unique_identifier);
        
        return reader.Ignore();
    }

    void ReportHeader::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ReportHeader>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ReportHeader>("CloudGemDefectReporter_ReportHeader")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("bookmark", BehaviorValueProperty(&ReportHeader::bookmark))
            
                ->Property("read_status", BehaviorValueProperty(&ReportHeader::read_status))
            
                ->Property("universal_unique_identifier", BehaviorValueProperty(&ReportHeader::universal_unique_identifier))
            
            ;
        }
    }
    
    
}
}