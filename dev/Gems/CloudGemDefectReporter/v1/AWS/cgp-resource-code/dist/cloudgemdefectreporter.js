!function(a){function b(a,b,c){a in i||(i[a]={name:a,declarative:!0,deps:b,declare:c,normalizedDeps:b})}function c(a){return m[a]||(m[a]={name:a,dependencies:[],exports:{},importers:[]})}function d(b){if(!b.module){var e=b.module=c(b.name),f=b.module.exports,g=b.declare.call(a,function(a,b){if(e.locked=!0,"object"==typeof a)for(var c in a)f[c]=a[c];else f[a]=b;for(var d=0,g=e.importers.length;g>d;d++){var h=e.importers[d];if(!h.locked)for(var i=0;i<h.dependencies.length;++i)h.dependencies[i]===e&&h.setters[i](f)}return e.locked=!1,b},b.name);e.setters=g.setters,e.execute=g.execute;for(var j=0,k=b.normalizedDeps.length;k>j;j++){var l,n=b.normalizedDeps[j],o=i[n],p=m[n];p?l=p.exports:o&&!o.declarative?l=o.esModule:o?(d(o),p=o.module,l=p.exports):l=h(n),p&&p.importers?(p.importers.push(e),e.dependencies.push(p)):e.dependencies.push(null),e.setters[j]&&e.setters[j](l)}}}function e(b){var c={};if(("object"==typeof b||"function"==typeof b)&&b!==a)if(k)for(var d in b)"default"!==d&&f(c,b,d);else{var e=b&&b.hasOwnProperty;for(var d in b)"default"===d||e&&!b.hasOwnProperty(d)||(c[d]=b[d])}return c.default=b,l(c,"__useDefault",{value:!0}),c}function f(a,b,c){try{var d;(d=Object.getOwnPropertyDescriptor(b,c))&&l(a,c,d)}catch(d){return a[c]=b[c],!1}}function g(b,c){var d=i[b];if(d&&!d.evaluated&&d.declarative){c.push(b);for(var e=0,f=d.normalizedDeps.length;f>e;e++){var k=d.normalizedDeps[e];-1==j.call(c,k)&&(i[k]?g(k,c):h(k))}d.evaluated||(d.evaluated=!0,d.module.execute.call(a))}}function h(a){if(o[a])return o[a];if("@node/"==a.substr(0,6))return o[a]=e(n(a.substr(6)));var b=i[a];if(!b)throw"Module "+a+" not present.";return d(i[a]),g(a,[]),i[a]=void 0,b.declarative&&l(b.module.exports,"__esModule",{value:!0}),o[a]=b.declarative?b.module.exports:b.esModule}var i={},j=Array.prototype.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},k=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(a){k=!1}var l;!function(){try{Object.defineProperty({},"a",{})&&(l=Object.defineProperty)}catch(a){l=function(a,b,c){try{a[b]=c.value||c.get.call(a)}catch(a){}}}}();var m={},n="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,o={"@empty":{}};return function(a,c,d,f){return function(g){g(function(g){for(var i=0;i<c.length;i++)!function(a,b){b&&b.__esModule?o[a]=b:o[a]=e(b)}(c[i],arguments[i]);f({register:b});var j=h(a[0]);if(a.length>1)for(var i=1;i<a.length;i++)h(a[i]);return d?j.default:j})}}}("undefined"!=typeof self?self:global)(["6d","6e"],["8","6","59","7","9","a","3","72","3f","1c","d","77","c","1b","7e","82","86","10","11"],!1,function(a){this.require,this.exports,this.module;a.register("6f",["8","6","59","70","7","9","a"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){j=function(){function a(a,b,d){this.http=a,this.aws=b,this.metricservice=d,this.displayName="Defect Reporter",this.srcIcon="https://m.media-amazon.com/images/G/01/cloudcanvas/images/defect_reporter._CB1524608681_.png",this.state=new c.TackableStatus,this.metric=new c.TackableMeasure}return a.prototype.ngOnInit=function(){this._apiHandler=new f.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metricservice,this.context.identifier),this.report(this.metric),this.assign(this.state)},a.prototype.report=function(a){a.name="",a.value="",new e.Observable(function(a){setTimeout(function(){a.next({value:""})},3e3),setTimeout(function(){a.complete()},1e3)}).subscribe(function(b){a.value=b.value})},a.prototype.assign=function(a){a.label="Loading",a.styleType="Loading",this._apiHandler.get("service/status").subscribe(function(b){var c=JSON.parse(b.body.text());a.label="online"==c.result.status?"Online":"Offline",a.styleType="online"==c.result.status?"Enabled":"Offline"},function(b){a.label="Offline",a.styleType="Offline"})},k([d.Input(),l("design:type",Object)],a.prototype,"context",void 0),k([d.Input(),l("design:type",String)],a.prototype,"displayName",void 0),k([d.Input(),l("design:type",String)],a.prototype,"srcIcon",void 0),a=k([d.Component({selector:"cloudgemdefectreporter-thumbnail",template:'\n    <thumbnail-gem\n        [title]="displayName"\n        [cost]="\'High\'"\n        [srcIcon]="srcIcon"\n        [metric]="metric"\n        [state]="state"\n        >\n    </thumbnail-gem>'}),l("design:paramtypes",[g.Http,h.AwsService,i.LyMetricService])],a)}(),a("CloudGemDefectReporterThumbnailComponent",j)}}}),a.register("71",["6","8","a","7","9"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a}],execute:function(){!function(a){a[a.DefectList=0]="DefectList",a[a.DefectDetails=1]="DefectDetails"}(h||(h={})),a("Pages",h),i=function(a){function b(b,c,d,e){var f=a.call(this)||this;return f.http=b,f.aws=c,f.definition=d,f.metric=e,f.toDefectDetailsPage=function(a){a&&(f.showingDefect=a,f.showingPage=h.DefectDetails)},f.toDefectListPage=function(){f.showingPage=h.DefectList,f.showingDefect={},0===f.defectListPage.tabIndex?f.defectListPage.defectListOverviewTab.datatable.updateFilteredRows():f.defectListPage.bookmarktable.updateFilteredRows()},f}return j(b,a),b.prototype.ngOnInit=function(){var a=this.definition.getService("CloudGemMetric");this._metricApiHandler=new a.constructor(a.serviceUrl,this.http,this.aws,this.metric,this.context.identifier),this.isJiraIntegrationEnabled="disabled"!==this.context.JiraIntegrationEnabled,this.showingPage=h.DefectList},b.prototype.getMetricApiHandler=function(){return this._metricApiHandler},b.prototype.updateJiraMappings=function(){this.showingPage=h.DefectList,this.defectListPage.updateJiraMappings()},k([c.Input(),l("design:type",Object)],b.prototype,"context",void 0),k([c.ViewChild("DefectListPage"),l("design:type",Object)],b.prototype,"defectListPage",void 0),k([c.ViewChild("facetgenerator"),l("design:type",Object)],b.prototype,"facetgenerator",void 0),b=k([c.Component({selector:"cloudgemdefectreporter-index",template:'<div class="gem-container">          \x3c!-- Defect List Tab --\x3e     <defect-list-page #DefectListPage         [isJiraIntegrationEnabled]="isJiraIntegrationEnabled"         [hidden]="showingPage !== 0"          [context]="context"          [metricApiHandler]="getMetricApiHandler()"         [toDefectDetailsPageCallback]="toDefectDetailsPage">     </defect-list-page>      \x3c!-- Defect Details Tab --\x3e     <defect-details-page          *ngIf="showingPage === 1"          [isJiraIntegrationEnabled]="isJiraIntegrationEnabled"         [context]="context"         [configurationMappings]="defectListPage.configurationMappings"          [toDefectListPageCallback]="toDefectListPage"          [defect]="showingDefect"         (updateJiraMappings)="updateJiraMappings()">     </defect-details-page> </div>'}),l("design:paramtypes",[f.Http,g.AwsService,e.DefinitionService,e.LyMetricService])],b)}(d.AbstractCloudGemIndexComponent),a("CloudGemDefectReporterIndexComponent",i)}}}),a.register("6e",["3","59","70","72"],function(a,b){"use strict";var c,d,e,f,g=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){}],execute:function(){f=function(a){function b(b,c,d,e,f){return void 0===e&&(e=null),void 0===f&&(f=void 0),a.call(this,b,c,d)||this}return g(b,a),b.prototype.getDummyDefect=function(){var a=e.RandomUtil.getRandomInt(0,2e3);console.log("Random Time Out: "+a);var b=[1];return d.Observable.of(b).delay(a)},b.prototype.getReportHeaders=function(){return a.prototype.get.call(this,"headers")},b.prototype.updateReportHeader=function(b){return a.prototype.put.call(this,"header",b)},b.prototype.getReportComments=function(b){return a.prototype.get.call(this,"comment/"+b)},b.prototype.updateReportComments=function(b){return a.prototype.put.call(this,"comment",b)},b.prototype.updateAddtionalReportInfo=function(b){return a.prototype.put.call(this,"additionalinfo",b)},b.prototype.getRecentSearches=function(b){return a.prototype.get.call(this,"recentsearches/"+b)},b.prototype.addNewSearch=function(b){return a.prototype.put.call(this,"recentsearch",b)},b.prototype.updateClientConfiguration=function(b){return a.prototype.put.call(this,"clientconfiguration",b)},b.prototype.getClientConfiguration=function(){return a.prototype.get.call(this,"clientconfiguration")},b.prototype.getJiraIntegrationSettings=function(){return a.prototype.get.call(this,"jiraintegration/settings")},b.prototype.updateSubmitMode=function(b){return a.prototype.put.call(this,"jiraintegration/settings",b)},b.prototype.getProjectKeys=function(){return a.prototype.get.call(this,"jiraintegration/projectkeys")},b.prototype.getIssueTypes=function(b){return a.prototype.get.call(this,"jiraintegration/issuetypes/"+b)},b.prototype.getFieldMappings=function(b,c){return a.prototype.get.call(this,"jiraintegration/mappings/"+b+"/"+c)},b.prototype.updateFieldMappings=function(b){return a.prototype.put.call(this,"jiraintegration/mappings",b)},b.prototype.updateJiraCredentials=function(b){return a.prototype.put.call(this,"jiraintegration/credentials",b)},b.prototype.getJiraCredentialsStatus=function(){return a.prototype.get.call(this,"jiraintegration/credentials")},b.prototype.createJiraIssue=function(b){return a.prototype.post.call(this,"jiraintegration/cgpemit",b)},b.prototype.groupDefectReports=function(b){return a.prototype.post.call(this,"jiraintegration/group",b)},b}(c.ApiHandler),a("CloudGemDefectReporterApi",f)}}}),a.register("73",[],function(a,b){"use strict";var c,d;b&&b.id;return{setters:[],execute:function(){c=function(){function a(){}return a.getRandomInt=function(a,b){return a=Math.ceil(a),b=Math.floor(b),Math.floor(Math.random()*(b-a))+a},a}(),a("RandomUtil",c),d=function(){function a(){}return a.isFormFieldNotPositiveNum=function(a,b){return!a||a.controls[b].hasError("positiveNum")&&a.controls[b].touched},a.positiveNumberValidator=function(a){var b=Number(a.value);return!isNaN(b)&&b>0?null:{positiveNum:!0}},a}(),a("ValidationUtil",d)}}}),a.register("74",["6","7","9","a","70","3f"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),n=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},o=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(){function a(a,b,c){this.id=a,this.extension=b,this.url=c}return a}(),j=function(a){function b(b,c,d){return a.call(this,b,c,d)||this}return m(b,a),b}(i),a("TextAttachment",j),k=function(a){function b(b,c,d){return a.call(this,b,c,d)||this}return m(b,a),b}(i),a("ImageAttachment",k),l=function(){function a(a,b,d,e){var f=this;this.http=a,this.aws=b,this.toastr=d,this.metric=e,this.updateJiraMappings=new c.EventEmitter,this.isLoadingDefectDetails=!1,this.onShowDefectListPage=function(){f.toDefectListPageCallback&&f.toDefectListPageCallback()}}return a.prototype.ngOnInit=function(){this._apiHandler=new g.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.loadDefect()},a.prototype.loadDefect=function(){this.isLoadingDefectDetails=!0;for(var a=0,b=this.configurationMappings;a<b.length;a++){var c=b[a];c.value=void 0;for(var d=0,e=c.key.split(".");d<e.length;d++){var f=e[d];if(c.value=this.defect[f],!c.value)break}}this.rawDataKeys=Object.keys(this.defect),this.removePropertyNameFromRawDataKeys("prop"),this.removePropertyNameFromRawDataKeys("comments"),this.removePropertyNameFromRawDataKeys("bookmark"),this.removePropertyNameFromRawDataKeys("report_status"),this.getAttachments(),this.getComments(),"filed"===this.defect.jira_status&&this.getReportJiraIssueNumber()},a.prototype.getAttachments=function(){var a=this.defect.attachment_id?JSON.parse(this.defect.attachment_id):[];this.defect.imageAttachments=new Array,this.defect.textAttachments=new Array;for(var b=0,c=a;b<c.length;b++){var d=c[b];"txt"===d.extension?this.defect.textAttachments.push(new j(d.id,d.extension)):this.defect.imageAttachments.push(new k(d.id,d.extension))}},a.prototype.getComments=function(){var a=this;this._apiHandler.getReportComments(this.defect.universal_unique_identifier).subscribe(function(b){var c=JSON.parse(b.body.text());a.defect.comments=c.result.comments,a.isLoadingDefectDetails=!1},function(b){a.isLoadingDefectDetails=!1,a.toastr.error("Failed to get comments. "+b.message)})},a.prototype.removePropertyNameFromRawDataKeys=function(a){var b=this.rawDataKeys.indexOf(a);-1!==b&&this.rawDataKeys.splice(b,1)},a.prototype.getReportJiraIssueNumber=function(){var a=this;this._apiHandler.getReportHeaders().subscribe(function(b){for(var c=JSON.parse(b.body.text()),d=c.result,e=0,f=d;e<f.length;e++){var g=f[e];if(g.universal_unique_identifier===a.defect.universal_unique_identifier){a.defect.jira_status=g.jira_status;break}}})},n([c.Input(),o("design:type",Object)],a.prototype,"context",void 0),n([c.Input(),o("design:type",Function)],a.prototype,"toDefectListPageCallback",void 0),n([c.Input(),o("design:type",Object)],a.prototype,"isJiraIntegrationEnabled",void 0),n([c.Input(),o("design:type",Object)],a.prototype,"defect",void 0),n([c.Input(),o("design:type",Object)],a.prototype,"configurationMappings",void 0),n([c.Output(),o("design:type",Object)],a.prototype,"updateJiraMappings",void 0),a=n([c.Component({selector:"defect-details-page",template:'<facet-generator      [context]="context"      [tabs]="[\'Report Detail\', \'Raw Data\']"      [disableInheritedFacets]="true"     [metricIdentifier]="context.identifier"     (tabClicked)="tabIndex=$event"></facet-generator>  \x3c!-- Overview Tab --\x3e <div *ngIf="tabIndex === 0">     <defect-detail-overview-tab         [defect]="defect"         [isJiraIntegrationEnabled]="isJiraIntegrationEnabled"         [isLoading]="isLoadingDefectDetails"         [configurationMappings]="configurationMappings"         [toDefectListPageCallback]="toDefectListPageCallback"         [defectReporterApiHandler]="_apiHandler"         [context]="context"         (updateJiraMappings)="updateJiraMappings.emit()">     </defect-detail-overview-tab> </div>  \x3c!-- Raw Data Tab --\x3e <div *ngIf="tabIndex === 1">     <raw-data-tab [defect]="defect" [isLoading]="isLoadingDefectDetails" [rawDataKeys]="rawDataKeys"></raw-data-tab> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}.jira-issue-number{color:#6441A5;cursor:pointer}.create-jira-issue-window-container{height:500px;overflow:auto}.add-item{cursor:pointer} .jira-integration-settings{padding-left:0px}.reportData{padding:0}.update-jira-mappings-link{cursor:pointer;color:#6441A5}.object-field{border:1px solid #ccc;padding:10px;background-color:#eee;margin-bottom:5px}.add-array-item{cursor:pointer}.delete-icon{margin-right:5px;cursor:pointer}"]}),o("design:paramtypes",[d.Http,e.AwsService,h.ToastsManager,f.LyMetricService])],a)}(),a("CloudGemDefectReporterDefectDetailsPageComponent",l)}}}),a.register("75",["6","1c","3f","d"],function(a,b){"use strict";var c,d,e,f,g,h,i=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},j=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){!function(a){a[a.Show=0]="Show",a[a.CreateJiraTickets=1]="CreateJiraTickets"}(g||(g={})),a("DefectDatabaseMode",g),h=function(){function a(a){var b=this;this.toastr=a,this.updateJiraMappings=new c.EventEmitter,this.loadingSort=!1,this.numberOfRowsPerPage=10,this.tmpRows=[],this.partialInputQuery="",this.manualUpdate=!1,this.filteredRows=[],this.readStatusOption="",this.selectedRows=[],this.reportsToSubmit=[],this.currentReport={},this.currentGroupMapping={},this.selectedReportIndex=0,this.fillingError={},this.reportFields=[],this.onShowDefectDetailsPage=function(a){b.toDefectDetailsPageCallback&&b.toDefectDetailsPageCallback(a)},this.createJiraTicketsModal=function(){b.group=!(b.selectedRows.length<=1),setTimeout(function(){b.fillingError.message=null}),b.reportsToSubmit=[];for(var a=0;a<b.selectedRows.length;){var c=b.selectedRows[a];if("pending"!==c.jira_status)b.toastr.error("The selected report '"+c.universal_unique_identifier+"' has already been filed."),c.selected=!1,b.selectedRows.splice(a,1);else{for(var d={},e=0,f=Object.keys(c);e<f.length;e++){var h=f[e];try{d[h]={value:JSON.parse(c[h]),valid:!0,message:"Required field cannot be empty."}}catch(a){d[h]={value:c[h],valid:!0,message:"Required field cannot be empty."}}}b.reportsToSubmit.push(d),a++}}b.reportsToSubmit.length>0&&(b.selectedReportIndex=0,b.currentReport=b.reportsToSubmit[b.selectedReportIndex],b.mode=g.CreateJiraTickets),b.bulkActionsButton.nativeElement.click()},this.dismissModal=function(){b.mode=g.Show,b.currentGroupMapping={}}}return Object.defineProperty(a.prototype,"numberOfDefectsInGroup",{get:function(){return Object.keys(this.currentGroupMapping).length},enumerable:!0,configurable:!0}),a.prototype.ngOnInit=function(){this.metricQueryBuilder=new d.MetricQuery(this.aws,"defect"),this.Modes=g,this.fetchQueryFromInput(this.partialQuery,!1)},a.prototype.fetchQueryFromInput=function(a,b){this.partialInputQuery=a;var c=this.constructQuery(a);this.manualUpdate=b,this.fetch(c)},a.prototype.isDataAvailable=function(a){return this.filteredRows=this.filteredRows.slice(),this.allColumns.length>0&&a.length>0},a.prototype.getMaximumLimit=function(){return this.limit},a.prototype.updateFilteredRows=function(){var a=this;this.filteredRows=this.bookmark?this.rows.filter(function(a){return 1===a.bookmark}):this.rows,""!==this.readStatusOption&&("nojira"===this.readStatusOption?this.filteredRows=this.filteredRows.filter(function(a){return"pending"===a.jira_status}):this.filteredRows=this.filteredRows.filter(function(b){return b.report_status===a.readStatusOption}))},a.prototype.constructQuery=function(a,b,c){var d=!a,e=d?"WHERE p_event_name='defect' and p_server_timestamp_strftime >= date_format((current_timestamp - interval '7' day), '%Y%m%d%H0000')":"WHERE p_event_name='defect' and",f=d?"":a,g=b?"ORDER BY "+b:"",h=c||"",i=this.getMaximumLimit();return this.metricQueryBuilder.toString("SELECT * FROM ${database}.${table} "+e+" "+f+" "+g+" "+h+" LIMIT "+i)},a.prototype.postQuery=function(a){return this.metricApiHandler.postQuery(a)},a.prototype.fetch=function(a){var b=this;this.loading=!0,this.clearData(),this.postQuery(a).subscribe(function(a){b.populateData(a,!1)},function(a){b.toastr.error("Unable to fetch query. Error: ",a),b.clearData(),b.loading=!1})},a.prototype.onSort=function(a){var b=this,c=a.column.prop,d=a.sorts[0],e="desc"===d.dir?"DESC":"ASC";if(this.loadingSort=!0,"report_status"===c)return this.filteredRows.sort(function(a,b){var d="read"===a[c]?1:0,f="read"===b[c]?1:0;return d>f?"ASC"===e?1:-1:d<f?"ASC"===e?-1:1:0}),void(this.loadingSort=!1);var f=this.constructQuery(this.partialQuery,c,e);this.postQuery(f).subscribe(function(a){b.populateData(a,!0),b.loadingSort=!1},function(a){b.toastr.error("Unable to sort data. Error: ",a),b.clearData(),b.loadingSort=!1})},a.prototype.toggle=function(a){if(this.isSelected(a))this.columns=this.columns.filter(function(b){return b.name!==a.name});else{var b=this.allColumns.findIndex(function(b){return b.prop===a.prop});this.columns.splice(b,0,a),this.columns=this.columns.slice()}},a.prototype.isSelected=function(a){return this.columns.find(function(b){return b.name===a.name})},a.prototype.isInColumnSelectorView=function(a,b){if(a){return!!b.toLowerCase().includes(a.toLowerCase())}return!0},a.prototype.selectAllColumns=function(){this.columns=this.allColumns.slice(),this.columns=this.columns.slice()},a.prototype.clearSelections=function(){this.columns=[],this.columns=this.columns.slice()},a.prototype.onRowActivation=function(a){if("click"===a.type){var b=a.row;"bookmark"===a.column.prop?(b.bookmark=0===b.bookmark?1:0,this.saveReportHeader(b),this.updateFilteredRows()):"selected"!==a.column.prop&&this.onShowDefectDetailsPage(b)}},a.prototype.isSuccessfulQuery=function(a){return!(!a.Status||!a.Status.State)&&"SUCCEEDED"===a.Status.State},a.prototype.populateData=function(a,b){if(!this.isSuccessfulQuery(a))return-1!==a.Status.StateChangeReason.indexOf("not found")?this.toastr.error("No data is found in the database."):this.toastr.error("Unable to populate data. Check query format."),this.clearData(),void(this.loading=!1);this.manualUpdate&&this.onSuccessfulQuery();var c=a.Result.slice(0,1);c.length>0&&(this.reportFields=c[0]),b||(this.columns=[]),this.allColumns=[],this.addColumnObject("report_status",b);for(var d=0,e=c;d<e.length;d++)for(var f=e[d],g=0,h=f;g<h.length;g++){var i=h[g];this.addColumnObject(i,b)}this.tmpRows=[];for(var j=a.Result.slice(1,a.Result.length),k=function(a){var b={};a.forEach(function(a,d){var e=c[0][d];b[e]=a}),b.selected=!1,b.bookmark=0,b.prop=a,l.tmpRows.push(b)},l=this,m=0,n=j;m<n.length;m++){k(n[m])}this.updateReportHeaders()},a.prototype.onSuccessfulQuery=function(){var a=this,b={user_id:this.aws.context.authentication.user.username,query_params:this.partialInputQuery};this.defectReporterApiHandler.addNewSearch(b).subscribe(function(a){},function(b){a.toastr.error("Failed to save the search. ",b)})},a.prototype.updateReportHeaders=function(){var a=this;this.defectReporterApiHandler.getReportHeaders().subscribe(function(b){for(var c=JSON.parse(b.body.text()),d=c.result,e=[],f=0,g=d;f<g.length;f++){var h=g[f];e.push(h.universal_unique_identifier)}a.rows=[];for(var i=0,j=a.tmpRows;i<j.length;i++){var k=j[i],l=e.indexOf(k.universal_unique_identifier),m=-1===l?{bookmark:0,report_status:"unread",jira_status:"pending"}:d[l];a.mergeReportProperties(k,m),-1===l&&a.saveReportHeader(k)}a.updateFilteredRows(),a.loading=!1},function(b){a.loading=!1,a.toastr.error("Failed to update the addtional report information. "+b.message)})},a.prototype.saveReportHeader=function(a){var b=this,c={universal_unique_identifier:a.universal_unique_identifier,bookmark:a.bookmark,report_status:a.report_status};this.defectReporterApiHandler.updateReportHeader(c).subscribe(function(a){},function(a){b.toastr.error("Failed to update the report header. "+a.message)})},a.prototype.mergeReportProperties=function(a,b){for(var c=0,d=Object.keys(b);c<d.length;c++){var e=d[c];a[e]=JSON.parse(JSON.stringify(b[e]))}this.rows.push(a)},a.prototype.clearData=function(){this.columns=[],this.allColumns=[],this.rows=[],this.filteredRows=[]},a.prototype.addColumnObject=function(a,b){var c=a.toUpperCase(),d={};d.name=c,d.prop=a,d.sortable=!0,this.allColumns.push(d),b||this.columns.push(d)},a.prototype.updateSelectedRows=function(a){if(a.selected)this.selectedRows.push(a);else for(var b=0;b<this.selectedRows.length;++b){var c=this.selectedRows[b];if(c.universal_unique_identifier===a.universal_unique_identifier){this.selectedRows.splice(b,1);break}}},a.prototype.submitCreationRequest=function(){var a=this;if(setTimeout(function(){a.fillingError.message=null}),!this.createJiraIssueWindow.validateJiraFields())return void setTimeout(function(){a.fillingError.message="There is an error in one of the required fields."});for(var b=[],c=0;c<this.selectedRows.length;++c)b.push(this.createJiraIssueWindow.retriveReportData(this.reportsToSubmit[c],this.selectedRows[c]));var d={};this.group&&(d=this.createJiraIssueWindow.retriveReportData(this.currentGroupMapping));var e=this.group?{reports:b,groupContent:d}:b;this.createJiraIssueWindow.isLoadingJiraFieldMappings=!0,this.createJiraIssues(e).subscribe(function(b){a.modalRef.close();for(var c=0;c<a.selectedRows.length;++c)a.selectedRows[c].selected=!1,a.selectedRows[c].jira_status="filed";a.selectedRows=[],a.toastr.success("New Jira tickets were created successfully.")},function(b){a.createJiraIssueWindow.isLoadingJiraFieldMappings=!1;var c="Failed to create new Jira tickets. "+b.message;setTimeout(function(){a.fillingError.message="There is an error in one of the required fields.\n"+c}),a.toastr.error(c)})},a.prototype.createJiraIssues=function(a){return this.group?this.defectReporterApiHandler.groupDefectReports(a):this.defectReporterApiHandler.createJiraIssue(a)},a.prototype.updateSelectedReportIndex=function(){this.createJiraIssueWindow.validateJiraFields()&&(this.currentReport=this.reportsToSubmit[++this.selectedReportIndex])},a.prototype.updateJiraIntegrationSettings=function(){this.modalRef.close(),this.updateJiraMappings.emit()},a.prototype.closeCreateJiraIssueWindow=function(){this.modalRef.close(),this.dismissModal()},a.prototype.updateReportsToSubmitList=function(a){var b=this;setTimeout(function(){b.fillingError.message=null}),this.group?this.currentGroupMapping=a:this.reportsToSubmit[this.selectedReportIndex]=a},i([c.Input(),j("design:type",Object)],a.prototype,"aws",void 0),i([c.Input(),j("design:type",Object)],a.prototype,"metricApiHandler",void 0),i([c.Input(),j("design:type",Object)],a.prototype,"isJiraIntegrationEnabled",void 0),i([c.Input(),j("design:type",Object)],a.prototype,"defectReporterApiHandler",void 0),i([c.Input(),j("design:type",String)],a.prototype,"partialQuery",void 0),i([c.Input(),j("design:type",String)],a.prototype,"tableName",void 0),i([c.Input(),j("design:type",String)],a.prototype,"limit",void 0),i([c.Input(),j("design:type",Function)],a.prototype,"toDefectDetailsPageCallback",void 0),i([c.Input(),j("design:type",Boolean)],a.prototype,"bookmark",void 0),i([c.Output(),j("design:type",Object)],a.prototype,"updateJiraMappings",void 0),i([c.ViewChild(f.ModalComponent),j("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),i([c.ViewChild("CreateJiraIssueWindow"),j("design:type",Object)],a.prototype,"createJiraIssueWindow",void 0),i([c.ViewChild("BulkActionsButton"),j("design:type",Object)],a.prototype,"bulkActionsButton",void 0),a=i([c.Component({selector:"defect-datatable",template:'<div [ngSwitch]="loading">     <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>     <div *ngSwitchCase="false">         <div *ngIf="isDataAvailable(rows)" class="table-header">             \x3c!-- Column Selector --\x3e             <div ngbDropdown  placement="bottom-right">                 <button class="btn btn-outline-primary btn-columns column-selector" ngbDropdownToggle>                     <span>                         Columns                         <i class="fa fa-caret-down" aria-hidden="true"></i>                     </span>                 </button>                  <div class="dropdown-menu" ngbDropdownMenu (click)="$event.stopPropagation()">                     \x3c!-- Filter Input --\x3e                     <div>                         <input type="text" class="filter-input form-control" [(ngModel)]="columnFilterInput" placeholder="Search columns..." />                     </div>                      \x3c!-- Column Toggle Area --\x3e                     <div>                         <ul class="column-checkbox-area">                             <li *ngFor="let col of allColumns">                                 <div *ngIf="isInColumnSelectorView(columnFilterInput,col.name)" class="column-selector-checkbox">                                     <input                                         type="checkbox"                                         class="l-checkbox"                                         [id]="tableName + col.name"                                         (click)="toggle(col)"                                         [checked]="isSelected(col)" />                                     <label [attr.for]="tableName + col.name">{{col.name}}</label>                                 </div>                             </li>                         </ul>                     </div>                      \x3c!-- Full Column Toggle Operation Buttons --\x3e                     <div class="btn-group">                         <button type="button" class="btn btn-outline-primary btn-select full-column-toggle-operation-button" (click)="selectAllColumns()">Select All</button>                         <button type="button" class="btn btn-outline-primary btn-select full-column-toggle-operation-button" (click)="clearSelections()">Select None</button>                     </div>                 </div>             </div>             \x3c!-- Read Status Selector --\x3e             <div ngbDropdown placement="bottom-right">                 <button class="btn btn-outline-primary btn-columns status-selector" ngbDropdownToggle>                     <span>                         Status                         <i class="fa fa-caret-down" aria-hidden="true"></i>                     </span>                 </button>                  <div class="dropdown-menu" ngbDropdownMenu (click)="$event.stopPropagation()">                     \x3c!-- Read Status Toggle Area --\x3e                     <div>                         <ul class="read-status-radio-button-area">                             <li>                                 <div class="read-status-radio-button">                                     <label class="radio-btn-label selector-option">                                         <input type="radio" value="read" [(ngModel)]="readStatusOption" (ngModelChange)="updateFilteredRows()" [name]="tableName + \'read-status\'" />                                         <span></span> Read                                     </label>                                 </div>                                 <div class="read-status-radio-button">                                     <label class="radio-btn-label selector-option">                                         <input type="radio" value="unread" [(ngModel)]="readStatusOption" (ngModelChange)="updateFilteredRows()" [name]="tableName + \'read-status\'" />                                         <span></span> Unread                                     </label>                                 </div>                                 <div class="read-status-radio-button">                                     <label class="radio-btn-label selector-option">                                         <input type="radio" value="" [(ngModel)]="readStatusOption" (ngModelChange)="updateFilteredRows()" [name]="tableName + \'read-status\'" />                                         <span></span> All                                     </label>                                 </div>                                 <div *ngIf="isJiraIntegrationEnabled" class="read-status-radio-button">                                     <label class="radio-btn-label selector-option">                                         <input type="radio" value="nojira" [(ngModel)]="readStatusOption" (ngModelChange)="updateFilteredRows()" [name]="tableName + \'read-status\'" />                                         <span></span> No Jira                                     </label>                                 </div>                             </li>                         </ul>                     </div>                 </div>             </div>             \x3c!-- Bulk Actions Selector --\x3e             <div *ngIf="isJiraIntegrationEnabled" ngbDropdown placement="bottom-right">                 <button #BulkActionsButton [disabled]="selectedRows.length === 0" class="btn btn-outline-primary btn-columns bulk-actions-selector" ngbDropdownToggle>                     <span>                         Bulk Actions                         <i class="fa fa-caret-down" aria-hidden="true"></i>                     </span>                 </button>                 <div class="dropdown-menu" ngbDropdownMenu (click)="$event.stopPropagation()">                     \x3c!-- Bulk Actions Toggle Area --\x3e                     <div>                         <ul class="bulk-actions-area">                             <li class="bulk-action selector-option" (click)="createJiraTicketsModal()">                                 Create Jira Issue(s)                             </li>                         </ul>                     </div>                 </div>             </div>         </div>         <div>             <ngx-datatable                 class="material"                 [(rows)]="filteredRows"                 [columnMode]="\'force\'"                  [headerHeight]="50"                 [rowHeight]="50"                 [footerHeight]="50"                  [externalSorting]="true"                  [limit]="numberOfRowsPerPage"                  [loadingIndicator]="loadingSort"                 [scrollbarH]="true"                 (sort)="onSort($event)"                 (activate)="onRowActivation($event)">                  <ngx-datatable-column *ngIf="!bookmark" name="" [sortable]="false" prop="selected" width="50" maxWidth="50">                     <ng-template let-row="row" ngx-datatable-cell-template>                         <input type="checkbox" [id]="row.universal_unique_identifier" [name]="row.universal_unique_identifier" [(ngModel)]="row.selected" (ngModelChange)="updateSelectedRows(row)"/>                         <label class="l-checkbox row-selector" [attr.for]="row.universal_unique_identifier">                         </label>                     </ng-template>                 </ngx-datatable-column>                 <ngx-datatable-column name="" [sortable]="false" prop="bookmark" width="40" maxWidth="40">                     <ng-template let-row="row" let-value="value" ngx-datatable-cell-template>                         <i *ngIf="value === 0" class="fa fa-bookmark-o" data-toggle="tooltip" data-placement="top" title="Not Bookmarked"></i>                         <i *ngIf="value !== 0" class="fa fa-bookmark" data-toggle="tooltip" data-placement="top" title="Bookmarked"></i>                     </ng-template>                 </ngx-datatable-column>                 <ngx-datatable-column name="" [sortable]="false" prop="jira_status" width="40" maxWidth="40">                     <ng-template let-row="row" let-value="value" ngx-datatable-cell-template>                         <i *ngIf="value !== \'pending\'" class="fa fa-ravelry" data-toggle="tooltip" data-placement="top" title="Jira ticket filed."></i>                     </ng-template>                 </ngx-datatable-column>                 <ng-container *ngIf="isDataAvailable(filteredRows)">                     <ngx-datatable-column *ngFor="let column of columns" [name]="column.name" [sortable]="column.sortable" [prop]="column.prop"></ngx-datatable-column>                 </ng-container>             </ngx-datatable>         </div>     </div> </div>  \x3c!-- CreateJiraTickets modal --\x3e <modal *ngIf="mode == Modes.CreateJiraTickets"        [title]="\'Create Jira Ticket(s)\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="(selectedReportIndex === (reportsToSubmit.length - 1) || group) ? \'Create\' : \'Next\'"        (modalSubmitted)="(selectedReportIndex === (reportsToSubmit.length - 1) || group) ? submitCreationRequest() : updateSelectedReportIndex()">     <div class="modal-body create-jira-issue-window-container">                 <div *ngIf="numberOfDefectsInGroup > 1" class="form-group row">             <ng-template #tooltipContent>Grouped defect reports will generate all the Jira issues using one Jira mapping.<br>Individual reports will generate an issue for each defect report using its own Jira mapping.</ng-template>             <label class="col-3">                 Report Grouping                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" [ngbTooltip]="tooltipContent"></i>             </label>             <div class="col-9 group-options">                 <label class="radio-btn-label">                     <input type="radio" [value]="true" name="report-grouping" [(ngModel)]="group" />                     <span></span> Group -  Use one Jira mapping for all defect reports                 </label>                 <label class="radio-btn-label">                     <input type="radio" [value]="false" name="report-grouping" [(ngModel)]="group" />                     <span></span> Individual - Generate a unique Jira issue for each defect report                 </label>             </div>         </div>         <div *ngIf="fillingError[\'message\'] " class="alert alert-danger">{{fillingError[\'message\']}}</div>         <create-jira-issue-window #CreateJiraIssueWindow             [defectReporterApiHandler]="defectReporterApiHandler"             [(defectReport)]="currentReport"             [(defectGroupMapping)]="currentGroupMapping"             (defectChange)="updateReportsToSubmitList($event)"             [groupMode]="group"             (updateJiraMappings)="updateJiraIntegrationSettings()"             (validationFailed)="closeCreateJiraIssueWindow()">         </create-jira-issue-window>     </div> </modal>',styles:['.dropdown-menu{max-height:400px;z-index:100;overflow-y:hidden}.dropdown-toggle::after{display:none}.btn-columns{margin:10px}.column-selector-checkbox,.read-status-radio-button{margin:5px 10px 5px 10px}.filter-input{margin:10px;width:90%}.table-header{display:-ms-inline-flexbox;display:inline-flex}.reports-counter{padding-top:15px}.column-selector,.status-selector,.bulk-actions-selector{margin-left:0}.bulk-action:hover{color:#fff;background-color:#6441A5}.bulk-action{padding:5px 10px 5px 10px;margin-bottom:0px}.column-checkbox-area{max-height:200px;overflow-y:auto}.read-status-radio-button-area,.bulk-actions-area{max-height:200px;margin-bottom:0px}.ngx-datatable.material{box-shadow:0 0 0 0}::ng-deep .datatable-body-row{cursor:pointer}.selector-option{font-family:"AmazonEmber-Light";font-size:14px}.row-selector{margin-bottom:20px}.group-options{padding-left:0px}.create-jira-issue-window-container{height:500px;overflow:auto}.full-column-toggle-operation-button{margin-right:10px} .jira-integration-settings{padding-left:0px}.reportData{padding:0}.update-jira-mappings-link{cursor:pointer;color:#6441A5}.object-field{border:1px solid #ccc;padding:10px;background-color:#eee;margin-bottom:5px}.add-array-item{cursor:pointer}.delete-icon{margin-right:5px;cursor:pointer}']}),j("design:paramtypes",[e.ToastsManager])],a)}(),a("CloudGemDefectReproterDefectDatatableComponent",h)}}}),a.register("76",["6","7","9","3f","a","70","77"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){j=function(){function a(a,b,c,d,e){this.http=a,this.aws=b,this.metric=c,this.toastr=d,this.route=e,this.columns=[],this.allColumns=[],this.tabIndex=0,this.partialInputQuery="",this.tableHeaders=[]}return a.prototype.ngOnInit=function(){var a=this;this._apiHandler=new h.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.route.queryParams.subscribe(function(b){a.partialInputQuery=b.params?b.params:a.partialInputQuery}),this.initializeConfigurationMappings()},a.prototype.getSubNavItem=function(a){this.tabIndex=a},a.prototype.getMetricApiHandler=function(){return this.metricApiHandler},a.prototype.getDefectReporterApiHandler=function(){return this._apiHandler},a.prototype.runRecentSearch=function(a){this.partialInputQuery="*"==a?"":a,this.defectListOverviewTab.partialInputQuery=this.partialInputQuery,this.facetgenerator.emitActiveTab(0),this.defectListOverviewTab.searchButton.nativeElement.click()},a.prototype.updateJiraMappings=function(){this.facetgenerator.emitActiveTab(6)},a.prototype.initializeConfigurationMappings=function(){var a=localStorage.getItem("configurationMappings");this.configurationMappings=a?JSON.parse(a):[{key:"report_status",displayName:"Status",category:"Report Information"},{key:"client_timestamp",displayName:"Time",category:"Report Information"},{key:"p_event_source",displayName:"Source",category:"Report Information"},{key:"p_event_name",displayName:"Category",category:"Report Information"},{key:"universal_unique_identifier",displayName:"Report ID",category:"Report Information"},{key:"annotation",displayName:"Player text",category:"Report Information"},{key:"unique_user_identifier",displayName:"Player ID",category:"Player Information"},{key:"locale",displayName:"Locale",category:"Player Information"},{key:"client_ip_address",displayName:"IP address",category:"Player Information"},{key:"p_client_build_identifier",displayName:"Build Version",category:"System Information"},{key:"platform_identifier",displayName:"Platform",category:"System Information"}]},k([c.Input(),l("design:type",Object)],a.prototype,"context",void 0),k([c.Input(),l("design:type",Object)],a.prototype,"metricApiHandler",void 0),k([c.Input(),l("design:type",Object)],a.prototype,"isJiraIntegrationEnabled",void 0),k([c.Input(),l("design:type",Function)],a.prototype,"toDefectDetailsPageCallback",void 0),k([c.ViewChild("defectListOverviewTab"),l("design:type",Object)],a.prototype,"defectListOverviewTab",void 0),k([c.ViewChild("bookmarktable"),l("design:type",Object)],a.prototype,"bookmarktable",void 0),k([c.ViewChild("facetgenerator"),l("design:type",Object)],a.prototype,"facetgenerator",void 0),a=k([c.Component({selector:"defect-list-page",template:'<facet-generator #facetgenerator     [context]="context"      [tabs]="isJiraIntegrationEnabled ? [\'Overview\', \'Dashboard\', \'Bookmarks\', \'Recent Searches\', \'Data Mappings\', \'Client Configuration\', \'Jira Integration\'] : [\'Overview\', \'Dashboard\', \'Bookmarks\', \'Recent Searches\', \'Data Mappings\', \'Client Configuration\']"      [metricIdentifier]="context.identifier"         (tabClicked)="getSubNavItem($event)"></facet-generator>  \x3c!-- Overview Facet --\x3e <div [ngClass]="{\'hide-element\': (tabIndex !== 0)}">         <defect-list-overview-tab #defectListOverviewTab             [isJiraIntegrationEnabled]="isJiraIntegrationEnabled"             [metricApiHandler]="getMetricApiHandler()"             [defectReporterApiHandler]="getDefectReporterApiHandler()"             [toDefectDetailsPageCallback]="toDefectDetailsPageCallback"             (updateJiraMappings)="updateJiraMappings()"             [partialInputQuery]="partialInputQuery">         </defect-list-overview-tab> </div>  \x3c!-- Dashboard Facet --\x3e <div *ngIf="tabIndex === 1">     <dashboard-tab [metricApiHandler]="getMetricApiHandler()"></dashboard-tab> </div>  \x3c!-- Bookmarks Facet --\x3e <div *ngIf="tabIndex === 2">     <defect-datatable #bookmarktable         [aws]="aws"         [metricApiHandler]="getMetricApiHandler()"         [defectReporterApiHandler]="getDefectReporterApiHandler()"         [partialQuery]="\'\'"         [tableName]="\'bookmark\'"         [limit]="\'ALL\'"         [toDefectDetailsPageCallback]="toDefectDetailsPageCallback"         [bookmark]="true">     </defect-datatable>   </div>  \x3c!-- Recent Searches Facet --\x3e <div *ngIf="tabIndex === 3">     <recent-searches-tab [defectReporterApiHandler]="getDefectReporterApiHandler()" (runRecentSearch)="runRecentSearch($event)"></recent-searches-tab> </div>  \x3c!-- Report Configure Facet --\x3e <div *ngIf="tabIndex === 4">     <report-configuration [(mappings)]="configurationMappings"></report-configuration> </div>  \x3c!-- Client Configure Facet --\x3e <div *ngIf="tabIndex === 5">     <client-configuration [context]="context"></client-configuration> </div>  \x3c!-- Jira Integration Facet --\x3e <div *ngIf="isJiraIntegrationEnabled && tabIndex === 6">     <jira-integration [context]="context" [isLoadingReportFields]="defectListOverviewTab.datatable.loading" [reportFields]="defectListOverviewTab.datatable.reportFields"></jira-integration> </div>',styles:["  .searchForm > input {     width: 75%;     float: left;     margin: 0 10px 0 0; }  .dropdown-menu {     max-height: 400px;     overflow-y: auto;     z-index: 100; }  .dropdown-toggle::after {     display: none; }  .hide-element {     display: none; }"]}),l("design:paramtypes",[d.Http,e.AwsService,g.LyMetricService,f.ToastsManager,i.ActivatedRoute])],a)}(),a("CloudGemDefectReporterDefectListPageComponent",j)}}}),a.register("78",["6","a","9","3f"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},i=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(a,b,d){this.aws=a,this.toastr=b,this.metric=d,this.deleteComment=new c.EventEmitter,this.editComment=new c.EventEmitter,this.viewJiraIssue=new c.EventEmitter}return a.prototype.ngOnInit=function(){this.reportInformation.report_time=this.reportInformation.p_server_timestamp_month+"/"+this.reportInformation.p_server_timestamp_day+"/"+this.reportInformation.p_server_timestamp_year+this.reportInformation.p_server_timestamp_hour+":00:00",this.getScreenshotUrl()},a.prototype.getScreenshotUrl=function(){var a=this;this.reportInformation.imageAttachments.map(function(b){var c=b.id,d=a.aws.context.s3.getSignedUrl("getObject",{Bucket:a.context.SanitizedBucketName,Key:c,Expires:600});b.url=d}),this.reportInformation.textAttachments.map(function(b){var c=b.id,d=a.aws.context.s3.getSignedUrl("getObject",{Bucket:a.context.SanitizedBucketName,Key:c,Expires:600});b.url=d})},a.prototype.downloadAttachment=function(a){this.aws.context.s3.getObject({Bucket:this.context.SanitizedBucketName,Key:a.id},function(b,c){if(b)this.toastr.error("The attachment failed to download. The received error was '"+b.message+"'");else{var d=new Blob([c.Body],{type:c.ContentType});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(d,a.id+"."+a.extension);else{var e=document.createElement("a"),f=URL.createObjectURL(d);e.href=f,e.download=a.id+"."+a.extension,window.document.body.appendChild(e),e.click(),window.document.body.removeChild(e),URL.revokeObjectURL(f)}}}.bind(this))},h([c.Input(),i("design:type",Object)],a.prototype,"context",void 0),h([c.Input(),i("design:type",Object)],a.prototype,"reportInformation",void 0),h([c.Input(),i("design:type",Object)],a.prototype,"configurationMappings",void 0),h([c.Output(),i("design:type",Object)],a.prototype,"deleteComment",void 0),h([c.Output(),i("design:type",Object)],a.prototype,"editComment",void 0),h([c.Output(),i("design:type",Object)],a.prototype,"viewJiraIssue",void 0),a=h([c.Component({selector:"report-information",template:'<h2 class="header">Report Information</h2> <div *ngIf="reportInformation.jira_status && reportInformation.jira_status != \'pending\'" class="row">     <label class="col-5 affix">Jira Issue</label>     <div class="col-7 jira-issue-number" (click)="viewJiraIssue.emit()">         <p>{{reportInformation.jira_status}}</p>     </div> </div> <div *ngFor="let mapping of configurationMappings">     <div *ngIf="mapping[\'category\'] === \'Report Information\' && reportInformation[mapping[\'key\']]" class="row">         <label class="col-5 affix">{{mapping[\'displayName\']}}</label>         <div class="col-7">             <p>{{mapping[\'value\']}}</p>         </div>     </div> </div> <div *ngIf="reportInformation.textAttachments.length > 0" class="row">     <label class="col-5 affix"> Text Uploads </label>     <ng-container *ngFor="let attachment of reportInformation.textAttachments; first as isFirst">         <div class="col-5" *ngIf="!isFirst"></div>         <div class="col-7">             <label class="download-link" (click)="downloadAttachment(attachment)">{{attachment.id}}.{{attachment.extension}}</label>         </div>     </ng-container> </div> <div *ngIf="reportInformation.imageAttachments.length > 0" class="row">     <label class="col-5 affix"> Image Uploads </label>     <ng-container *ngFor="let attachment of reportInformation.imageAttachments; first as isFirst" >         <div class="col-5" *ngIf="!isFirst"></div>         <div class="col-7">             <label class="download-link" (click)="downloadAttachment(attachment)">{{attachment.id}}.{{attachment.extension}}</label>             <img [src]="attachment.url" alt="Report screenshot">         </div>     </ng-container> </div> <div *ngIf="reportInformation.dxdiag_attachment" class="row">     <label class="col-5 affix">DxDiag</label>     <div class="col-7">         <label class="download-link" (click)="downloadAttachment(reportInformation.dxdiag_attachment)">{{reportInformation.dxdiag_attachment.id}}.{{reportInformation.dxdiag_attachment.extension}}</label>     </div> </div> <div *ngIf="reportInformation.log_attachment" class="row">     <label class="col-5 affix">Game log</label>     <div class="col-7">         <label class="download-link" (click)="downloadAttachment(reportInformation.log_attachment)">{{reportInformation.log_attachment.id}}.{{reportInformation.log_attachment.extension}}</label>     </div> </div> <div *ngIf="reportInformation.comments" class="row">     <label class="col-5 affix">Comments</label>     <div class="col-7">         <p *ngFor="let comment of reportInformation.comments let i = index">             {{comment.user}} - {{comment.date}} <br />             {{comment.content}}             <i class="fa fa-cog edit" data-toggle="tooltip" data-placement="top" title="Edit comment" (click)="editComment.emit(i)" ></i>             <i class="fa fa-trash" data-toggle="tooltip" data-placement="top" title="Delete comment" (click)="deleteComment.emit(i)"></i>         </p>     </div> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}.jira-issue-number{color:#6441A5;cursor:pointer}.create-jira-issue-window-container{height:500px;overflow:auto}.add-item{cursor:pointer}"]}),i("design:paramtypes",[e.AwsService,f.ToastsManager,d.LyMetricService])],a)}(),a("CloudGemDefectReporterReportInformationComponent",g)}}}),a.register("79",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a}return f([c.Input(),g("design:type",Object)],a.prototype,"playerInformation",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"configurationMappings",void 0),a=f([c.Component({selector:"player-information",template:'<h2 class="header">Player Information</h2> <div *ngFor="let mapping of configurationMappings">     <div *ngIf="mapping[\'category\'] === \'Player Information\' && playerInformation[mapping[\'key\']]" class="row">         <label class="col-5 affix">{{mapping[\'displayName\']}}</label>         <div class="col-7">             <p>{{mapping[\'value\']}}</p>         </div>     </div> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}.jira-issue-number{color:#6441A5;cursor:pointer}.create-jira-issue-window-container{height:500px;overflow:auto}.add-item{cursor:pointer}"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterPlayerInformationComponent",e)}}}),a.register("7a",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a}return f([c.Input(),g("design:type",Object)],a.prototype,"systemInformation",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"configurationMappings",void 0),a=f([c.Component({selector:"system-information",template:'<h2 class="header">System Information</h2> <div *ngFor="let mapping of configurationMappings">     <div *ngIf="mapping[\'category\'] === \'System Information\' && systemInformation[mapping[\'key\']]" class="row">         <label class="col-5 affix">{{mapping[\'displayName\']}}</label>         <div class="col-7">             <p>{{mapping[\'value\']}}</p>         </div>     </div> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}.jira-issue-number{color:#6441A5;cursor:pointer}.create-jira-issue-window-container{height:500px;overflow:auto}.add-item{cursor:pointer}"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterSystemInformationComponent",e)}}}),a.register("7b",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a,this.mappingsChange=new c.EventEmitter,this.displayCategories=["Report Information","Player Information","System Information"]}return a.prototype.ngOnInit=function(){this.tableDropdownOptions=new Array;for(var a=0,b=this.displayCategories;a<b.length;a++){var c=b[a];this.tableDropdownOptions.push({text:c})}},a.prototype.addNewMapping=function(){var a={key:"",displayName:"",category:""};this.mappings.unshift(a),this.mappingsChange.emit(this.mappings),this.updateMappings()},a.prototype.deleteMapping=function(a){this.mappings.splice(a,1),this.updateMappings()},a.prototype.updateCategory=function(a,b){b.category=a.text,this.updateMappings()},a.prototype.updateMappings=function(){this.mappingsChange.emit(this.mappings),window.localStorage.setItem("configurationMappings",JSON.stringify(this.mappings))},f([c.Input(),g("design:type",Object)],a.prototype,"mappings",void 0),f([c.Output(),g("design:type",Object)],a.prototype,"mappingsChange",void 0),a=f([c.Component({selector:"report-configuration",template:'<p>Use the data mappings to harmonize labels on detailed defect reports. Configurations are saved locally and will not appear in other browsers or affect other users</p> <h2>Data Mappings</h2> <button class="btn l-primary" (click)="addNewMapping()">     Add Mapping </button> <div class="configuration-container">     <div class="row mapping">         <div class="col-3">             <label>KEY</label>             <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" ngbTooltip="Key represents the raw data columns."></i>         </div>         <div class="col-3">             <label>DISPLAY NAME</label>             <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" ngbTooltip="Display name represents how the raw data will appear on the detailed report."></i>         </div>         <div class="col-3">             <label>DISPLAY CATEGORY</label>             <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" ngbTooltip="Display category represents which section the data will appear in on the detailed report."></i>         </div>     </div>     <div *ngFor="let mapping of mappings let i = index" class="row mapping">         <div class="col-3">             <input class="form-control" type="text" [(ngModel)]="mapping[\'key\']" (ngModelChange)="updateMappings()"/>         </div>         <div class="col-3">             <input class="form-control" type="text" [(ngModel)]="mapping[\'displayName\']" (ngModelChange)="updateMappings()"/>         </div>         <div class="col-3">             <dropdown class="display-category" placeholderText="Category" [width]="150" [currentOption]="{text: mapping[\'category\']}" (dropdownChanged)="updateCategory($event, mapping)"                       [options]="tableDropdownOptions"></dropdown>             <i (click)="deleteMapping(i)" class="fa fa-trash-o trash-can" data-toggle="tooltip" data-placement="top" title="Delete"></i>         </div>     </div> </div>',styles:[".configuration-container {     padding-top: 15px; }  .mapping {     padding-bottom: 5px; }  .display-category {     padding-left: 0px; }  .trash-can{     padding-left: 20px; }"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterReportConfigurationComponent",e)}}}),a.register("7c",["6","7","9","d","c","a","1b","70"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},n=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a}],execute:function(){!function(a){a[a.List=0]="List",a[a.CreateField=1]="CreateField",a[a.EditField=2]="EditField",a[a.DeleteField=3]="DeleteField"}(k||(k={})),l=function(){function a(a,b,c,d,e,f){var g=this;this.fb=a,this.http=b,this.aws=c,this.toastr=d,this.vcr=e,this.metric=f,this.EditMode=k,this.isFormFieldNotPositiveNum=j.ValidationUtil.isFormFieldNotPositiveNum,this.customFields=[],this.curFields=[],this.fieldTypes=[{typeinfo:{type:"predefined",multipleSelect:!0},displayText:"Multiple Choice (Checkboxes)"},{typeinfo:{type:"predefined",multipleSelect:!1},displayText:"Single Choice (Radio Buttons)"},{typeinfo:{type:"text"},displayText:"Text"},{typeinfo:{type:"object"},displayText:"Object"}],this.duplicate=function(a){for(var b=0,c=g.curFields;b<c.length;b++){var d=c[b];if(g.curEditingField.title!==d.title&&d.title===a.value)return{duplicate:!0}}return null},this.onDeleteFieldModal=function(a,b,c){g.curFields=a,g.curFieldIndex=c,g.curEditingField=b,g.editMode=k.DeleteField},this.onDismissModal=function(){g.editMode=k.List},this.onAddNewFieldModal=function(a){g.curEditingField=g.createDefaultField(),g.curFields=a,g.createFieldForms(),g.editMode=k.CreateField},this.getModalName=function(){return g.editMode==k.EditField?"Edit Field":g.editMode==k.CreateField?"Add New Field":g.editMode==k.DeleteField?"Delete Field":void 0},this.getSubmitButtonText=function(){return g.editMode==k.EditField?"Save Changes":g.editMode==k.CreateField?"Add Field":g.editMode==k.DeleteField?"Delete Field":void 0},this.onModalSubmit=function(){g.editMode==k.EditField?g.onModifyField():g.editMode==k.CreateField?g.onAddField():g.editMode==k.DeleteField&&g.onDeleteField()}}return a.prototype.ngOnInit=function(){this._apiHandler=new j.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.getClientConfiguration(),this.editMode=k.List},a.prototype.getClientConfiguration=function(){var a=this;this.isLoadingClientConfiguration=!0,this._apiHandler.getClientConfiguration().subscribe(function(b){var c=JSON.parse(b.body.text());a.customFields=c.result.clientConfiguration;for(var d=0,e=a.customFields;d<e.length;d++){var f=e[d];a.deserializeCustomFieldDefaultValue(f)}a.isLoadingClientConfiguration=!1},function(b){a.toastr.error("Failed to load the custom client configuration ",b),a.isLoadingClientConfiguration=!1})},a.prototype.deserializeCustomFieldDefaultValue=function(a){if("predefined"===a.type&&a.multipleSelect)a.defaultValue=JSON.parse(a.defaultValue);else if("object"===a.type){for(var b=0,c=a.properties;b<c.length;b++){var d=c[b];this.deserializeCustomFieldDefaultValue(d)}a.defaultValue=JSON.parse(a.defaultValue)}},a.prototype.createFieldForms=function(){this.createFieldTitleForm(),this.createPredefinedFieldForm(),this.createTextFieldForm()},a.prototype.createFieldTitleForm=function(){this.fieldTitleForm=this.fb.group({title:[this.curEditingField.title,i.Validators.compose([i.Validators.required,this.duplicate])]})},a.prototype.createPredefinedFieldForm=function(){if(this.predefinedFieldForm=this.fb.group({options:this.fb.array([])}),this.curEditingField.predefines)for(var a=this.predefinedFieldForm.controls.options,b=0,c=this.curEditingField.predefines;b<c.length;b++){var d=c[b],e=this.fb.group({value:[d,i.Validators.compose([i.Validators.required])]});a.push(e)}},a.prototype.createTextFieldForm=function(){this.textFieldForm=this.fb.group({maxChars:[this.curEditingField.maxChars,i.Validators.compose([i.Validators.required,j.ValidationUtil.positiveNumberValidator])]})},a.prototype.createDefaultField=function(){var a={};return a.type="predefined",a.multipleSelect=!0,a.predefines=[""],a},a.prototype.onChangeFieldType=function(a){this.curEditingField.type=a.typeinfo.type,"predefined"==this.curEditingField.type&&(this.curEditingField.multipleSelect=a.typeinfo.multipleSelect)},a.prototype.isFormFieldRequiredEmpty=function(a,b){return a.controls[b].hasError("required")&&a.controls[b].touched},a.prototype.isFormFieldTitleDuplicate=function(a,b){return a.controls[b].hasError("duplicate")&&a.controls[b].touched},a.prototype.isFormFieldNotValid=function(a,b){return!a.controls[b].valid&&a.controls[b].touched},a.prototype.onAddOption=function(){this.predefinedFieldForm.controls.options.push(this.fb.group({value:[null,i.Validators.compose([i.Validators.required])]}))},a.prototype.onDeleteOption=function(a){this.predefinedFieldForm.controls.options.removeAt(a)},a.prototype.onModifyField=function(){this.validateFieldForms()&&(this.extractFieldForm(),"object"===this.curEditingField.type?this.curEditingField.properties=[]:this.curEditingField.properties&&delete this.curEditingField.properties,delete this.curEditingField.defaultValue,this.curFields[this.curFieldIndex]=this.curEditingField,this.modalRef.close())},a.prototype.onAddField=function(){this.validateFieldForms()&&(this.extractFieldForm(),"object"===this.curEditingField.type&&(this.curEditingField.properties=[]),this.curFields.push(this.curEditingField),this.modalRef.close())},a.prototype.updateClientConfiguration=function(){for(var a=this,b=JSON.parse(JSON.stringify(this.customFields)),c=0,d=b;c<d.length;c++){var e=d[c];this.serializeCustomFieldDefaultValue(e)}var f={clientConfiguration:b};this._apiHandler.updateClientConfiguration(f).subscribe(function(b){a.toastr.success("The client configuration was saved successfully.")},function(b){a.toastr.error("Failed to update the client configuration. ",b)})},a.prototype.serializeCustomFieldDefaultValue=function(a){if("predefined"===a.type&&a.multipleSelect){for(var b=[],c=0;c<a.defaultValue.length;c++)a.defaultValue[c]&&b.push(a.predefines[c]);a.defaultValue=JSON.stringify(b)}else if("object"===a.type){for(var d=0,e=a.properties;d<e.length;d++){var f=e[d];this.serializeCustomFieldDefaultValue(f),"predefined"===f.type&&f.multipleSelect?a.defaultValue[f.title]=JSON.parse(f.defaultValue):a.defaultValue[f.title]=f.defaultValue}a.defaultValue=JSON.stringify(a.defaultValue)}},a.prototype.validateFieldForms=function(){var a=!0;switch(a=this.validateTitleFieldForm()&&a,this.curEditingField.type){case"predefined":a=this.validatePredefinedFieldForm()&&a;break;case"text":a=this.validateTextFieldForm()&&a}return a},a.prototype.validateTitleFieldForm=function(){return this.fieldTitleForm.controls.title.markAsTouched(),this.fieldTitleForm.controls.title.valid},a.prototype.validateTextFieldForm=function(){return this.textFieldForm.controls.maxChars.markAsTouched(),this.textFieldForm.controls.maxChars.valid},a.prototype.validatePredefinedFieldForm=function(){for(var a=!0,b=this.predefinedFieldForm.controls.options,c=0,d=b.controls;c<d.length;c++){var e=d[c],f=e;f.controls.value.markAsTouched(),a=a&&f.controls.value.valid}return a},a.prototype.extractFieldForm=function(){switch(this.curEditingField.title=this.fieldTitleForm.value.title,this.curEditingField.type){case"predefined":for(var a=[],b=this.predefinedFieldForm.controls.options,c=0,d=b.controls;c<d.length;c++){var e=d[c];a.push(e.value.value)}this.curEditingField.predefines=a;break;case"text":this.curEditingField.maxChars=+this.textFieldForm.value.maxChars}},a.prototype.getFieldTypeDisplayText=function(){switch(this.curEditingField.type){case"text":return"Text";case"object":return"Object";case"predefined":return this.curEditingField.multipleSelect?"Multiple Choice (Checkboxes)":"Single Choice (Radio Buttons)";default:return"unknown"}},a.prototype.onDeleteField=function(){this.curFields.splice(this.curFieldIndex,1),this.modalRef.close()},a.prototype.onModifyFieldModal=function(a,b,c){this.curFields=a,this.curEditingField=JSON.parse(JSON.stringify(b)),this.createFieldForms(),this.editMode=k.EditField,this.curFieldIndex=c},m([c.Input(),n("design:type",Object)],a.prototype,"context",void 0),m([c.ViewChild(f.ModalComponent),n("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),a=m([c.Component({selector:"client-configuration",template:'<p>Define your custom defect report field</p> <button class="btn l-primary add-button" (click)="onAddNewFieldModal(customFields)">     Add New Field </button> <button class="btn btn-outline-primary add-button" (click)="updateClientConfiguration()">     Save Configuration </button> <div [ngSwitch]="isLoadingClientConfiguration">     <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>     <div class="content-container" *ngSwitchCase="false">         <div *ngFor="let field of customFields; let fieldIndex = index">             <client-configuration-field                  [field]="field"                 [fieldIdPrefix]="\'\'"                 [isObjectProperty]="false"                 (addNewProperty)="onAddNewFieldModal(field[\'properties\'])"                 (showModifyField)="onModifyFieldModal(customFields, field, fieldIndex)"                 (showDeleteField)="onDeleteFieldModal(customFields, field, fieldIndex)">                 <div class="fields" *ngIf="field.type === \'object\'">                     <div *ngFor="let property of field.properties; let propertyIndex = index">                         <client-configuration-field                                  [field]="property"                                 [fieldIdPrefix]="field[\'title\']"                                 [isObjectProperty]="true"                                 (showModifyField)="onModifyFieldModal(field.properties, property, propertyIndex)"                                 (showDeleteField)="onDeleteFieldModal(field.properties, property, propertyIndex)">                         </client-configuration-field>                     </div>                 </div>             </client-configuration-field>         </div>     </div> </div>  <modal *ngIf="editMode === EditMode.EditField || editMode === EditMode.CreateField"         [title]="getModalName()"         [autoOpen]="true"         [hasSubmit]="true"         [submitButtonText]="getSubmitButtonText()"         [onDismiss]="onDismissModal"         [onClose]="onDismissModal"         (modalSubmitted)="onModalSubmit()">     <div class="modal-body">         <div class="form-group row">             <label class="col-form-label col-3">                 Field Type             </label>             <div class="d-inline-block dropdown-outer col-8 field-type-dropdown" ngbDropdown>                 <button type="button" class="btn l-dropdown col-12" id="path-dropdown" ngbDropdownToggle>                     <span class="dropdown-inner"> {{getFieldTypeDisplayText()}} </span>                     <i class="fa fa-caret-down" aria-hidden="true"></i>                 </button>                 <div class="dropdown-menu dropdown-menu-center" aria-labelledby="path-dropdown">                     <div *ngFor="let fieldType of fieldTypes">                         <button *ngIf="curFields === customFields || fieldType.displayText !== \'Object\' " type="button" class="dropdown-item" (click)="onChangeFieldType(fieldType)"> {{fieldType.displayText}} </button>                     </div>                 </div>             </div>         </div>          <form [formGroup]="fieldTitleForm">             <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(fieldTitleForm, \'title\')}">                 <label class="col-form-label col-3" for="title">                     Title                 </label>                 <input class="form-control col-8" id="title" type="text" [formControl]="fieldTitleForm.controls[\'title\']"                         [ngClass]="{\'form-control-danger\': isFormFieldNotValid(fieldTitleForm, \'title\')}" />                  <span class="col-3"></span>                 <div *ngIf="isFormFieldRequiredEmpty(fieldTitleForm, \'title\')" class="form-control-feedback col-8">Title cannot be empty</div>                 <div *ngIf="isFormFieldTitleDuplicate(fieldTitleForm, \'title\')" class="form-control-feedback col-8">Title already exists</div>             </div>         </form>          <ng-container *ngIf="curEditingField.type === \'text\'">             <form [formGroup]="textFieldForm">                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(textFieldForm, \'maxChars\')}">                     <label class="col-form-label col-3" for="maxChars">                         Character Limit                     </label>                     <input class="form-control col-8" id="maxChars" [formControl]="textFieldForm.controls[\'maxChars\']"                             [ngClass]="{\'form-control-danger\': isFormFieldNotValid(textFieldForm, \'maxChars\')}" />                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(textFieldForm, \'maxChars\')" class="form-control-feedback col-8">Character Limit cannot be emtpy</div>                     <div *ngIf="!isFormFieldRequiredEmpty(textFieldForm, \'maxChars\') &&                          isFormFieldNotPositiveNum(textFieldForm, \'maxChars\')" class="form-control-feedback col-8">                         Invalid number                     </div>                 </div>             </form>         </ng-container>          <ng-container *ngIf="curEditingField.type === \'predefined\'">             <div *ngFor="let optionForm of predefinedFieldForm.controls[\'options\'].controls; let i = index; trackBy:trackByFn">                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(optionForm, \'value\')}">                     <label class="col-form-label col-3" *ngIf="i===0">                         Multiple Choice Options                     </label>                     <span class="col-3" *ngIf="i>0"></span>                      <input class="form-control col-8" type="text" [formControl]="optionForm.controls[\'value\']"                             [ngClass]="{\'form-control-danger\': isFormFieldNotValid(optionForm, \'value\')}" />                     <i *ngIf="i > 0" class="fa fa-close col-form-label col-1 delete-option-icon" (click)="onDeleteOption(i)"></i>                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(optionForm, \'value\')" class="form-control-feedback col-8">Option cannot be emtpy</div>                 </div>             </div>             <div class="form-group row">                 <span class="col-3"></span>                 <div class="col-8 add-option-button">                     <button class="btn btn-outline-primary" (click)="onAddOption()">                         + Add Option                     </button>                 </div>             </div>         </ng-container>     </div> </modal>  <modal *ngIf="editMode === EditMode.DeleteField"         [title]="getModalName()"         [autoOpen]="true"         [hasSubmit]="true"         [onDismiss]="onDismissModal"         [onClose]="onDismissModal"         [submitButtonText]="getSubmitButtonText()"         (modalSubmitted)="onModalSubmit()"         [metricIdentifier]="context.identifier">     <div class="modal-body">         <p>             Are you sure you want to delete {{curEditingField.title}}?         </p>     </div> </modal>',styles:[".field-type-dropdown{padding:0px}.delete-option-icon{color:red;cursor:pointer}.questino-title{font-weight:bold}.field-preview{border:1px solid #ccc;padding:10px;margin-top:15px;margin-bottom:15px}.field-preview .fields{padding-top:10px}.field-preview .field-textarea-preview{height:200px;max-height:200px}.field-preview .field-textarea-chars-label{width:70%;text-align:right}.content{margin-bottom:30px}.loading-spinner-container{clear:both;text-align:center}.custom-field{background-color:#eee}.object-property{background-color:#fff}.action{cursor:pointer}"]}),n("design:paramtypes",[i.FormBuilder,d.Http,e.AwsService,g.ToastsManager,c.ViewContainerRef,h.LyMetricService])],a)}(),a("CloudGemDefectReporterClientConfigurationComponent",l)}}}),a.register("7d",["6","7","9","c","a","70","7e"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){}],execute:function(){i=function(){function a(a,b,c,d){var e=this;this.http=a,this.aws=b,this.toastr=c,this.metric=d,this.error_object={},this.projectKeys=[],this.issueTypes=[],this.submitModes=["manual","auto"],this.fieldMappings=[],this.isLoadingjiraIntegrationSettings=!1,this.isLoadingProjectList=!1,this.isLoadingIssueTypeList=!1,this.isLoadingfieldMappings=!1,this.validateJiraFieldMappings=function(){e.fieldMappings.forEach(function(a){var b=a.isArrayType="array"===a.schema.type,c=a.isArrayOfPrimitives=b&&"object"!==a.schema.items.type,d=a.isArrayOfObjects=b&&"object"===a.schema.items.type,e=a.isObjectType="object"===a.schema.type&&void 0!==a.schema.properties;b&&""===a.mapping&&(a.mapping=[]),e&&""===a.mapping&&(a.mapping={}),d&&""===a.mapping&&(a.mapping=[{}]),c&&""===a.mapping&&(a.mapping=[]),"number"===a.schema.type&&(a.schema.type="string")})},this.isArray=function(a){return Array.isArray(a)}}return a.prototype.ngOnInit=function(){this._apiHandler=new h.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.jiraIntegrationSettings={project:{},projectDefault:{},issuetype:{},submitMode:{},projectAttributeSource:{}},this.resetErrors(),this.getjiraIntegrationSettings(),this.getJiraProperty(this.getProjectKeys(),"projectKeys","project keys","isLoadingProjectList")},a.prototype.getjiraIntegrationSettings=function(){var a=this;this.fieldMappings=[],this.isLoadingjiraIntegrationSettings=!0,this._apiHandler.getJiraIntegrationSettings().subscribe(function(b){for(var c=JSON.parse(b.body.text()),d=0,e=Object.keys(c.result);d<e.length;d++){var f=e[d];a.jiraIntegrationSettings[f]={value:c.result[f],valid:!0,message:"Invalid "+f}}void 0===a.jiraIntegrationSettings.projectAttributeSource&&(a.jiraIntegrationSettings.projectAttributeSource={value:null}),""!==a.jiraIntegrationSettings.project.value&&(a.getJiraProperty(a.getIssueTypes(),"issueTypes","issue types","isLoadingIssueTypeList"),""!==a.jiraIntegrationSettings.issuetype.value&&a.getFieldMappings()),a.isLoadingjiraIntegrationSettings=!1},function(b){a.toastr.error("Failed to get the field mappings. The received error was '"+b.message+"'"),a.isLoadingjiraIntegrationSettings=!1})},a.prototype.getProjectKeys=function(){return this._apiHandler.getProjectKeys()},a.prototype.getIssueTypes=function(){return this.issueTypes=[],this._apiHandler.getIssueTypes(this.jiraIntegrationSettings.project.value)},a.prototype.getJiraProperty=function(a,b,c,d){var e=this;this[d]=!0,a.subscribe(function(a){var c=JSON.parse(a.body.text());e[b]=c.result[b],e[d]=!1},function(a){e.toastr.error("Failed to get "+c+". The received error was '"+a.message+"'"),e[d]=!1})},a.prototype.getFieldMappings=function(){var a=this;this.fieldMappings=[],this.isLoadingfieldMappings=!0,this._apiHandler.getFieldMappings(this.jiraIntegrationSettings.project.value,this.jiraIntegrationSettings.issuetype.value).subscribe(function(b){var c=JSON.parse(b.body.text());a.fieldMappings=[];for(var d=0,e=c.result;d<e.length;d++){var f=e[d];f.valid=!0,f.message="Invalid defect report field.",a.fieldMappings.push(f)}a.isLoadingfieldMappings=!1,a.validateJiraFieldMappings()},function(b){a.toastr.error("Failed to get the field mappings. The received error was '"+b.message+"'"),a.isLoadingfieldMappings=!1})},a.prototype.saveSettings=function(){if(this.valid()){for(var a=JSON.parse(JSON.stringify(this.fieldMappings)),b={},c=0,d=a;c<d.length;c++){var e=d[c];delete e.valid,delete e.message,!e||""!==e.mapping&&0!==e.mapping.length&&""!==e.mapping[0]||delete e.mapping,b[e.id]=e}var f={};f[this.jiraIntegrationSettings.issuetype.value]=b;var g=[this.jiraIntegrationSetting(this.jiraIntegrationSettings.project.value,"Project",f,!0),this.jiraIntegrationSetting("submitMode","Submit Mode",this.jiraIntegrationSettings.submitMode.value,!0),this.jiraIntegrationSetting("project","Project",this.jiraIntegrationSettings.project.value,!0),this.jiraIntegrationSetting("issuetype","Issue Type",this.jiraIntegrationSettings.issuetype.value,!0),this.jiraIntegrationSetting("projectAttributeSource","Project Key Attribute Source",this.jiraIntegrationSettings.projectAttributeSource.value,!1),this.jiraIntegrationSetting("projectDefault","Project Default",this.jiraIntegrationSettings.projectDefault.value,!1)];return this._apiHandler.updateFieldMappings(g)}},a.prototype.resetErrors=function(){this.error_object={submitMode:{valid:!0},project:{valid:!0},issuetype:{valid:!0},projectDefault:{valid:!0}}},a.prototype.valid=function(){this.resetErrors();var a=this.jiraIntegrationSettings.submitMode;if(this.isNull(a))return this.error_object.submitMode={valid:!1,message:"Please select a Jira submission mode.  Automatic mode will cause AWS to submit any incoming defects directly to your Jira."},!1;var b=this.jiraIntegrationSettings.project;if(this.isNull(b))return this.error_object.project={valid:!1,message:"At least one Jira project to receive the defects."},!1;var c=this.jiraIntegrationSettings.issuetype;return!this.isNull(c)||(this.error_object.issuetype={valid:!1,message:"At least one Jira project and one Jira issue type for that project to receive the defects."},!1)},a.prototype.isNull=function(a){return void 0===a||null===a||void 0===a.value||""===a.value||null===a.value},a.prototype.jiraIntegrationSetting=function(a,b,c,d){return{id:a,name:b,mapping:c,required:d}},a.prototype.updateJiraProperty=function(a,b){var c=this;void 0!=a&&a.subscribe(function(a){c.toastr.success("Succeeded to update "+b+".")},function(a){c.toastr.error("Failed to update "+b+". The received error was '"+a.message+"'")})},a.prototype.addNewArrayElement=function(a,b){""===a&&(a=[]),"object"===b?a.push({}):"number"===b?a.push(0):"boolean"===b?a.push(!1):a.push("")},a.prototype.removeArrayElement=function(a,b){a.splice(b,1)},a.prototype.trackByFn=function(a,b){return a},a.prototype.getProjectKeyAttributes=function(a){for(var b=[],c=0,d=a;c<d.length;c++){var e=d[c];e.startsWith("p_")||b.push(e)}return b.sort(),b.unshift(" "),b},j([c.Input(),k("design:type",Object)],a.prototype,"context",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"isLoadingReportFields",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"reportFields",void 0),a=j([c.Component({selector:"jira-integration",template:'<div [ngSwitch]="isLoadingjiraIntegrationSettings || isLoadingProjectList || isLoadingIssueTypeList">     <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>     <div *ngSwitchCase="false">         <h2>Jira Integration Settings</h2>         <div class="form-group row valign" [class.has-danger]="!error_object[\'submitMode\'][\'valid\']">             <ng-template #tooltipContent>Choose how Jira issues are created from defect reports.<br>For both modes, if a report is determined to be duplicate issue, the occurence count will be updated in the existing Jira ticket.</ng-template>             <label class="field-mapping-name">                 Submit Mode                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" [ngbTooltip]="tooltipContent"></i>             </label>             <div class="col-9">                 <label class="radio-btn-label">                     <input type="radio" value="auto" [(ngModel)]="jiraIntegrationSettings[\'submitMode\'][\'value\']" name="submit-mode" (click)="resetErrors()"/>                     <span></span> Automatic - Generate Jira issues automatically from incoming defect reports                 </label>                 <label class="radio-btn-label">                     <input type="radio" value="manual" [(ngModel)]="jiraIntegrationSettings[\'submitMode\'][\'value\']" name="submit-mode" (click)="resetErrors()"/>                     <span></span> Manual - Submit defect reports to Jira manually via the Cloud Gem Portal UI                 </label>                 <div *ngIf="!error_object[\'submitMode\'][\'valid\']" class="form-control-feedback">{{error_object[\'submitMode\'][\'message\']}}</div>             </div>         </div>         <div class="form-group row valign" [class.has-danger]="!error_object[\'project\'][\'valid\']">             <ng-template #tooltipContentProjectKey>Select a Jira project to see the available issue types that can be configured. </ng-template>             <label class="field-mapping-name">                 Project Key                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" [ngbTooltip]="tooltipContentProjectKey"></i>             </label>             <div class="col-3">                 <select class="form-control" [(ngModel)]="jiraIntegrationSettings[\'project\'][\'value\']" (ngModelChange)="resetErrors(); jiraIntegrationSettings[\'issuetype\'][\'value\'] = \'\'; fieldMappings=[]; getJiraProperty(getIssueTypes(), \'issueTypes\', \'issue types\', \'isLoadingjiraIntegrationSettings\')">                     <option *ngFor="let projectKey of projectKeys" [ngValue]="projectKey">{{projectKey}}</option>                 </select>                 <div *ngIf="!error_object[\'project\'][\'valid\']" class="form-control-feedback">{{error_object[\'project\'][\'message\']}}</div>             </div>         </div>         <div class="form-group row valign" [class.has-danger]="!error_object[\'issuetype\'][\'valid\']">             <ng-template #tooltipContentIssueType>Select a Jira issue type to configure the Jira ticket mappings. </ng-template>             <label class="field-mapping-name">                 Issue Type                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" [ngbTooltip]="tooltipContentIssueType"></i>             </label>             <div class="col-3">                 <select class="form-control" [(ngModel)]="jiraIntegrationSettings[\'issuetype\'][\'value\']" (ngModelChange)="resetErrors(); getFieldMappings()">                     <option *ngFor="let issueType of issueTypes" [ngValue]="issueType">{{issueType}}</option>                 </select>                 <div *ngIf="!error_object[\'issuetype\'][\'valid\']" class="form-control-feedback">{{error_object[\'issuetype\'][\'message\']}}</div>             </div>         </div>         <div class="form-group row valign" [class.has-danger]="!error_object[\'projectDefault\'][\'valid\']">             <ng-template #tooltipContentProjectDefault>Choose a default project to route tickets to when in automatic mode.  This will also become the default selection for manual ticket submissions done through the Cloud Gem Portal. </ng-template>             <label class="field-mapping-name">                 Project Default Key                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" [ngbTooltip]="tooltipContentProjectDefault"></i>             </label>             <div class="col-3">                 <select class="form-control" [(ngModel)]="jiraIntegrationSettings[\'projectDefault\'][\'value\']" (ngModelChange)="resetErrors();">                     <option *ngFor="let projectKey of projectKeys" [ngValue]="projectKey">{{projectKey}}</option>                 </select>                 <div *ngIf="!error_object[\'projectDefault\'][\'valid\']" class="form-control-feedback">{{error_object[\'projectDefault\'][\'message\']}}</div>             </div>         </div>         <div  *ngIf="jiraIntegrationSettings[\'submitMode\'] && jiraIntegrationSettings[\'submitMode\'][\'value\'] == \'auto\'" class="form-group row valign">             <ng-template #tooltipContent>Choose a defect event attribute coming from the player to use to identify which Jira project to target for the ticket.  Only applicable in "Automatic" submit mode. </ng-template>             <label class="field-mapping-name">                 Project Key Attribute Source                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" [ngbTooltip]="tooltipContent"></i>             </label>             <div class="col-3">                 <select class="form-control" [(ngModel)]="jiraIntegrationSettings[\'projectAttributeSource\'][\'value\']">                     <option *ngFor="let field of getProjectKeyAttributes(reportFields)" [ngValue]="field">{{field}}</option>                 </select>                             </div>         </div>         <div *ngIf="jiraIntegrationSettings[\'project\'][\'value\'] !== \'\' && jiraIntegrationSettings[\'issuetype\'][\'value\'] !== \'\'">             <div [ngSwitch]="isLoadingfieldMappings || isLoadingReportFields">                 <div *ngSwitchCase="true">                     <loading-spinner></loading-spinner>                 </div>                 <div *ngSwitchCase="false">                     <h2 class="field-label">Field Mappings</h2>                     <div *ngIf="fieldMappings.length > 0">                         <div class="form-group row valign">                             <div class="field-mapping-name">                                 Jira FIELD                                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" ngbTooltip="These are specific fields for the Jira issue, defined by the Jira project and issue type selected above."></i>                             </div>                             <div class="col-9">                                 VALUE                                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="bottom" ngbTooltip="Enter the literal data type or provide an attribute name from the defect event to map to at a later date. Example: Description: This is my bug titled - [issue]"></i>                             </div>                         </div>                         <form>                             <div *ngFor="let fieldMapping of fieldMappings; trackBy:trackByFn" class="row valign">                                 <label class="field-mapping-name">                                     {{fieldMapping.name}}                                     <span *ngIf="fieldMapping.required">                                         *                                     </span>                                     <i *ngIf="(fieldMapping.isArrayType || fieldMapping.isArrayOfObjects) && isArray(fieldMapping.mapping)" class="fa fa-plus-circle add-array-item" aria-hidden="true" (click)="addNewArrayElement(fieldMapping.mapping, fieldMapping.schema.items.type)"></i>                                 </label>                                 <div [ngSwitch]="!fieldMapping.isArrayType" class="col-9 reportData">                                     <div *ngSwitchCase="true" [ngClass]="{\'object-field\': fieldMapping?.schema?.properties !== undefined}">                                         <custom-field-value [uniqueId]="fieldMapping.mapping" [jiraSchema]="fieldMapping.schema" [possibleFields]="reportFields" [(reportValue)]="fieldMapping.mapping" ></custom-field-value>                                     </div>                                     <div *ngSwitchCase="false">                                         <div [ngSwitch]="fieldMapping.mapping !== null && isArray(fieldMapping.mapping)" class="object-field">                                             <div *ngSwitchCase="true">                                                 <div class="row no-gutters" *ngFor="let arrayElement of fieldMapping.mapping; let i = index; trackBy:trackByFn">                                                     <div class="col-9">                                                         <custom-field-value [jiraSchema]="fieldMapping.schema.items" [possibleFields]="reportFields" [(reportValue)]="fieldMapping.mapping[i]"></custom-field-value>                                                     </div>                                                     <div class="remove-item">                                                         <i class="fa fa-minus-circle delete-icon" aria-hidden="true" (click)="removeArrayElement(fieldMapping.mapping, i)"></i>                                                     </div>                                                 </div>                                             </div>                                             <div *ngSwitchCase="false">                                                 <custom-field-value [uniqueId]="fieldMapping.mapping" [jiraSchema]="fieldMapping.schema.items" [possibleFields]="reportFields" [(reportValue)]="fieldMapping.mapping"></custom-field-value>                                             </div>                                         </div>                                     </div>                                 </div>                             </div>                         </form>                     </div>                 </div>             </div>         </div>         <button type="button" class="btn l-primary save-button" (click)="updateJiraProperty(saveSettings(), \'Jira integration settings\')">             Save Settings         </button>     </div> </div>',styles:['.field-label{padding:15px;max-width:200px}.save-button{margin-left:15px}.format{white-space:nowrap}.format .schema-template{display:inline-block;vertical-align:text-top;margin-left:5px;margin-right:20px}.format .example{vertical-align:text-top;display:inline-block;margin-right:5px}.tooltip-content{color:#fff;font-family:"AmazonEmber-Light";font-size:11px}.tooltip-content-bold{color:#fff;font-family:"AmazonEmber-Bold";font-size:11px}.remove-item{margin-left:10px}.field-mapping-name{margin-left:15px;width:250px}.valign{-ms-flex-align:baseline;align-items:baseline}.fa.fa-minus-circle{height:inherit;vertical-align:bottom}']}),k("design:paramtypes",[d.Http,e.AwsService,f.ToastsManager,g.LyMetricService])],a)}(),a("CloudGemDefectReporterJiraIntegrationComponent",i)}}}),a.register("7f",["6","a","c"],function(a,b){"use strict";var c,d,e,f,g=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},h=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a}],execute:function(){f=function(){function a(a,b){var d=this;this.toastr=a,this.metric=b,this.defectChange=new c.EventEmitter,this.updateJiraMappings=new c.EventEmitter,this.validationFailed=new c.EventEmitter,this.isLoadingJiraFieldMappings=!1,this.isLoadingIssueTypes=!1,this.projectKeys=[],this.issueTypes=[],this.retriveReportData=function(a,b){void 0===b&&(b=null);var c={};b=b||d.defectEvent,Object.is(a,b)||d.grouped||(a=d.replaceAllNested(a,b));for(var e=0,f=Object.keys(a);e<f.length;e++){var g=f[e];a[g].value;c[g]=a[g].value}return c.project=a.project,c.issuetype=a.issuetype,c}}return a.prototype.ngOnInit=function(){this.defectEvent=JSON.parse(JSON.stringify(this.defectMapping)),this.jiraFieldMappings={project:"",issuetype:"",fields:[]}},Object.defineProperty(a.prototype,"defectReport",{set:function(a){this.defectMapping=a,this.searchFields=[];for(var b in this.defectMapping)this.searchFields.push(b);void 0!==this.jiraFieldMappings&&(this.jiraFieldMappings.fields=JSON.parse(this.originalJiraFieldMappings).result,this.validateJiraFieldMappings())},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"groupMode",{set:function(a){this.grouped=a,this.update()},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,"defect",{get:function(){return this.grouped?this.defectGroupMapping:this.defectMapping},enumerable:!0,configurable:!0}),a.prototype.update=function(){void 0===this.jiraFieldMappings?this.initializeJiraFieldContent():(this.jiraFieldMappings.fields=JSON.parse(this.originalJiraFieldMappings).result,this.validateJiraFieldMappings())},a.prototype.initializeJiraFieldContent=function(){var a=this;this.isLoadingJiraFieldMappings=!0,this.defectReporterApiHandler.getJiraIntegrationSettings().subscribe(function(b){var c=JSON.parse(b.body.text());a.projectDefault=c.result.projectDefault,a.jiraFieldMappings.project=null===c.result.projectDefault||void 0===c.result.projectDefault?c.result.project:a.projectDefault,a.jiraFieldMappings.issuetype=c.result.issuetype,a.getProjectKeys(),a.getIssueTypes(a.jiraFieldMappings.project),a.getJiraFieldMappings(a.jiraFieldMappings.project,a.jiraFieldMappings.issuetype)},function(b){a.toastr.error("Failed to get the Jira integration settings. The received error was '"+b.message+"'"),a.isLoadingJiraFieldMappings=!1})},a.prototype.getJiraFieldMappings=function(a,b){var c=this;this.defectReporterApiHandler.getFieldMappings(a,b).subscribe(function(a){c.originalJiraFieldMappings=a.body.text(),c.jiraFieldMappings.fields=JSON.parse(c.originalJiraFieldMappings).result,c.validateJiraFieldMappings(),c.isLoadingJiraFieldMappings=!1},function(a){c.isLoadingJiraFieldMappings=!1})},a.prototype.getProjectKeys=function(){var a=this;return this.defectReporterApiHandler.getProjectKeys().subscribe(function(b){a.projectKeys=JSON.parse(b.body.text()).result.projectKeys},function(a){})},a.prototype.getIssueTypes=function(a){var b=this;return this.issueTypes=[],this.isLoadingIssueTypes=!0,this.defectReporterApiHandler.getIssueTypes(a).subscribe(function(a){b.issueTypes=JSON.parse(a.body.text()).result.issueTypes,b.isLoadingIssueTypes=!1},function(a){b.isLoadingIssueTypes=!1})},a.prototype.replaceAllNested=function(a,b){if(0==Object.keys(b).length)return a;if(!(a instanceof Object||a instanceof Array)){var c=this.replace(a,b);return c}for(var d in a){var c=this.replaceAllNested(a[d],b);a[d]=c}return a},a.prototype.replace=function(a,b){if("string"!=typeof a)return a;for(var c,d=/\[\s*\w*\s*\]/gi,e=a;null!==(c=d.exec(a));){var f=a.substring(c.index).match(d)[0],g=f.substring(1,f.length-1);if(g in b){var h=b[g];if(h){var i=h.constructor==Object&&"value"in h?h.value:h;e=e.replace(f,i)}}a=a.replace(f,"")}return e},a.prototype.validateJiraFieldMappings=function(){for(var a=this.grouped?{}:{attachment_id:this.defect.attachment_id,universal_unique_identifier:this.defect.universal_unique_identifier},b=0;b<this.jiraFieldMappings.fields.length;b++){var c=this.jiraFieldMappings.fields[b],d=c.mapping,e=c.isArrayType="array"==c.schema.type,f=(c.isArrayOfPrimitives=e&&"object"!==c.schema.items.type,c.isArrayOfObjects=e&&"object"===c.schema.items.type),g=c.isObjectType="object"==c.schema.type&&void 0!==c.schema.properties;if(f?delete c.schema.items.properties.self:g&&delete c.schema.properties.self,""!==d&&Object.keys(d).length>0)this.defect[d]?(this.validateReportDataFormat(c.schema,this.defect[d].value)||(this.toastr.error("Defect reporter property '"+c.mapping+"' doesn't match the schema of Jira field '"+c.name+"'."),this.validationFailed.emit()),a[c.id]=this.defect[d],"summary"===c.id&&(this.jiraFieldMappings.fields.splice(b,1),this.jiraFieldMappings.fields.splice(0,0,c))):(this.grouped||(d=this.replaceAllNested(d,this.defect)),a[c.id]={value:d,valid:!0});else if(c.required)if(f||g){a[c.id]={valid:!0,value:e?[]:{}};for(var h=f?c.schema.items.properties:c.schema.properties,i={},j=0,k=Object.getOwnPropertyNames(h);j<k.length;j++){var l=k[j];"boolean"==h[l].type?i[l]=!1:i[l]=null}f?a[c.id].value.push(i):a[c.id].value=i}else a[c.id]={value:d,valid:!0};c.mapping=c.id}this.grouped?this.defectGroupMapping=a:this.defectMapping=a,this.defect.project=this.jiraFieldMappings.project,this.defect.issuetype=this.jiraFieldMappings.issuetype,this.defectChange.emit(this.defect)},a.prototype.validateReportDataFormat=function(a,b){if(""!==b){var c=typeof b;if(["string","number","boolean","object"].indexOf(a.type)>-1&&a.type!==c)return!1;if("array"===a.type)return!!(Array.isArray(b)&&b.length>0)&&this.validateReportDataFormat(a.items,b[0])}return!0},a.prototype.addNewArrayElement=function(a,b){""===a.value&&(a.value=[]),"object"===b?a.value.push({}):"number"===b?a.value.push(0):"boolean"===b?a.value.push(!1):a.value.push("")},a.prototype.removeArrayElement=function(a,b){a.value.splice(b,1)},a.prototype.validateJiraFields=function(){for(var a=!0,b=0,c=this.jiraFieldMappings.fields;b<c.length;b++){var d=c[b],e=d.mapping;if(e){var f=this.defect[e];if(!f)continue;var g=d.required;delete f.valid;var h=(d.schema.type,this.emptyReportField(f));f.valid=!g||g&&!h,f.valid||(a=!1)}}return a},a.prototype.emptyReportField=function(a){var b=!0;for(var c in a){var d=a[c];if(null===d)b=b&&!0;else{if("string"==typeof d&&""!==d.trim())return!1;if("object"==typeof d)return this.emptyReportField(d)}}return b},a.prototype.isArray=function(a){return Array.isArray(a)},g([c.Input(),h("design:type",Object)],a.prototype,"defectReporterApiHandler",void 0),g([c.Input(),h("design:type",Object)],a.prototype,"defectGroupMapping",void 0),g([c.Output(),h("design:type",Object)],a.prototype,"defectChange",void 0),g([c.Output(),h("design:type",Object)],a.prototype,"updateJiraMappings",void 0),g([c.Output(),h("design:type",Object)],a.prototype,"validationFailed",void 0),g([c.Input(),h("design:type",Object),h("design:paramtypes",[Object])],a.prototype,"defectReport",null),g([c.Input(),h("design:type",Object),h("design:paramtypes",[Object])],a.prototype,"groupMode",null),a=g([c.Component({selector:"create-jira-issue-window",template:'<div [ngSwitch]="isLoadingJiraFieldMappings">     <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>     <div *ngSwitchCase="false">         <form>             <div *ngIf="!grouped" class="form-group row">                 <label class="col-3">                     Report ID                 </label>                 <div class="col-6 jira-integration-settings">                     {{defect.universal_unique_identifier.value}}                 </div>             </div>             <div class="form-group row valign no-gutters">                 <label class="col-3">                     Project Key*                 </label>                 <div class="col-9">                     <select class="form-control" [(ngModel)]="jiraFieldMappings[\'project\']" name="projectName" (ngModelChange)="jiraFieldMappings[\'fields\'] = []; jiraFieldMappings[\'issuetype\']=\'\'; getIssueTypes(jiraFieldMappings[\'project\'])">                         <option *ngFor="let projectKey of projectKeys" [ngValue]="projectKey">{{projectKey}}</option>                     </select>                 </div>             </div>                         <div *ngIf="isLoadingIssueTypes">                 <loading-spinner></loading-spinner>             </div>             <div *ngIf="!isLoadingIssueTypes" class="form-group row valign no-gutters">                 <label class="col-3">                     Issue Key*                 </label>                 <div class="col-9">                     <select class="form-control" [(ngModel)]="jiraFieldMappings[\'issuetype\']" name="issuetype" (ngModelChange)="jiraFieldMappings[\'fields\'] = []; isLoadingJiraFieldMappings = true; this.getJiraFieldMappings(jiraFieldMappings[\'project\'], this.jiraFieldMappings[\'issuetype\']);">                         <option *ngFor="let issue of issueTypes" [ngValue]="issue">{{issue}}</option>                     </select>                 </div>             </div>             <div *ngFor="let item of jiraFieldMappings[\'fields\']">                 <div *ngIf="item.mapping !== \'\' && defect[item.mapping]" class="form-group row" [class.has-danger]="!defect[item.mapping].valid && item.required">                     <label class="col-3">                         {{item.name}}                         <span *ngIf="item.required">                             *                         </span>                         <i *ngIf="(item.isArrayType || item.isArrayOfObjects) && isArray(defect[item.mapping].value)" class="fa fa-plus-circle add-array-item" aria-hidden="true" (click)="addNewArrayElement(defect[item.mapping], item.schema.items.type)"></i>                     </label>                     <div [ngSwitch]="!item.isArrayType" class="col-9 reportData">                         <div *ngSwitchCase="true" [ngClass]="{\'object-field\': item.schema.properties !== undefined}">                             <custom-field-value [uniqueId]="item.mapping" [jiraSchema]="item.schema" [possibleFields]="searchFields" [(reportValue)]="defect[item.mapping].value" (reportValueChange)="defectChange.emit(defect)"></custom-field-value>                         </div>                         <div *ngSwitchCase="false">                             <div [ngSwitch]="defect[item.mapping].value !== null && isArray(defect[item.mapping].value)" class="object-field">                                 <div *ngSwitchCase="true">                                     <div *ngFor="let arrayElement of defect[item.mapping].value let i = index">                                         <custom-field-value [uniqueId]="item.mapping + i" [jiraSchema]="item.schema.items" [possibleFields]="searchFields" [(reportValue)]="defect[item.mapping].value[i]" (reportValueChange)="defectChange.emit(defect)"></custom-field-value>                                         <i class="fa fa-minus-circle delete-icon" aria-hidden="true" (click)="removeArrayElement(defect[item.mapping], i)"></i>Delete {{item.name}}                                     </div>                                 </div>                                 <div *ngSwitchCase="false">                                     <custom-field-value [uniqueId]="item.mapping" [jiraSchema]="item.schema.items" [possibleFields]="searchFields" [(reportValue)]="defect[item.mapping].value" (reportValueChange)="defectChange.emit(defect)"></custom-field-value>                                 </div>                             </div>                         </div>                         <div *ngIf="!defect[item.mapping].valid && item.required" class="form-control-feedback">{{defect[item.mapping].message}}</div>                     </div>                 </div>             </div>         </form>         <div>             Change the default mappings <span class="update-jira-mappings-link" (click)="updateJiraMappings.emit()">here</span>         </div>     </div> </div>',styles:[".jira-integration-settings{padding-left:0px}.reportData{padding:0}.update-jira-mappings-link{cursor:pointer;color:#6441A5}.object-field{border:1px solid #ccc;padding:10px;background-color:#eee;margin-bottom:5px}.add-array-item{cursor:pointer}.delete-icon{margin-right:5px;cursor:pointer}"]}),h("design:paramtypes",[e.ToastsManager,d.LyMetricService])],a)}(),a("CloudGemDefectReporterCreateJiraIssueWindowComponent",f)}}}),a.register("80",["6","a","9","c"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},i=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(a,b,d){this.aws=a,this.toastr=b,this.metric=d,this.updateJiraMappings=new c.EventEmitter,this.limit="50"}return a.prototype.setLimit=function(a){this.limit=a},h([c.Input(),i("design:type",Object)],a.prototype,"metricApiHandler",void 0),h([c.Input(),i("design:type",Object)],a.prototype,"defectReporterApiHandler",void 0),h([c.Input(),i("design:type",Object)],a.prototype,"isJiraIntegrationEnabled",void 0),h([c.Input(),i("design:type",String)],a.prototype,"partialInputQuery",void 0),h([c.Input(),i("design:type",Function)],a.prototype,"toDefectDetailsPageCallback",void 0),h([c.Output(),i("design:type",Object)],a.prototype,"updateJiraMappings",void 0),h([c.ViewChild("datatable"),i("design:type",Object)],a.prototype,"datatable",void 0),h([c.ViewChild("searchButton"),i("design:type",Object)],a.prototype,"searchButton",void 0),a=h([c.Component({selector:"defect-list-overview-tab",template:'<h3>Search Defects</h3> <form class="searchForm">      \x3c!-- Query input --\x3e     <input type="text" class="form-control" [(ngModel)]="partialInputQuery" [ngModelOptions]="{standalone: true}" placeholder="Preview with empty field or enter the parameters after the WHERE statement in a standard ANSI SQL query here..." />      \x3c!-- Limit Selector dropdown button --\x3e     <div class="btn-group" ngbDropdown placement="bottom-right" role="group">         <button class="btn btn-outline-primary btn-limit" type="button" ngbDropdownToggle>             <span>                 {{limit}}                 <i class="fa fa-caret-down" aria-hidden="true"></i>             </span>         </button>         <div class="dropdown-menu" ngbDropdownMenu>             <button type="button" class="dropdown-item" (click)="setLimit(\'10\')">10</button>             <button type="button" class="dropdown-item" (click)="setLimit(\'50\')">50</button>             <button type="button" class="dropdown-item" (click)="setLimit(\'100\')">100</button>             <button type="button" class="dropdown-item" (click)="setLimit(\'ALL\')">ALL</button>         </div>          \x3c!-- Search Button--\x3e         <button #searchButton type="submit" class="btn l-primary btn-search" (click)="datatable.fetchQueryFromInput(partialInputQuery, true)">             Search         </button>     </div> </form>  \x3c!-- Ngx Datatable --\x3e <defect-datatable #datatable                   [aws]="aws"                   [isJiraIntegrationEnabled]="isJiraIntegrationEnabled"                   [metricApiHandler]="metricApiHandler"                   [defectReporterApiHandler]="defectReporterApiHandler"                   [partialQuery]="partialInputQuery"                   [tableName]="\'overview\'"                   [limit]="limit"                   [toDefectDetailsPageCallback]="toDefectDetailsPageCallback"                   (updateJiraMappings)="updateJiraMappings.emit()"                   [bookmark]="false"> </defect-datatable>',styles:[".searchForm>input{width:75%;float:left;margin:0 10px 0 0}.dropdown-menu{max-height:400px;overflow-y:auto;z-index:100}.dropdown-toggle::after{display:none}.hide-element{display:none}"]}),i("design:paramtypes",[e.AwsService,f.ToastsManager,d.LyMetricService])],a)}(),a("CloudGemDefectReporterDefectListOverviewTabComponent",g)}}}),a.register("81",["6","a","9","70","1c","82"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(){function a(a,b){this.aws=a,this.metric=b}return a.prototype.ngOnInit=function(){this.metricQueryBuilder=new g.MetricQuery(this.aws,"defect"),this.queryGraph=this.queryLastXHours(24)},a.prototype.updateGraph=function(a){this.queryGraph=a},a.prototype.queryLastXHours=function(a){return new h.MetricGraph("Number of Defects per Hour","Hours","Number of Defects",[],[this.postQuery(f.Queries.lastXHours(a))],[h.MetricBarData],"ngx-charts-bar-vertical",[],[])},a.prototype.queryLastXDays=function(a){return new h.MetricGraph("Number of Defects per Day","Days","Number of Defects",[],[this.postQuery(f.Queries.lastXDays(a))],[h.MetricBarData],"ngx-charts-bar-vertical",[],[])},a.prototype.queryLastXMonths=function(a){return new h.MetricGraph("Number of Defects per Month","Months","Number of Defects",[],[this.postQuery(f.Queries.lastXMonths(a))],[h.MetricBarData],"ngx-charts-bar-vertical",[],[])},a.prototype.postQuery=function(a){return this.metricApiHandler.postQuery(this.metricQueryBuilder.toString(a))},j([c.Input(),k("design:type",Object)],a.prototype,"metricApiHandler",void 0),a=j([c.Component({selector:"dashboard-tab",template:'<div ngbDropdown>     <button class="btn btn-outline-primary" ngbDropdownToggle>         <span>             Select Time Period             <i class="fa fa-caret-down" aria-hidden="true"></i>         </span>     </button>     <div ngbDropdownMenu>         <button class="dropdown-item" (click)="updateGraph(queryLastXHours(12))">Last 12 Hours</button>         <button class="dropdown-item" (click)="updateGraph(queryLastXHours(24))">Last 24 Hours</button>         <button class="dropdown-item" (click)="updateGraph(queryLastXDays(7))">Last 7 Days</button>         <button class="dropdown-item" (click)="updateGraph(queryLastXDays(30))">Last 30 Days</button>         <button class="dropdown-item" (click)="updateGraph(queryLastXMonths(3))">Last 3 Months</button>         <button class="dropdown-item" (click)="updateGraph(queryLastXMonths(6))">Last 6 Months</button>         <button class="dropdown-item" (click)="updateGraph(queryLastXMonths(12))">Last 12 Months</button>     </div> </div>  <graph [ref]="queryGraph"></graph>',styles:[".searchForm>input{width:75%;float:left;margin:0 10px 0 0}.dropdown-menu{max-height:400px;overflow-y:auto;z-index:100}.dropdown-toggle::after{display:none}.hide-element{display:none}"]}),k("design:paramtypes",[e.AwsService,d.LyMetricService])],a)}(),a("CloudGemDefectReporterDashboardTabComponent",i)}}}),a.register("83",["6","a","9","c","d"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a}],execute:function(){!function(a){a[a.Show=0]="Show",a[a.AddComment=1]="AddComment",a[a.EditComment=2]="EditComment",a[a.CreateJiraTicket=3]="CreateJiraTicket"}(h||(h={})),a("ReportDetailMode",h),i=function(){function a(a,b,d){var e=this;this.aws=a,this.toastr=b,this.metric=d,this.updateJiraMappings=new c.EventEmitter,this.isLoadingjiraServer=!1,this.editCommentModal=function(a){e.currentComment=JSON.parse(JSON.stringify(e.defect.comments[a])),e.currentCommentIndex=a,e.mode=h.EditComment},this.addCommentModal=function(){e.currentComment={user:e.aws.context.authentication.user.username},e.mode=h.AddComment},this.createJiraTicketModal=function(){e.currentReport={};for(var a=0,b=Object.keys(e.defect);a<b.length;a++){var c=b[a];try{e.currentReport[c]={value:JSON.parse(e.defect[c]),valid:!0,message:"Required field cannot be empty."}}catch(a){e.currentReport[c]={value:e.defect[c],valid:!0,message:"Required field cannot be empty."}}}e.mode=h.CreateJiraTicket},this.dismissModal=function(){e.mode=h.Show},this.onShowDefectListPage=function(){e.toDefectListPageCallback&&e.toDefectListPageCallback()}}return a.prototype.ngOnInit=function(){this.Modes=h},a.prototype.changeBookmarkStatus=function(){this.defect.bookmark=0===this.defect.bookmark?1:0,this.updatePropertyValue("bookmark",this.defect.bookmark),this.updateReportHeader("Failed to update bookmarks. ")},a.prototype.changeReportStatus=function(){this.defect.report_status="read"===this.defect.report_status?"unread":"read",this.updatePropertyValue("report_status",this.defect.report_status),this.updateReportHeader("Failed to update the status of the current report. ")},a.prototype.getReportStatus=function(){return"read"===this.defect.report_status?"Mark as Unread":"Mark as Read"},a.prototype.getBookmarkStatus=function(){return 0===this.defect.bookmark?"Add to Bookmarks":"Remove from Bookmarks"},a.prototype.updateComment=function(){var a=this;this.modalRef.close();var b=new Date;this.defect.comments[this.currentCommentIndex]={date:b.toString(),content:this.currentComment.content,user:this.currentComment.user},this.defectReporterApiHandler.updateReportComments(this.defect).subscribe(function(a){},function(b){a.toastr.error("Failed to add the comment. "+b.message)})},a.prototype.deleteComment=function(a){var b=this;this.defect.comments.splice(a,1),this.defectReporterApiHandler.updateReportComments(this.defect).subscribe(function(a){},function(a){b.toastr.error("Failed to delete the comment. "+a.message)})},a.prototype.addComment=function(){var a=this;this.modalRef.close();var b=new Date,c={date:b.toString(),content:this.currentComment.content,user:this.currentComment.user};this.defect.comments.push(c),this.defectReporterApiHandler.updateReportComments(this.defect).subscribe(function(a){},function(b){a.toastr.error("Failed to add the comment. "+b.message)})},a.prototype.viewJiraIssue=function(){var a=this;this.isLoadingjiraServer=!0,this.defectReporterApiHandler.getJiraCredentialsStatus().subscribe(function(b){var c=JSON.parse(b.body.text());c.result.exist?window.open(c.result.server+"/browse/"+a.defect.jira_status,"_blank"):a.toastr.error("Failed to connect to Jira. The Jira credentials don't exist"),a.isLoadingjiraServer=!1},function(b){a.toastr.error("Failed to connect to Jira. "+b.message),a.isLoadingjiraServer=!1})},a.prototype.createJiraIssue=function(){var a=this;this.createJiraIssueWindow.validateJiraFields()&&(this.modalRef.close(),this.defectReporterApiHandler.createJiraIssue([this.createJiraIssueWindow.retriveReportData(this.currentDefect)]).subscribe(function(b){a.getReportJiraIssueNumber(),a.toastr.success("A new Jira ticket was created successfully.")},function(b){a.toastr.error("Failed to create a new Jira ticket. "+b.message)}))},a.prototype.getReportJiraIssueNumber=function(){var a=this;this.defectReporterApiHandler.getReportHeaders().subscribe(function(b){for(var c=JSON.parse(b.body.text()),d=c.result,e=0,f=d;e<f.length;e++){var g=f[e];if(g.universal_unique_identifier===a.defect.universal_unique_identifier){a.defect.jira_status=g.jira_status;break}}})},a.prototype.updatePropertyValue=function(a,b){for(var c=0,d=this.configurationMappings;c<d.length;c++){var e=d[c];if(e.key===a){e.value=b;break}}},a.prototype.updateReportHeader=function(a){var b=this;this.defectReporterApiHandler.updateReportHeader(this.defect).subscribe(function(a){},function(c){b.toastr.error(a+c.message)})},a.prototype.updateJiraIntegrationSettings=function(){this.modalRef.close(),this.updateJiraMappings.emit()},a.prototype.closeCreateJiraIssueWindow=function(){this.modalRef.close(),this.dismissModal()},a.prototype.updateReportsToSubmitList=function(a){this.currentDefect=a},j([c.Input(),k("design:type",Object)],a.prototype,"defect",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"isLoading",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"isJiraIntegrationEnabled",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"configurationMappings",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"context",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"toDefectListPageCallback",void 0),j([c.Input(),k("design:type",Object)],a.prototype,"defectReporterApiHandler",void 0),j([c.Output(),k("design:type",Object)],a.prototype,"updateJiraMappings",void 0),j([c.ViewChild(g.ModalComponent),k("design:type",g.ModalComponent)],a.prototype,"modalRef",void 0),j([c.ViewChild("CreateJiraIssueWindow"),k("design:type",Object)],a.prototype,"createJiraIssueWindow",void 0),a=j([c.Component({selector:"defect-detail-overview-tab",template:'<button class="btn l-primary" (click)="onShowDefectListPage()">     < Back to Defect List </button> <span *ngIf="isJiraIntegrationEnabled">     <span [ngSwitch]="defect.jira_status && defect.jira_status !== \'pending\'">         <span *ngSwitchCase="true">             <button class="btn btn-outline-primary float-right report-operation" (click)="viewJiraIssue()">                 View Jira Issue             </button>         </span>         <span *ngSwitchCase="false">             <button class="btn btn-outline-primary float-right report-operation" (click)="createJiraTicketModal()">                 <i class="fa fa-share" aria-hidden="true">                     <span>Create Jira Issue</span>                 </i>             </button>         </span>     </span> </span> <button class="btn btn-outline-primary float-right report-operation" (click)="changeReportStatus()">     {{getReportStatus()}} </button> <button class="btn btn-outline-primary float-right report-operation" (click)="changeBookmarkStatus()">     {{getBookmarkStatus()}} </button> <button class="btn btn-outline-primary float-right report-operation" (click)="addCommentModal()">     Add Comment </button>  <div [ngSwitch]="isLoading">     <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>     <div *ngSwitchCase="false">         <div class="detail-information">             <report-information [context]="context" [reportInformation]="defect" [configurationMappings]="configurationMappings" (deleteComment)="deleteComment($event)" (editComment)="editCommentModal($event)" (viewJiraIssue)="viewJiraIssue()"></report-information>         </div>         <div class="detail-information">             <player-information [playerInformation]="defect" [configurationMappings]="configurationMappings"></player-information>             <system-information [systemInformation]="defect" [configurationMappings]="configurationMappings"></system-information>         </div>     </div> </div>  \x3c!-- Add comment and edit comment modal --\x3e <modal *ngIf="mode == Modes.AddComment || mode == Modes.EditComment"        [title]="mode == Modes.AddComment ? \'Add Comment\' : \'Edit Comment\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Add\'"        (modalSubmitted)="mode == Modes.AddComment ? addComment() : updateComment()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <form>             <div class="form-group row">                 <label class="col-3 col-form-label affix">Comment</label>                 <div class="col-9">                     <textarea class="form-control" name="comment" [(ngModel)]="currentComment.content" cols="100" rows="6"></textarea>                 </div>             </div>         </form>     </div> </modal>  \x3c!-- CreateJiraTicket modal --\x3e <modal *ngIf="mode == Modes.CreateJiraTicket"        [title]="\'Create Jira Ticket\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Submit\'"        (modalSubmitted)="createJiraIssue()"        [metricIdentifier]="context.identifier">     <div class="modal-body create-jira-issue-window-container">         <create-jira-issue-window #CreateJiraIssueWindow             [defectReporterApiHandler]="defectReporterApiHandler"             [(defectReport)]="currentReport"                (defectChange)="updateReportsToSubmitList($event)"                                  [groupMode]="false"             (updateJiraMappings)="updateJiraIntegrationSettings()"             (validationFailed)="closeCreateJiraIssueWindow()">         </create-jira-issue-window>     </div> </modal>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}.jira-issue-number{color:#6441A5;cursor:pointer}.create-jira-issue-window-container{height:500px;overflow:auto}.add-item{cursor:pointer}"]}),k("design:paramtypes",[e.AwsService,f.ToastsManager,d.LyMetricService])],a)}(),a("CloudGemDefectReporterDefectDetailOverviewTabComponent",i)}}}),a.register("84",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a}return f([c.Input(),g("design:type",Object)],a.prototype,"rawDataKeys",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"defect",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"isLoading",void 0),a=f([c.Component({selector:"raw-data-tab",template:'<div [ngSwitch]="isLoading">     <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>     <div *ngSwitchCase="false">         <form class="raw-data-container">             <div *ngFor="let key of rawDataKeys">                 <div *ngIf="defect[key] != \'\'" class="form-group row">                     <label class="col-3 col-form-label affix">{{key}}</label>                     <label class="col-6 form-control affix">{{defect[key]}}</label>                 </div>             </div>         </form>     </div> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}.jira-issue-number{color:#6441A5;cursor:pointer}.create-jira-issue-window-container{height:500px;overflow:auto}.add-item{cursor:pointer}"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterRawDataTabComponent",e)}}}),a.register("85",["6","a","9","3f","86"],function(a,b){"use strict";var c,d,e,f,g,h,i=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},j=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a}],execute:function(){h=function(){function a(a,b,d,e){this.aws=a,this.urlService=b,this.toastr=d,this.metric=e,this.runRecentSearch=new c.EventEmitter,this.recentSearches=[]}return a.prototype.ngOnInit=function(){var a=this;this.isLoading=!0,this.defectReporterApiHandler.getRecentSearches(this.aws.context.authentication.user.username).subscribe(function(b){var c=JSON.parse(b.body.text());a.recentSearches=c.result,a.isLoading=!1},function(b){a.toastr.error("Failed to load the recent searches. ",b),a.isLoading=!1})},a.prototype.shareRecentSearch=function(a){var b=this.urlService.baseUrl;b=-1===b.indexOf("deployment=")?b:b.slice(0,b.indexOf("deployment=")-1),b+=-1==b.indexOf("?")?"?deployment=":"&deployment=",b+=this.aws.context.project.activeDeployment.settings.name+"&target=CloudGemDefectReporter&params="+encodeURIComponent(a.query_params),g.Clipboard.copy(b),this.toastr.success("The shareable search URL has been copied to your clipboard.","Copy To Clipboard")},i([c.Input(),j("design:type",Object)],a.prototype,"defectReporterApiHandler",void 0),i([c.Output(),j("design:type",Object)],a.prototype,"runRecentSearch",void 0),a=i([c.Component({selector:"recent-searches-tab",template:'<h2>Recent Searches</h2> <div [ngSwitch]="isLoading">     <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>     <div *ngSwitchCase="false">         <div *ngIf="recentSearches && recentSearches.length > 0">             <table class="table table-hover">                 <thead>                     <tr>                         <th class="query-params-column">QUERY PARAMETERS</th>                         <th class="timestamp-column">TIMESTAMP</th>                     </tr>                 </thead>                 <tbody>                     <tr *ngFor="let recentSearch of recentSearches">                         <td *ngIf="recentSearch[\'query_params\'] != \'*\'" class="query-params-column" (click)="runRecentSearch.emit(recentSearch[\'query_params\'])">{{recentSearch[\'query_params\']}}</td>                         <td *ngIf="recentSearch[\'query_params\'] == \'*\'" class="query-params-column" (click)="runRecentSearch.emit(recentSearch[\'query_params\'])"></td>                         <td class="timestamp-column" (click)="runRecentSearch.emit(recentSearch[\'query_params\'])">{{recentSearch[\'timestamp\']}}</td>                         <td>                             <div class="float-right">                                 <i (click)="shareRecentSearch(recentSearch)" class="fa fa-share-square-o" data-toggle="tooltip" data-placement="top" title="Share"></i>                             </div>                         </td>                     </tr>                 </tbody>             </table>         </div>     </div> </div>',styles:[".searchForm>input{width:75%;float:left;margin:0 10px 0 0}.dropdown-menu{max-height:400px;overflow-y:auto;z-index:100}.dropdown-toggle::after{display:none}.hide-element{display:none}"]}),j("design:paramtypes",[e.AwsService,d.UrlService,f.ToastsManager,d.LyMetricService])],a)}(),a("CloudGemDefectReporterRecentSearchesTabComponent",h)}}}),a.register("87",["6","a","c"],function(a,b){"use strict";var c,d,e,f,g=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},h=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a}],execute:function(){f=function(){function a(a,b){this.toastr=a,this.metric=b,this.reportValueChange=new c.EventEmitter,""!==this.reportValue&&void 0!==this.reportValue&&null!==this.reportValue||(this.reportValue={})}return a.prototype.updateObjectProperty=function(a,b){""!==this.reportValue&&void 0!==this.reportValue&&null!==this.reportValue||(this.reportValue={}),"string"==typeof this.reportValue[a]||"number"==typeof this.reportValue[a]?this.reportValue[a]=""===b.trim()?null:b.trim():this.reportValue[a]=b,this.reportValueChange.emit(this.reportValue)},a.prototype.updateStandardValue=function(a){this.reportValue=a,this.reportValueChange.emit(this.reportValue)},g([c.Input(),h("design:type",Object)],a.prototype,"jiraSchema",void 0),g([c.Input(),h("design:type",Object)],a.prototype,"reportValue",void 0),g([c.Input(),h("design:type",Object)],a.prototype,"uniqueId",void 0),g([c.Input(),h("design:type",Object)],a.prototype,"possibleFields",void 0),g([c.Output(),h("design:type",Object)],a.prototype,"reportValueChange",void 0),a=g([c.Component({selector:"custom-field-value",template:'<div class="property" *ngIf="jiraSchema.properties">     <div *ngFor="let prop of jiraSchema.properties | objKeys">         <div *ngIf="prop !== \'self\' && prop !== \'id\'" class="form-group row valign">             <div class="key">{{prop}} </div>             <div class="col-10 value no-padding">                 <field-mapping *ngIf="jiraSchema.properties[prop].type !== \'boolean\'" [model]="reportValue[prop]" [possibleFields]="possibleFields" (modelChange)="reportValue[prop] = ($event !== \'\') ? $event : undefined"></field-mapping>                 <input *ngIf="jiraSchema.properties[prop].type === \'boolean\'" type="checkbox" [id]="uniqueId + prop" [name]="uniqueId + prop" [(ngModel)]="reportValue[prop]" (ngModelChange)="updateObjectProperty(prop, reportValue[prop])" />                 <label class="l-checkbox row-selector" [attr.for]="uniqueId + prop"></label>             </div>         </div>     </div> </div> <div *ngIf="jiraSchema.properties === undefined">     <div *ngIf="reportValue !== undefined" class="value">         <field-mapping *ngIf="jiraSchema.type !== \'boolean\'" [model]="reportValue" [possibleFields]="possibleFields" [type]="jiraSchema.type" (modelChange)="updateStandardValue($event)"></field-mapping>         <input *ngIf="jiraSchema.type === \'boolean\'" type="checkbox" [id]="uniqueId" [name]="uniqueId" [(ngModel)]="reportValue" (ngModelChange)="updateStandardValue(reportValue)" />         <label class="l-checkbox row-selector" [attr.for]="uniqueId"></label>     </div>     <div *ngIf="reportValue === undefined" class="value">         <field-mapping *ngIf="jiraSchema.type !== \'boolean\'" [model]="reportValue" [possibleFields]="possibleFields" [type]="jiraSchema.type" (modelChange)="updateStandardValue($event)"></field-mapping>         <input *ngIf="jiraSchema.type === \'boolean\'" type="checkbox" [id]="uniqueId" [name]="uniqueId" (change)="updateStandardValue($event.target.checked)" />         <label class="l-checkbox row-selector" [attr.for]="uniqueId"></label>     </div> </div>',styles:[".key{padding-left:0px;width:115px}.valign{-ms-flex-align:baseline;align-items:baseline}.l-checkbox.row-selector{height:5px}"]}),h("design:paramtypes",[e.ToastsManager,d.LyMetricService])],a)}(),a("CloudGemDefectReporterCustomFieldValueComponent",f)}}}),a.register("88",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a,this.showModifyField=new c.EventEmitter,this.showDeleteField=new c.EventEmitter,this.addNewProperty=new c.EventEmitter}return a.prototype.ngOnInit=function(){var a=this.field.type;if(void 0===this.field.defaultValue)if("text"===a)this.field.defaultValue="";else if("object"===a)this.field.defaultValue={};else if("predefined"===a)if(!0===this.field.multipleSelect){this.field.defaultValue=[];for(var b=0;b<this.field.predefines.length;++b)this.field.defaultValue.push(!1)}else this.field.defaultValue=""},f([c.Input(),g("design:type",Object)],a.prototype,"field",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"fieldIdPrefix",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"isObjectProperty",void 0),f([c.Output(),g("design:type",Object)],a.prototype,"showModifyField",void 0),f([c.Output(),g("design:type",Object)],a.prototype,"showDeleteField",void 0),f([c.Output(),g("design:type",Object)],a.prototype,"addNewProperty",void 0),a=f([c.Component({selector:"client-configuration-field",template:'<div class="field-preview col-11" [ngClass]="isObjectProperty ? \'object-property\' : \'custom-field\'">     <span class="float-right">         <i *ngIf="field.type === \'object\'" (click)="addNewProperty.emit()" class="fa fa-plus-circle action" data-toggle="tooltip" data-placement="top" title="Add new property"></i>         <i (click)="showModifyField.emit()" class="fa fa-cog action" data-toggle="tooltip" data-placement="top" title="Edit"></i>         <i (click)="showDeleteField.emit()" class="fa fa-trash-o action" data-toggle="tooltip" data-placement="top" title="Delete"></i>     </span>     <div class="questino-title">         {{field.title}}     </div>      <div class="fields" *ngIf="field[\'type\'] === \'predefined\'">         <ng-container *ngIf="field[\'multipleSelect\'] === true">             <div class="radio-btn-label" *ngFor="let predefine of field[\'predefines\']; let i = index">                 <input id="{{fieldIdPrefix}}_{{field.title}}_option_{{i}}" type="checkbox" [(ngModel)]="field[\'defaultValue\'][i]"/>                 <label class="l-checkbox" for="{{fieldIdPrefix}}_{{field.title}}_option_{{i}}">                     {{predefine}}                 </label>             </div>         </ng-container>         <ng-container *ngIf="field[\'multipleSelect\'] === false">             <div class="radio-btn-container">                 <div *ngFor="let predefine of field[\'predefines\']; let i = index">                     <label class="radio-btn-label">                         <input class="form-control" type="radio" [(ngModel)]="field[\'defaultValue\']" [value]="predefine" name="{{fieldIdPrefix}}_{{field.title}}_{{predefine}}_option_{{i}}"/>                         <span></span> {{predefine}}                     </label>                 </div>             </div>         </ng-container>     </div>      <div class="fields" *ngIf="field.type === \'text\'">         <div>             <textarea class="field-textarea-preview col-11" [(ngModel)]="field[\'defaultValue\']" [maxLength]="field.maxChars"></textarea>             <div class="question-textarea-chars-label">                 {{field[\'defaultValue\'].length}}/{{field.maxChars}}             </div>         </div>     </div>      <ng-content></ng-content> </div>',styles:[".field-type-dropdown{padding:0px}.delete-option-icon{color:red;cursor:pointer}.questino-title{font-weight:bold}.field-preview{border:1px solid #ccc;padding:10px;margin-top:15px;margin-bottom:15px}.field-preview .fields{padding-top:10px}.field-preview .field-textarea-preview{height:200px;max-height:200px}.field-preview .field-textarea-chars-label{width:70%;text-align:right}.content{margin-bottom:30px}.loading-spinner-container{clear:both;text-align:center}.custom-field{background-color:#eee}.object-property{background-color:#fff}.action{cursor:pointer}"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterClientConfigurationFieldComponent",e)}}}),a.register("89",["6"],function(a,b){"use strict";var c,d,e=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},f=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a}],execute:function(){d=function(){function a(){var a=this;this.type="text",this.modelChange=new c.EventEmitter,this._list=[],this.searchReportFields=function(b){return b.debounceTime(200).distinctUntilChanged().map(function(b){return a._list.filter(function(a){return a.toLocaleLowerCase().indexOf(b.toLocaleLowerCase())>-1}).slice(0,50)})}}return a.prototype.ngOnInit=function(){for(var a=0,b=this.possibleFields;a<b.length;a++){var c=b[a];c.startsWith("p_")||this._list.push("["+c+"]")}},a.prototype.emit=function(a){this.modelChange.emit(a)},e([c.Input(),f("design:type",Object)],a.prototype,"model",void 0),e([c.Input(),f("design:type",String)],a.prototype,"type",void 0),e([c.Input(),f("design:type",Array)],a.prototype,"possibleFields",void 0),e([c.Output(),f("design:type",Object)],a.prototype,"modelChange",void 0),a=e([c.Component({selector:"field-mapping",styles:['.field-label{padding:15px;max-width:200px}.save-button{margin-left:15px}.format{white-space:nowrap}.format .schema-template{display:inline-block;vertical-align:text-top;margin-left:5px;margin-right:20px}.format .example{vertical-align:text-top;display:inline-block;margin-right:5px}.tooltip-content{color:#fff;font-family:"AmazonEmber-Light";font-size:11px}.tooltip-content-bold{color:#fff;font-family:"AmazonEmber-Bold";font-size:11px}.remove-item{margin-left:10px}.field-mapping-name{margin-left:15px;width:250px}.valign{-ms-flex-align:baseline;align-items:baseline}.fa.fa-minus-circle{height:inherit;vertical-align:bottom}'],template:'\n    <div placement="right"\n        [ngbTooltip]="schema"\n        triggers="click:focusout"\n        placement="right">\n            <input class="form-control"\n                [type]="type"\n                placeholder="Type forward search..."\n                [ngbTypeahead]="searchReportFields"\n                [(ngModel)]="model"\n                (ngModelChange)="emit(model)"\n                />\n    </div>\n  '}),f("design:paramtypes",[])],a)}(),a("CloudGemDefectReporterFieldMappingComponent",d)}}}),a.register("8a",[],function(a,b){"use strict";var c;b&&b.id;return{setters:[],execute:function(){c=function(){function a(){}return a.lastXHours=function(a){return"SELECT date_format(from_unixtime(server_timestamp), '%m-%d %Hh') as Hour, count(distinct universal_unique_identifier) AS count \n            FROM ${database}.${table}\n            WHERE p_server_timestamp_strftime >= date_format((current_timestamp - interval '"+String(a)+"' hour), '%Y%m%d%H0000')  \n            GROUP BY date_format(from_unixtime(server_timestamp), '%m-%d %Hh') \n            ORDER BY date_format(from_unixtime(server_timestamp), '%m-%d %Hh') ASC"},a.lastXDays=function(a){return"SELECT date_format(from_unixtime(server_timestamp), '%Y-%m-%d') as Day, count(distinct universal_unique_identifier) AS count \n            FROM ${database}.${table}\n            WHERE p_server_timestamp_strftime >= date_format((current_timestamp - interval '"+String(a)+"' day), '%Y%m%d%H0000') \n            GROUP BY date_format(from_unixtime(server_timestamp), '%Y-%m-%d') \n            ORDER BY date_format(from_unixtime(server_timestamp), '%Y-%m-%d') ASC"},a.lastXMonths=function(a){return"SELECT date_format(from_unixtime(server_timestamp), '%Y-%m') as Month, count(distinct universal_unique_identifier) AS count \n            FROM ${database}.${table}\n            WHERE p_server_timestamp_strftime >= date_format((current_timestamp - interval '"+String(a)+"' month), '%Y%m%d%H0000') \n            GROUP BY date_format(from_unixtime(server_timestamp), '%Y-%m')\n            ORDER BY date_format(from_unixtime(server_timestamp), '%Y-%m') ASC"},a}(),a("Queries",c)}}}),a.register("8b",["10","11","6","70"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(){}return a=h([e.NgModule({imports:[d.GameSharedModule,c.GemModule],declarations:[f.CloudGemDefectReporterIndexComponent,f.CloudGemDefectReporterThumbnailComponent,f.CloudGemDefectReporterDefectDetailsPageComponent,f.CloudGemDefectReporterDefectListPageComponent,f.CloudGemDefectReproterDefectDatatableComponent,f.CloudGemDefectReporterReportInformationComponent,f.CloudGemDefectReporterPlayerInformationComponent,f.CloudGemDefectReporterSystemInformationComponent,f.CloudGemDefectReporterClientConfigurationComponent,f.CloudGemDefectReporterJiraIntegrationComponent,f.CloudGemDefectReporterReportConfigurationComponent,f.CloudGemDefectReporterCreateJiraIssueWindowComponent,f.CloudGemDefectReporterDefectDetailOverviewTabComponent,f.CloudGemDefectReporterRawDataTabComponent,f.CloudGemDefectReporterRecentSearchesTabComponent,f.CloudGemDefectReporterDefectListOverviewTabComponent,f.CloudGemDefectReporterDefectListOverviewTabComponent,f.CloudGemDefectReporterDashboardTabComponent,f.CloudGemDefectReporterCustomFieldValueComponent,f.CloudGemDefectReporterClientConfigurationFieldComponent,f.CloudGemDefectReporterFieldMappingComponent],providers:[],bootstrap:[f.CloudGemDefectReporterThumbnailComponent,f.CloudGemDefectReporterIndexComponent]})],a)}(),a("CloudGemDefectReporterModule",g)}}}),a.register("70",["6f","71","6e","73","74","75","76","78","79","7a","7b","7c","7d","7f","80","81","83","84","85","87","88","89","8a","8b"],function(a,b){"use strict";function c(b){var c={};for(var d in b)"default"!==d&&(c[d]=b[d]);a(c)}b&&b.id;return{setters:[function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)}],execute:function(){}}}),a.register("6d",["70"],function(a,b){"use strict";function c(a){return e.CloudGemDefectReporterModule}function d(){return f.CloudGemDefectReporterApi}var e,f;b&&b.id;return a("definition",c),a("serviceApiType",d),{setters:[function(a){e=a,f=a}],execute:function(){}}})})(function(a){if("function"==typeof define&&define.amd)define(["app/view/game/module/cloudgems/class/index.js","@angular/core","rxjs/Observable.js","@angular/http","app/aws/aws.service.js","app/shared/service/index.js","app/shared/class/index.js","rxjs/add/operator/delay.js","ng2-toastr/ng2-toastr.js","app/view/game/module/shared/class/index.js","app/shared/component/index.js","@angular/router","ng2-toastr","@angular/forms","rxjs/add/operator/distinctUntilChanged.js","app/view/game/module/shared/class/metric-graph.class.js","ts-clipboard","app/view/game/module/cloudgems/gem.module.js","app/view/game/module/shared/shared.module.js"],a);else{if("object"!=typeof module||!module.exports||"function"!=typeof require)throw new Error("Module must be loaded as AMD or CommonJS");module.exports=a(require("app/view/game/module/cloudgems/class/index.js"),require("@angular/core"),require("rxjs/Observable.js"),require("@angular/http"),require("app/aws/aws.service.js"),require("app/shared/service/index.js"),require("app/shared/class/index.js"),require("rxjs/add/operator/delay.js"),require("ng2-toastr/ng2-toastr.js"),require("app/view/game/module/shared/class/index.js"),require("app/shared/component/index.js"),require("@angular/router"),require("ng2-toastr"),require("@angular/forms"),require("rxjs/add/operator/distinctUntilChanged.js"),require("app/view/game/module/shared/class/metric-graph.class.js"),require("ts-clipboard"),require("app/view/game/module/cloudgems/gem.module.js"),require("app/view/game/module/shared/shared.module.js"))}});