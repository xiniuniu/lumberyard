!function(a){function b(a,b,c){a in i||(i[a]={name:a,declarative:!0,deps:b,declare:c,normalizedDeps:b})}function c(a){return m[a]||(m[a]={name:a,dependencies:[],exports:{},importers:[]})}function d(b){if(!b.module){var e=b.module=c(b.name),f=b.module.exports,g=b.declare.call(a,function(a,b){if(e.locked=!0,"object"==typeof a)for(var c in a)f[c]=a[c];else f[a]=b;for(var d=0,g=e.importers.length;g>d;d++){var h=e.importers[d];if(!h.locked)for(var i=0;i<h.dependencies.length;++i)h.dependencies[i]===e&&h.setters[i](f)}return e.locked=!1,b},b.name);e.setters=g.setters,e.execute=g.execute;for(var j=0,k=b.normalizedDeps.length;k>j;j++){var l,n=b.normalizedDeps[j],o=i[n],p=m[n];p?l=p.exports:o&&!o.declarative?l=o.esModule:o?(d(o),p=o.module,l=p.exports):l=h(n),p&&p.importers?(p.importers.push(e),e.dependencies.push(p)):e.dependencies.push(null),e.setters[j]&&e.setters[j](l)}}}function e(b){var c={};if(("object"==typeof b||"function"==typeof b)&&b!==a)if(k)for(var d in b)"default"!==d&&f(c,b,d);else{var e=b&&b.hasOwnProperty;for(var d in b)"default"===d||e&&!b.hasOwnProperty(d)||(c[d]=b[d])}return c.default=b,l(c,"__useDefault",{value:!0}),c}function f(a,b,c){try{var d;(d=Object.getOwnPropertyDescriptor(b,c))&&l(a,c,d)}catch(d){return a[c]=b[c],!1}}function g(b,c){var d=i[b];if(d&&!d.evaluated&&d.declarative){c.push(b);for(var e=0,f=d.normalizedDeps.length;f>e;e++){var k=d.normalizedDeps[e];-1==j.call(c,k)&&(i[k]?g(k,c):h(k))}d.evaluated||(d.evaluated=!0,d.module.execute.call(a))}}function h(a){if(o[a])return o[a];if("@node/"==a.substr(0,6))return o[a]=e(n(a.substr(6)));var b=i[a];if(!b)throw"Module "+a+" not present.";return d(i[a]),g(a,[]),i[a]=void 0,b.declarative&&l(b.module.exports,"__esModule",{value:!0}),o[a]=b.declarative?b.module.exports:b.esModule}var i={},j=Array.prototype.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},k=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(a){k=!1}var l;!function(){try{Object.defineProperty({},"a",{})&&(l=Object.defineProperty)}catch(a){l=function(a,b,c){try{a[b]=c.value||c.get.call(a)}catch(a){}}}}();var m={},n="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,o={"@empty":{}};return function(a,c,d,f){return function(g){g(function(g){for(var i=0;i<c.length;i++)!function(a,b){b&&b.__esModule?o[a]=b:o[a]=e(b)}(c[i],arguments[i]);f({register:b});var j=h(a[0]);if(a.length>1)for(var i=1;i<a.length;i++)h(a[i]);return d?j.default:j})}}}("undefined"!=typeof self?self:global)(["9b"],["6","8","7","9","1c","6d","a0","a2","44","69","1b","10","11","3","5b","a6","a7","a8","a9"],!1,function(a){this.require,this.exports,this.module;a.register("9c",["6","8","7","9"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),i=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},j=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(a){function b(b,c){var d=a.call(this)||this;return d.http=b,d.aws=c,d.tabs=["Overview","SQS","Lambda","DynamoDb","Partitions","Filtering","Settings"],d}return h(b,a),b.prototype.ngOnInit=function(){},i([c.Input(),j("design:type",Object)],b.prototype,"context",void 0),b=i([c.Component({selector:"cloudgemmetric-index",template:'<facet-generator [context]="context"\n        [tabs]="tabs"\n        (tabClicked)="idx=$event"\n        ></facet-generator>\n        <div *ngIf="idx === 0">            \n            <metric-overview [facetid]="tabs[idx]" [context]="context"></metric-overview>\n        </div>      \n        <div *ngIf="idx === 1">\n            <metric-overview [facetid]="tabs[idx]" [context]="context"></metric-overview>\n        </div>     \n        <div *ngIf="idx === 2">\n            <metric-overview [facetid]="tabs[idx]" [context]="context"></metric-overview>\n        </div>\n        <div *ngIf="idx === 3">\n            <metric-overview [facetid]="tabs[idx]" [context]="context"></metric-overview>\n        </div>\n        <div *ngIf="idx === 4">\n            <metric-partitions [context]="context"></metric-partitions>\n        </div>\n        <div *ngIf="idx === 5">\n            <metric-filtering [context]="context"></metric-filtering>\n        </div>\n        <div *ngIf="idx === 6">\n            <metric-settings [context]="context"></metric-settings>\n        </div>\n\t\t'}),j("design:paramtypes",[e.Http,f.AwsService])],b)}(d.AbstractCloudGemIndexComponent),a("CloudGemMetricIndexComponent",g)}}}),a.register("9d",["8","6","9e","7","9","1c"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(){function a(a,b){this.http=a,this.aws=b,this.displayName="Game Metrics",this.srcIcon="https://m.media-amazon.com/images/G/01/cloudcanvas/images/CloudGemMetric_optimized._CB492341798_.png",this.state=new c.TackableStatus,this.metric=new c.TackableMeasure}return a.prototype.ngOnInit=function(){this._apiHandler=new e.CloudGemMetricApi(this.context.ServiceUrl,this.http,this.aws),this.report(this.metric),this.assign(this.state)},a.prototype.report=function(a){a.name="Metrics written in last hour",a.value="Loading...";new h.MetricQuery(this.aws,"clientinitcomplete");this._apiHandler.getRowsAdded().subscribe(function(b){a.value="0";var c=JSON.parse(b.body.text()).result,d=new Date;d.setHours(d.getHours()-1);var e=d.getTime()/1e3,f=0;for(var g in c){var h=c[g];h.Timestamp>e&&(f+=h.Average)}a.value=Math.floor(f).toString()},function(b){a.value="0"})},a.prototype.assign=function(a){a.label="Loading",a.styleType="Loading",this._apiHandler.getStatus().subscribe(function(b){var c=JSON.parse(b.body.text());a.label="online"==c.result.status?"Online":"Offline",a.styleType="online"==c.result.status?"Enabled":"Offline"},function(b){a.label="Offline",a.styleType="Offline"})},j([d.Input(),k("design:type",Object)],a.prototype,"context",void 0),j([d.Input(),k("design:type",String)],a.prototype,"displayName",void 0),j([d.Input(),k("design:type",String)],a.prototype,"srcIcon",void 0),a=j([d.Component({selector:"cloudgemmetric-thumbnail",template:'\n    <thumbnail-gem\n        [title]="displayName"\n        [cost]="\'High\'"\n        [srcIcon]="srcIcon"\n        [metric]="metric"\n        [state]="state"\n        >\n    </thumbnail-gem>'}),k("design:paramtypes",[f.Http,g.AwsService])],a)}(),a("CloudGemMetricThumbnailComponent",i)}}}),a.register("9f",["6","9e","7","9","6d","a0"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){}],execute:function(){h=.0083528,i=function(){function a(a,b){var c=this;this.http=a,this.aws=b,this.metricGraphs=new Array,this.colorScheme={domain:["#6441A5","#A10A28","#C7B42C","#8A0ECC","#333333"]},this.parseMetricsData=function(a,b,d,e){var f=e;return f.length<=1||!(f instanceof Array)?{name:d,series:[{name:"Insufficient Data Found",value:0}]}:{name:d,series:f.sort(function(a,b){return+new Date(1e3*a.Timestamp)-+new Date(1e3*b.Timestamp)}).map(function(a){return c.parseData(a,b)})}},this.parseDynamoDbMetricsData=function(a,b,d,e){var f=e;return f.length<=1||!(f instanceof Array)?{name:d,series:[{name:"Insufficient Data Found",value:0}]}:{name:d,series:f.sort(function(a,b){return+new Date(1e3*a.Timestamp)-+new Date(1e3*b.Timestamp)}).map(function(a){return c.parseData(a,b,!0)})}}}return a.prototype.ngOnInit=function(){this._apiHandler=new d.CloudGemMetricApi(this.context.ServiceUrl,this.http,this.aws),this.facetid=this.facetid.toLocaleLowerCase(),this.facetid=="Overview".toLocaleLowerCase()?this.populateOverviewGraphs():this.facetid=="SQS".toLocaleLowerCase()?this.populatePipelineGraphs():this.facetid=="Lambda".toLocaleLowerCase()?this.populateAWSGraphs():this.facetid=="DynamoDb".toLocaleLowerCase()&&this.populateDbGraphs()},a.prototype.ngOnDestroy=function(){this.metricGraphs.forEach(function(a){a.clearInterval()})},a.prototype.populateOverviewGraphs=function(){this.metricGraphs.push(new g.MetricGraph("Incoming Game Events","Date","Number of Events",["Metrics Added"],[this._apiHandler.getRowsAdded()],[this.parseMetricsData],"ngx-charts-line-chart",[],["Average"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Event Bandwidth Consumed","Date","Incoming Bytes",["Processed Bytes"],[this._apiHandler.getProcessedBytes()],[this.parseMetricsData],"ngx-charts-line-chart",[],["Average"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Event Duplication Error Rate","Date","Rate",["Error Rate"],[this._apiHandler.getDuplicationRate()],[this.parseMetricsData],"ngx-charts-line-chart",[],["Value"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Time To Save Events To S3","Date","Seconds",["Save Duration"],[this._apiHandler.getSaveDuration()],[this.parseMetricsData],"ngx-charts-line-chart",[],["Average"],void 0,void 0,3e5))},a.prototype.populatePipelineGraphs=function(){this.metricGraphs.push(new g.MetricGraph("Processed SQS Messages","Date","Messages",["Processed Messages"],[this._apiHandler.getProcessedMessages()],[this.parseMetricsData],"ngx-charts-line-chart",[],["Average"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Time To Delete SQS Messages","Date","Seconds",["Delete Duration"],[this._apiHandler.getDeleteDuration()],[this.parseMetricsData],"ngx-charts-line-chart",[],["Average"],void 0,void 0,3e5))},a.prototype.populateDbGraphs=function(){this.metricGraphs.push(new g.MetricGraph("Reads Consumed/Provisioned","Date","Average Capacity",["Consumed","Provisioned"],[this._apiHandler.getCloudWatchMetrics("DynamoDB","ConsumedReadCapacityUnits","TableName","MetricContext","SampleCount",60,8),this._apiHandler.getCloudWatchMetrics("DynamoDB","ProvisionedReadCapacityUnits","TableName","MetricContext","Sum",60,8)],[this.parseDynamoDbMetricsData,this.parseMetricsData],"ngx-charts-line-chart",[],["SampleCount","Sum"],this.colorScheme,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Writes Consumed/Provisioned","Date","Average Capacity",["Consumed","Provisioned"],[this._apiHandler.getCloudWatchMetrics("DynamoDB","ConsumedWriteCapacityUnits","TableName","MetricContext","SampleCount",60,8),this._apiHandler.getCloudWatchMetrics("DynamoDB","ProvisionedWriteCapacityUnits","TableName","MetricContext","Sum",60,8)],[this.parseDynamoDbMetricsData,this.parseMetricsData],"ngx-charts-line-chart",[],["SampleCount","Sum"],this.colorScheme,void 0,3e5))},a.prototype.populateAWSGraphs=function(){this.metricGraphs.push(new g.MetricGraph("Producer Lambda Invocations","Date","Invocations",["Producer Invocations"],[this._apiHandler.getCloudWatchMetrics("Lambda","Invocations","FunctionName","FIFOProducer","SampleCount",300,8)],[this.parseMetricsData],"ngx-charts-line-chart",[],["SampleCount"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Producer Lambda Errors","Date","Errors",["Producer Errors"],[this._apiHandler.getCloudWatchMetrics("Lambda","Errors","FunctionName","FIFOProducer","Sum",300,8)],[this.parseMetricsData],"ngx-charts-line-chart",[],["Sum"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Consumer Lambda Invocations","Date","Invocations",["Consumer Invocations"],[this._apiHandler.getCloudWatchMetrics("Lambda","Invocations","FunctionName","FIFOConsumer","SampleCount",300,8)],[this.parseMetricsData],"ngx-charts-line-chart",[],["SampleCount"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Consumer Lambda Duration","Date","Milliseconds",["Consumer Invocations"],[this._apiHandler.getCloudWatchMetrics("Lambda","Duration","FunctionName","FIFOConsumer","Average",300,8)],[this.parseMetricsData],"ngx-charts-line-chart",[],["Average"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Consumer Lambda Errors","Date","Errors",["Consumer Errors"],[this._apiHandler.getCloudWatchMetrics("Lambda","Errors","FunctionName","FIFOConsumer","Sum",300,8)],[this.parseMetricsData],"ngx-charts-line-chart",[],["Sum"],void 0,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Amoeba Lambda Invocations","Date","Invocations",["Amoeba"],[this._apiHandler.getCloudWatchMetrics("Lambda","Invocations","FunctionName","Amoeba","SampleCount",1200,8)],[this.parseMetricsData],"ngx-charts-line-chart",[],["SampleCount"],this.colorScheme,void 0,3e5)),this.metricGraphs.push(new g.MetricGraph("Ameoba Errors","Date","Errors",["Amoeba"],[this._apiHandler.getCloudWatchMetrics("Lambda","Errors","FunctionName","Amoeba","Sum",1200,8)],[this.parseMetricsData],"ngx-charts-line-chart",[],["Sum"],this.colorScheme,void 0,3e5))},a.prototype.precisionRound=function(a,b){var c=Math.pow(10,b);return Math.round(a*c)/c},a.prototype.parseData=function(a,b,c){void 0===c&&(c=!1);var d=new Date(1e3*a.Timestamp),e=d.getDate(),f=d.getHours(),g=d.getMinutes();return{name:(e<10?"0"+e:e)+" "+(f<10?"0"+f:f)+":"+(g<10?"0"+g:g)+"m",value:c?this.precisionRound(a[b]*h,2):a[b]}},j([c.Input("context"),k("design:type",Object)],a.prototype,"context",void 0),j([c.Input("facetid"),k("design:type",String)],a.prototype,"facetid",void 0),a=j([c.Component({selector:"metric-overview",template:'\n        <div>Charts will become available as data becomes present.  Charts will refresh automatically every 5 minutes. </div>\n        <ng-container>\n                <ng-container *ngFor="let chart of metricGraphs">\n                    <graph [ref]="chart">                                    \n                    </graph>\n                </ng-container>\n        </ng-container>\n    '}),k("design:paramtypes",[e.Http,f.AwsService])],a)}(),a("MetricOverviewComponent",i)}}}),a.register("a1",["6","9e","9","7","a2","44"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){},function(a){g=a}],execute:function(){h=function(){function a(a,b,c){var d=this;this.http=a,this.aws=b,this.toastr=c,this.isLoadingPredefinedPartitions=!0,this.isLoadingCustomPartitions=!0,this.chartTypeOptions=[{text:"Dictionary",type:"map"},{text:"Float",type:"float"},{text:"Integer",type:"int"},{text:"String",type:"str"},{text:"UTCDatetime",type:"datetime.datetime.utcfromtimestamp"}],this.keys=[],this.types=["string","int","datetime","float"],this.parts=['split("/")[0]'],this.initPartitionsFacet=function(){d.predefinedPartitions=new Array,d.newCustomPartition=i.default(),d._apiHandler.getPredefinedPartitions().subscribe(function(a){var b=JSON.parse(a.body.text()).result;if(d.isLoadingPredefinedPartitions=!1,b)for(var c=0,e=b;c<e.length;c++){var f=e[c];d.predefinedPartitions.push(new i(f.parts,f.type,f.key,f.description))}}),d.initCustomPartitions()},this.changeDropdown=function(a){d.newCustomPartition.type=a.type},this.initCustomPartitions=function(){d.customPartitions=new Array,d._apiHandler.getCustomPartitions().subscribe(function(a){var b=JSON.parse(a.body.text()).result;if(d.isLoadingCustomPartitions=!1,b)for(var c=0,e=b;c<e.length;c++){var f=e[c];d.customPartitions.push(new i(f.parts,f.type,f.key,f.description))}})},this.searchKeys=function(a){return a.debounceTime(200).distinctUntilChanged().map(function(a){return d.keys.filter(function(b){return b.toLocaleLowerCase().indexOf(a.toLocaleLowerCase())>-1}).slice(0,10)})},this.searchTypes=function(a){return a.debounceTime(200).distinctUntilChanged().map(function(a){return d.types.filter(function(b){return b.toLocaleLowerCase().indexOf(a.toLocaleLowerCase())>-1}).slice(0,10)})},this.searchParts=function(a){return a.debounceTime(200).distinctUntilChanged().map(function(a){return d.parts.filter(function(b){return b.toLocaleLowerCase().indexOf(a.toLocaleLowerCase())>-1}).slice(0,10)})},this.addCustomPartition=function(){d.customPartitions.push(d.newCustomPartition),d.newCustomPartition=i.default()},this.removeCustomPartition=function(a){return d.customPartitions.splice(d.customPartitions.indexOf(a),1)},this.updateCustomPartitions=function(a){d.isLoadingCustomPartitions=!0;var b={partitions:a};d.newCustomPartition.key&&""!==d.newCustomPartition.key&&(b.partitions.push(d.newCustomPartition),d.newCustomPartition=i.default());for(var c in a)console.log(a[c].parts),a[c].parts&&0!=a[c].parts.length||delete a[c].parts,delete a[c].description;d._apiHandler.updatePartitions(b).subscribe(function(a){d.toastr.success("Updated custom partitions"),d.initCustomPartitions()},function(a){d.toastr.error("Unable to update custom partitions",a),d.initCustomPartitions()})}}return a.prototype.ngOnInit=function(){this._apiHandler=new d.CloudGemMetricApi(this.context.ServiceUrl,this.http,this.aws),this.initPartitionsFacet()},j([c.Input(),k("design:type",Object)],a.prototype,"context",void 0),a=j([c.Component({selector:"metric-partitions",template:'\n        <h2> Required </h2>\n        <ng-container [ngSwitch]="isLoadingPredefinedPartitions">\n            <p> Partitions are used by Athena as indexes for your data.  They are effectively <a target="s3" href="https://s3.console.aws.amazon.com/s3/home?region=us-east-1#">S3 key</a> paths.  Querying based on partitions will increase performance and decrease costs.  When Athena uses partitions it only has to scan a subset of the entire dataset. The Cloud Gem Metric gives you some default partitions out of the box.   </p>\n            <div *ngSwitchCase="true">\n                <loading-spinner> </loading-spinner>\n            </div>\n            <div *ngSwitchCase="false">                                  \n                <div class="row">\n                    <div class="col-lg-3">\n                        <label> ATTRIBUTE NAME </label>\n                    </div>\n                    <div class="col-lg-3">\n                        <label> TYPE </label>\n                    </div>\n                    <div class="col-lg-3">\n                        <label> PARTS </label>\n                    </div>\n                </div>                \n                <div class="row partition" *ngFor="let partition of predefinedPartitions">\n                    <div class="col-lg-3">\n                        <label >{{partition.key}}</label>        \n                        <tooltip placement="right" [tooltip]="partition.description"> </tooltip>\n                    </div>\n                    <div class="col-lg-3">\n                        {{partition.type}}\n                    </div>\n                    <div class="col-lg-3">\n                        {{partition.parts}}\n                    </div>                    \n                </div>\n            </div>\n        </ng-container>\n        <h2> Custom </h2>\n        <ng-container [ngSwitch]="isLoadingCustomPartitions">\n            <div *ngSwitchCase="true">\n                <loading-spinner> </loading-spinner>\n            </div>\n            <div *ngSwitchCase="false">\n                <p>ADVANCED USER AREA</p>\n                <p>Create your own custom partitions.  Remember that the more partitions you have the smaller the partition files will be.  Too many partitions can decrease performance.<br />Changing the order after data has been written can cause random tables to appear in Athena.</p>\n                <div class="row">\n                    <div class="col-lg-3">\n                        <label> ATTRIBUTE NAME <tooltip placement="right" tooltip="The short event attribute name being sent from your game."> </tooltip></label>\n                    </div>\n                    <div class="col-lg-3">\n                        <label> TYPE <tooltip placement="right" tooltip="The attribute value type.  Currently there is only support int, str, float, datetime.datetime.utcfromtimestamp, and dictionary"> </tooltip> </label>\n                    </div>\n                    <div class="col-lg-3">\n                        <label> PARTS <tooltip placement="right" tooltip="A type of function to call on the casted type.  Example. My type is datetime.datetime.utcfromtimestamp so I can call .year, .month, .day, or .hour."> </tooltip></label>\n                    </div>\n                </div>                \n                <div class="row partition" *ngFor="let customPartition of customPartitions">\n                    <div class="col-lg-3">\n                        <input type="text" class="form-control" [(ngModel)]="customPartition.key" [ngbTypeahead]="searchKeys" />\n                    </div>\n                    <div class="col-lg-3">\n                        <input type="text" class="form-control" [(ngModel)]="customPartition.type" [ngbTypeahead]="searchTypes" />\n                    </div>\n                    <div class="col-lg-3">\n                        <input type="text" class="form-control" [(ngModel)]="customPartition.parts" [ngbTypeahead]="searchParts" />\n                    </div>\n                    <i (click)="removeCustomPartition(customPartition)" class="fa fa-trash-o"></i>\n                </div>\n                <div class="row partition">\n                    <div class="col-lg-3">\n                        <input type="text" class="custom-partition form-control"  [(ngModel)]="newCustomPartition.key" [ngbTypeahead]="searchKeys" />\n                    </div>\n                    <div class="col-lg-3">                        \n                        <dropdown class="custom-partition" (dropdownChanged)="changeDropdown($event)" [options]="chartTypeOptions" placeholderText="String"> </dropdown>\n                    </div>\n                    <div class="col-lg-3">\n                        <input type="text" class="custom-partition form-control"  [(ngModel)]="newCustomPartition.parts" [ngbTypeahead]="searchParts" />\n                    </div>\n                </div>\n                <div class="add-partition">\n                    <button (click)="addCustomPartition(newCustomPartition)" class="btn btn-outline-primary"> + Add Option </button>\n                </div>\n                <div class="update-partitions">\n                    <button (click)="updateCustomPartitions(customPartitions)" class="form-control l-primary btn"> Update Custom Partitions </button>\n                </div>\n            </div>\n        </ng-container>\n\n    ',styles:["\n        th {\n            width: 20%;\n        }\n        .row.partition {\n            margin-bottom: 15px;\n        }\n\n        .partition i {\n            line-height: 35px;\n        }\n\n        .add-partition {\n            margin-bottom: 30px;\n        }\n\n        .update-partitions {\n            margin-bottom: 15px;\n        }\n"]}),k("design:paramtypes",[f.Http,e.AwsService,g.ToastsManager])],a)}(),a("MetricPartitionsComponent",h),i=function(){function a(a,b,c,d){this.parts=a,this.type=b,this.key=c,this.description=d}return a.default=function(){return new a([],"string","","")},a}(),a("Partition",i)}}}),a.register("a3",["6","9e","9","7","44","69"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){}],execute:function(){h=function(){function a(a,b,c){var d=this;this.http=a,this.aws=b,this.toastr=c,this.events=[],this.platformOptions=[{text:"All"}],this.typeOptions=[{text:"All"},{text:"Attribute"}],this.isLoadingFilters=!0,this.hasAttributes=!1,this.getExistingFilters=function(){d.filters=new Array,d._apiHandler.getFilters().subscribe(function(a){JSON.parse(a.body.text()).result.filters.map(function(a,b){a.attributes.length>0&&(d.hasAttributes=!0),a.precedence||(a.precedence=b),d.filters.push(new i(a.event,a.platform,a.type,a.attributes,a.precedence))}),d.isLoadingFilters=!1})},this.getExistingPriorities=function(){d.priorities=new Array,d._apiHandler.getPriorities().subscribe(function(a){JSON.parse(a.body.text()).result.priorities.map(function(a,b){d.priorities.push(a)}),d.isLoadingFilters=!1})},this.addFilter=function(){return d.filters.push(i.default())},this.removeFilter=function(a){return d.filters.splice(d.filters.indexOf(a),1)},this.addPriority=function(){return d.priorities.push("")},this.removePriority=function(a){return d.priorities.splice(d.priorities.indexOf(a),1)},this.addAttribute=function(a){return a.attributes.push("")},this.removeAttribute=function(a,b){return a.attributes.splice(a.attributes.indexOf(b),1)},this.updateFilterType=function(a,b){b.type=a.text,"Attribute"===b.type&&(d.hasAttributes=!0)},this.updateFilterPlatform=function(a,b){return b.platform=a.text},this.onValueUpdate=function(a,b){d.priorities[b]=a.target.value},this.updateFilters=function(a){d.isLoadingFilters=!0,a.map(function(a){delete a.platformDropdownValue,delete a.typeDropdownValue,a.attributes.forEach(function(b,c){b||a.attributes.splice(c,1)})});var b={filters:a};d._apiHandler.updateFilters(b).subscribe(function(){d.toastr.success("Updated filters"),d.getExistingFilters(),d._apiHandler.updatePriorities({priorities:d.priorities}).subscribe(function(){d.toastr.success("Updated filter priorities")},function(a){d.toastr.error("Unable to update filter priorities.",a),console.error(a)})},function(a){d.toastr.error("Unable to update Filters",a),d.isLoadingFilters=!1,console.error(a)})},this.onPriorityChanged=function(a,b,c){for(var e=[],f=0,g=b.children;f<g.length;f++){var h=g[f];e.push(h.id)}d.priorities=e},this.searchEvents=function(a){return a.debounceTime(200).distinctUntilChanged().map(function(a){return d.events.filter(function(b){return b.toLocaleLowerCase().indexOf(a.toLocaleLowerCase())>-1}).slice(0,10)})}}return a.prototype.ngOnInit=function(){var a=this;this._apiHandler=new d.CloudGemMetricApi(this.context.ServiceUrl,this.http,this.aws),this._apiHandler.getFilterEvents().subscribe(function(b){JSON.parse(b.body.text()).result.map(function(b){return a.events.push(b)})}),this._apiHandler.getFilterPlatforms().subscribe(function(b){JSON.parse(b.body.text()).result.map(function(b){a.platformOptions.push({text:b})})}),this.getExistingFilters(),this.getExistingPriorities()},a.prototype.changeFilterOrdering=function(a,b){var c=[];return a.map(function(a){b.map(function(b){b.event===a&&c.push(b)})}),c},j([c.Input(),k("design:type",Object)],a.prototype,"context",void 0),a=j([c.Component({selector:"metric-filtering",template:'\n        <ng-template #loading>\n            <loading-spinner></loading-spinner>\n        </ng-template>\n        <div class="filter-section-container">\n            <p>\n                What events would you like to filter out?  These metrics will not be recorded and cannot be recovered.\n            </p>\n            <div class="filter-events-container container" *ngIf="!isLoadingFilters; else loading">\n                <div class="row labels">\n                    <div class="col-2">\n                        <label> EVENT NAME </label>\n                    </div>\n                    <div class="col-2">\n                        <label> PLATFORM </label>\n                    </div>\n                    <div class="col-2">\n                        <label> TYPE </label>\n                    </div>\n                    <div class="col-2" *ngIf="hasAttributes">\n                        <label> ATTRIBUTES </label>\n                    </div>\n                </div>\n                <div class="row filters" *ngFor="let filter of filters">\n                    <div class="col-2">\n                        <input type="text" class="form-control" [ngbTypeahead]="searchEvents" [(ngModel)]="filter.event" />\n                    </div>\n                    <div class="col-2">\n                        <dropdown [options]="platformOptions" (dropdownChanged)="updateFilterPlatform($event, filter)" placeholderText="Platform" [currentOption]="filter.platformDropdownValue" name="dropdown" ></dropdown>\n                    </div>\n                    <div class="col-2">\n                        <dropdown [options]="typeOptions" (dropdownChanged)="updateFilterType($event, filter)" placeholderText="Type" [currentOption]="filter.typeDropdownValue" name="dropdown" ></dropdown>\n                    </div>\n                    <div class="col-4" class="event-attributes" *ngIf="filter.type === \'Attribute\'">\n                        <div class="row" *ngFor="let attribute of filter.attributes; let i = index;">\n                            <div class="col-6">\n                                <input type="text" class="form-control" [(ngModel)]="filter.attributes[i]" />\n                            </div>\n                            <div *ngIf="i === filter.attributes.length - 1" class="col-6">\n                                <button type="button" class="btn btn-outline-primary" (click)="addAttribute(filter)"> + Add Attribute </button>\n                            </div>\n                            <div *ngIf="filter.attributes.length > 1 && i < filter.attributes.length - 1" class="col-6">\n                                <button type="button" class="btn btn-outline-primary" (click)="removeAttribute(filter, attribute)"> - Remove Attribute </button>\n                            </div>\n                        </div>\n                    </div>\n                    <i (click)="removeFilter(filter)" class="fa fa-trash-o float-right"> </i>\n                </div>\n                <div class="row add-filter">\n                    <div class="col-lg-2">\n                        <button type="button" class="btn btn-outline-primary" (click)="addFilter()"> + Add Filter </button>\n                    </div>\n                </div>\n                <h2> Priority </h2>\n                <p> Event priority is used to define what events should take priority when the local game disk space is low.  The threshold for when prioritization takes place can be changed in the Cloud Gem Metric settings facet.  It is labelled as "Prioritization Threshold".  Priority for events goes from highest priority at the top to lowest priority at the bottom.  Events without priortization defined are dropped when local disk space is limited.\n                <div class="priority-dragable-container" *ngIf="!isLoadingFilters; else loading">\n                    <div class="priority-label-high">\n                        <label> Highest Priority </label>\n                    </div>\n                    <dragable [drop]="onPriorityChanged">\n                        <div *ngFor="let priority of priorities; let i = index" [id]="priorities[i]">                            \n                            <div class="row">\n                                <div class="valign-middle col-4">Rank {{i+1}}:</div>\n                                <div class="col-7"><input type="text" class="form-control" [ngbTypeahead]="searchEvents" [ngModel]="priorities[i]" (change)="onValueUpdate($event, i)" /></div>\n                                <div class="col-1"><i (click)="removePriority(i)" class="fa fa-trash-o float-right cursor-pointer"></i></div>                                \n                            </div>\n                        </div>\n                    </dragable>\n                    <div class="priority-label-low">\n                        <label class="priority-label-low"> Lowest Priority </label>\n                    </div>\n                </div>\n                <div class="row add-priority">\n                    <div class="col-lg-2">\n                        <button type="button" class="btn btn-outline-primary" (click)="addPriority()"> + Add Priority </button>\n                    </div>\n                </div>\n                <div class="row update-event-filters">\n                    <div class="col-lg-2">\n                        <button type="submit" (click)="updateFilters(filters)" class="btn l-primary"> Update Filters </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ',styles:["\n        .row {\n            margin-bottom: 15px;\n        }\n        .filter-events-container dropdown {\n            margin-right: 15px;\n        }\n        .filter-section-container {\n            margin-bottom: 20px;\n            max-width: 1000px;\n        }\n        .filter-priority-container {\n            max-width: 1000px;\n        }\n        .add-filter {\n            margin-top: 20px;\n            margin-bottom: 30px;\n        }\n        .update-event-filters {\n            margin-bottom: 15px;\n        }\n        .labels {\n            margin-bottom: 10px;\n        }\n        .row.event-attributes {\n            padding: 0;\n        }\n        .row i {\n            line-height: 30px;\n        }\n        .filters.row button {\n            width: 135px;\n            text-align: center;\n        }\n        .priority-dragable-container {\n            width: 450px;\n            margin-left: 15px;\n        }\n        .priority-label-high {\n            margin-bottom: 10px;\n        }\n        .priority-label-low {\n            margin-top: 10px;\n            margin-bottom: 20px;\n        }\n        .priority-update {\n            margin-top: 15px;\n        }\n        .cursor-pointer {\n            cursor: pointer !important;\n        }\n    "]}),k("design:paramtypes",[f.Http,e.AwsService,g.ToastsManager])],a)}(),a("MetricFilteringComponent",h),i=function(){function a(a,b,c,d,e){this.event=a,this.platform=b,this.attributes=d,this.precedence=e,this.type="all"===c?"All":"attribute"===c?"Attribute":c,this.platformDropdownValue={text:this.platform},this.typeDropdownValue={text:this.type}}return a.default=function(){return new a("","All","All",[""])},a}(),a("Filter",i)}}}),a.register("a4",["6","1b","7","9","9e","44"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(){function a(a,b,c,e){var f=this;this.http=a,this.aws=b,this.fb=c,this.toastr=e,this.someRange=[1,50],this.crawlerStatus="initializing",this.booleanOptions=[{text:"False"},{text:"True"}],this.writeLongLat="False",this.writeDetailedCloudWatchEvents="False",this.getSettings=function(){f._apiHandler.getSettings().subscribe(function(a){var b=JSON.parse(a.body.text()).result;f.settingsForm=f.fb.group({growth_rate_trigger_percent:[100*b.growth_rate_trigger,d.Validators.required],csv_parquet_compression_ratio:[b.csv_parquet_compression_ratio,d.Validators.required],backoff_max_seconds:[b.backoff_max_seconds,d.Validators.required],amoeba_target_aggregation_file_size_in_MB:[b.amoeba_target_aggregation_file_size_in_MB,d.Validators.required],number_of_initial_consumer_invokes:[b.number_of_initial_consumer_invokes,d.Validators.required],backoff_base_seconds:[b.backoff_base_seconds,d.Validators.required],max_inflight_messages:[b.max_inflight_messages,d.Validators.required],threshold_before_spawning_new_lambda:[b.threshold_before_spawning_new_lambda,d.Validators.required],backoff_max_trys:[b.backoff_max_trys,d.Validators.required],max_message_retry:[b.max_message_retry,d.Validators.required],csv_seperator:[b.csv_seperator,d.Validators.required],fifo_limit_before_new_q:[b.fifo_limit_before_new_q,d.Validators.required],mem_trigger:[b.mem_trigger,d.Validators.required],amoeba_mem_trigger:[b.amoeba_mem_trigger,d.Validators.required],max_lambda_execution_time:[b.max_lambda_execution_time,d.Validators.required],aggregation_period_in_sec:[b.aggregation_period_in_sec,d.Validators.required],buffer_flush_to_file_interval_sec:[b.buffer_flush_to_file_interval_sec,d.Validators.required],buffer_flush_to_file_max_in_bytes:[b.buffer_flush_to_file_max_in_bytes,d.Validators.required],file_max_metrics_to_send_in_batch_in_mb:[b.file_max_metrics_to_send_in_batch_in_mb,d.Validators.required],file_send_metrics_interval_in_seconds:[b.file_send_metrics_interval_in_seconds,d.Validators.required],file_max_size_in_mb:[b.file_max_size_in_mb,d.Validators.required],file_threshold_to_prioritize_in_perc:[b.file_threshold_to_prioritize_in_perc,d.Validators.required],frequency_to_check_to_spawn:[b.frequency_to_check_to_spawn,d.Validators.required],frequency_to_check_sqs_state:[b.frequency_to_check_sqs_state,d.Validators.required]}),f.writeLongLat=b.write_long_lat,f.writeDetailedCloudWatchEvents=b.write_detailed_cloudwatch_event,f.isLoadingSettings=!1})},this.updateSettings=function(){f.isLoadingSettings=!0;var a=f.settingsForm.value;a.growth_rate_trigger=(a.growth_rate_trigger_percent/100).toString(),a.write_long_lat=f.writeLongLat,a.write_detailed_cloudwatch_event=f.writeDetailedCloudWatchEvents,delete a.growth_rate_trigger_percent,f._apiHandler.updateSettings(a).subscribe(function(){f.toastr.success("The settings have been updated successfully."),f.getSettings()},function(a){return f.toastr.error("Unable to update settings: "+a)})},this.invokeConsumer=function(){f._apiHandler.invokeConsumer().subscribe(function(){f.toastr.success("Invoking SQS message consumer")},function(a){return console.log("Unable to invoke SQS consumer: "+a)})},this.invokeAmoeba=function(){f._apiHandler.invokeAmoeba().subscribe(function(){f.toastr.success("Invoking amoeba S3 file aggregator")},function(a){return console.log("Unable to invoke amoeba file aggregator: "+a)})},this.invokeCrawler=function(){f._apiHandler.invokeCrawler().subscribe(function(){f.toastr.success("Invoking AWS GLUE lambda")},function(a){return console.log("Unable to invoke GLUE lambda: "+a)})},this.getCrawlerStatus=function(){f._apiHandler.getCrawlerStatus(f._crawlerName).subscribe(function(a){var b=JSON.parse(a.body.text()).result;f.crawlerStatus=b.Data.State},function(a){return console.log("Unable to get GLUE lambda status: "+a)})},this.updateWriteLongLat=function(a){f.writeLongLat=a.text},this.updateWriteDetailedCloudWatchEvents=function(a){f.writeDetailedCloudWatchEvents=a.text}}return a.prototype.ngOnInit=function(){var a=this;this._apiHandler=new g.CloudGemMetricApi(this.context.ServiceUrl,this.http,this.aws),this.isLoadingSettings=!0,this.getSettings(),this._crawlerName=(this.aws.context.name.replace("-","_")+"_"+this.aws.context.project.activeDeployment.settings.name.replace("-","_")+"_cloudgemmetric").toLowerCase(),this._statusTimeout=setInterval(function(){a.getCrawlerStatus()},5e3)},a.prototype.ngOnDestroy=function(){clearInterval(this._statusTimeout)},j([c.Input(),k("design:type",Object)],a.prototype,"context",void 0),a=j([c.Component({selector:"metric-settings",template:'\n        <div class="metric-settings-container">\n            <h2> Configure Settings </h2>\n            <ng-container [ngSwitch]="isLoadingSettings">\n                <div *ngSwitchCase="true">\n                    <loading-spinner></loading-spinner>\n                </div>\n                <div *ngSwitchCase="false">\n                    <form [formGroup]="settingsForm" class="settingsForm" (ngSubmit)="updateSettings()" novalidate>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Growth Rate Trigger Percent </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="0" [max]="100" [step]="1.0" [formControl]="settingsForm.controls.growth_rate_trigger_percent" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.growth_rate_trigger_percent.value}}% </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The SQS message growth rate threshold for when a new consumer will be created."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> CSV Parquet Compression Ratio</label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="50" [step]="1.0" [formControl]="settingsForm.controls.csv_parquet_compression_ratio" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.csv_parquet_compression_ratio.value}}% </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The estimated compression ratio going from CSV to PARQUET format.  This is used for estimation purposes."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Backoff Max Seconds</label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="15" [step]="1.0" [formControl]="settingsForm.controls.backoff_max_seconds" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.backoff_max_seconds.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The maximum back off period in seconds for failed AWS requests."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3">  Target Amoeba Aggregation File Size </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="40" [step]="1.0" [formControl]="settingsForm.controls.amoeba_target_aggregation_file_size_in_MB" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.amoeba_target_aggregation_file_size_in_MB.value}} MB </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The target aggregation file size in MB.  The amoeba file generator will attempt to generate S3 parquet files of this size.  128 MB is ideal but lambdas are memory restricted.  In this environment 32MB is best."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Number Of Initial Consumers </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="10" [step]="1.0" [formControl]="settingsForm.controls.number_of_initial_consumer_invokes" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.number_of_initial_consumer_invokes.value}} consumer(s) </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The number of initial SQS consumers to trigger during each schedule execution date.  The consumer lambdas are self-replicating in two circumstances; 1 - The growth rate threshold is exceeded.  2 - The SQS queue size threshold is exceeded."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Backoff Base Seconds</label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="15" [step]="1.0" [formControl]="settingsForm.controls.backoff_base_seconds" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.backoff_base_seconds.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The initial back off period in seconds for failed AWS requests."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Max In-flight Messages</label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1000" [max]="15000" [step]="100" [formControl]="settingsForm.controls.max_inflight_messages" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.max_inflight_messages.value}} messages </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The maximum allowable inflight messages for any given SQS queue.  If a queue reaches this threshold no more messages will be processed until the inflight number drops below the threshold."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Frequency To Check SQS State</label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="45" [step]="1" [formControl]="settingsForm.controls.frequency_to_check_sqs_state" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.frequency_to_check_sqs_state.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The frequency in which to check the SQS state.  This requires querying the SQS service. \'Frequency To Check Spawning Threshold\' should be a multiple of this."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Threshold Before Spawning New Consumer Lamdba</label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1000" [max]="15000" [step]="100" [formControl]="settingsForm.controls.threshold_before_spawning_new_lambda" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.threshold_before_spawning_new_lambda.value}} messages </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The SQS queue size threshold before a new consumer will be spawned automatically."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Frequency To Check Spawning Threshold</label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="30" [step]="1" [formControl]="settingsForm.controls.frequency_to_check_to_spawn" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.frequency_to_check_to_spawn.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The frequency in which to check the threshold for spawning a new consumer lambda."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Backoff Max Attempts </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="15" [step]="1.0" [formControl]="settingsForm.controls.backoff_max_trys" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.backoff_max_trys.value}} attempts </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The maximum number of attempts for failed AWS requests."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Max Message Retry </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="15" [step]="1.0" [formControl]="settingsForm.controls.max_message_retry" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.max_message_retry.value}} retries </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The maximum number of retries before a message starting logging as an error.  Messages that are processed multiple times are considered to be in error."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> CSV Separator </label>\n                            <input class="form-control" type="string" formControlName="csv_seperator" >\n                            <tooltip placement="right" tooltip="The separator used both for encoding the client CSV and decoding the SQS message payload."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> FIFO Limit Before New Queue </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1000" [max]="15000" [step]="100" [formControl]="settingsForm.controls.fifo_limit_before_new_q" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.fifo_limit_before_new_q.value}} inflight messages </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The threshold for when a new SQS queue is generated.  The threshold is based on in-flight messages (number of messages being processed) as SQS FIFO queues are limited to 20,000 in-flight messages."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Memory Trigger </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="90" [step]="1.0" [formControl]="settingsForm.controls.mem_trigger" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.mem_trigger.value}}% </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The memory threshold in percentage for when to start saving to S3 files."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Amoeba Memory Trigger </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="70" [step]="1.0" [formControl]="settingsForm.controls.amoeba_mem_trigger" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.amoeba_mem_trigger.value}}% </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The memory threshold in percentage for when the amoeba single file generator should to start saving to S3 files."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Max Lambda Execution Time  </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="60" [max]="275" [step]="1.0" [formControl]="settingsForm.controls.max_lambda_execution_time" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.max_lambda_execution_time.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The maximum lambda execution time.  This is used as a internal timer to determine the process windows for each step of the aggregation (parse SQS message, save to S3, delete message)."> </tooltip>\n                        </div>                        \n                        <div class="form-group row">\n                            <label class="col-lg-3"> Aggregation Period </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="1" [max]="275" [step]="1.0" [formControl]="settingsForm.controls.aggregation_period_in_sec" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.aggregation_period_in_sec.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The target aggregation window size.  This will be the default aggregation window size.  It can be overridden based on contextual information provided by telemetry data."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Flush To Local File </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="128" [max]="1048576" [step]="10" [formControl]="settingsForm.controls.buffer_flush_to_file_max_in_bytes" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.buffer_flush_to_file_max_in_bytes.value}} bytes </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The size in bytes of the memory buffer before sending the metrics in the mermory buffer to local file."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Flush To Local File </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="5" [max]="600" [step]="5" [formControl]="settingsForm.controls.buffer_flush_to_file_interval_sec" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.buffer_flush_to_file_interval_sec.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The period of time in seconds before sending the metrics in the mermory buffer to local file."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Max Local File Size </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="15" [max]="6000" [step]="10.0" [formControl]="settingsForm.controls.file_max_size_in_mb" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.file_max_size_in_mb.value}} megabytes </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The maximum local file size in MB before all metrics are dropped. Lower bound 2 MB, upper bound 20 MB"> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Flush To AWS </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="150" [max]="1800" [step]="10" [formControl]="settingsForm.controls.file_send_metrics_interval_in_seconds" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.file_send_metrics_interval_in_seconds.value}} seconds </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The period of time in seconds before flushing the local file to AWS. Lower bound 150 seconds, upper bound 1800 seconds"> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Max Payload Size </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="2" [max]="9" [step]="0.1" [formControl]="settingsForm.controls.file_max_metrics_to_send_in_batch_in_mb" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.file_max_metrics_to_send_in_batch_in_mb.value}} megabytes </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The maximum size in MB in which we can send to AWS. Lower bound 2 MB, upper bound 9 MB"> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Prioritization Threshold </label>\n                            <div class="slider-container">\n                                <nouislider [connect]="[true, false]" [min]="20" [max]="100" [step]="5" [formControl]="settingsForm.controls.file_threshold_to_prioritize_in_perc" >\n                                </nouislider>\n                                <span class="small"> {{settingsForm.controls.file_threshold_to_prioritize_in_perc.value}} % </span>\n                            </div>\n                            <tooltip placement="right" tooltip="The percentage threshold of the file_max_size_in_mb in which we will start to prioritize events.  Events of lower priority are dropped as local disk space runs out. Lower bound 20 %, upper bound 100 %"> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Save Longitude/Latitude </label>\n                            <div class="slider-container">\n                                <div class="col-2">\n                                    <dropdown [options]="booleanOptions" (dropdownChanged)="updateWriteLongLat($event)" [currentOption]="{text:writeLongLat}" name="dropdown" ></dropdown>\n                                </div>                                \n                            </div>\n                            <tooltip placement="right" tooltip="Longitude/Latitude is considered personally identifiable information in some countries and is against the law. It is disabled by default."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <label class="col-lg-3"> Save Detailed Event Information </label>\n                            <div class="slider-container">\n                                <div class="col-2">\n                                    <dropdown [options]="booleanOptions" (dropdownChanged)="updateWriteDetailedCloudWatchEvents($event)" [currentOption]="{text:writeDetailedCloudWatchEvents}" name="dropdown" ></dropdown>\n                                </div>                                \n                            </div>\n                            <tooltip placement="right" tooltip="Set the value to True to have detailed counts of the types of events created in AWS CloudWatch.  Mainly used for creating CloudWatch Alarms."> </tooltip>\n                        </div>\n                        <div class="form-group row">\n                            <button class="btn l-primary btn-primary" type="submit">\n                                Update Settings\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </ng-container>\n        </div>\n        <div class="metric-settings-container extra-actions">\n            <h2> Extra Actions </h2>\n            <h3> Consume SQS Messages </h3>\n            <p>\n                This command will invoke a SQS message consumer.  The consumer will aggregate and write the metrics in each SQS message to S3.\n            </p>\n            <button class="btn btn-outline-primary" (click)="invokeConsumer()"> Consume </button>\n            <h3> Amoeba Generator </h3>\n            <p>\n                This command will invoke the Amoeba generator.  The generator will crawl the S3 bucket and combine multiple small files into a single large S3 file to optimize for Athena consumption.  Files that have gone through this process will have a "_combined" filename suffix.\n            </p>\n            <button class="btn btn-outline-primary" (click)="invokeAmoeba()"> Unleash Amoeba </button>\n            <h3> AWS Glue Crawler </h3>\n            <p>\n                This command will invoke the GLUE lambda crawler.  The lambda will query the database tables, attempt to recover corrupt partitions, and start the AWS Glue crawler.\n            </p>\n            <button class="btn btn-outline-primary" (click)="invokeCrawler()"> Crawl </button> \n            <p>The AWS GLUE data crawler is {{crawlerStatus}}.</p>\n            \n        </div>\n    ',styles:["\n        .metric-settings-container {\n            margin-bottom: 25px;\n        }\n        .metric-settings-container > h2 {\n            margin-bottom: 25px;\n        }\n        .metric-settings-container.extra-actions > h2 {\n            margin-bottom: 15px;\n        }\n        .form-group.row > label {\n            max-width: 275px;\n            margin-top: 8px;\n        }\n        .form-group.row input{\n            width: 70px;\n        }\n        .extra-actions > button {\n            margin-bottom: 30px;\n        }\n        nouislider {\n            width: 200px;\n            margin-top: 8px;\n            margin-right: 10px;\n        }\n    "]}),k("design:paramtypes",[e.Http,f.AwsService,d.FormBuilder,h.ToastsManager])],a)}(),a("MetricSettingsComponent",i)}}}),a.register("a5",["10","9c","9d","11","6","9f","a1","a3","a4"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a},function(a){k=a}],execute:function(){l=function(){function a(){}return a=m([g.NgModule({imports:[f.GameSharedModule,c.GemModule],declarations:[d.CloudGemMetricIndexComponent,e.CloudGemMetricThumbnailComponent,h.MetricOverviewComponent,i.MetricPartitionsComponent,j.MetricFilteringComponent,k.MetricSettingsComponent],bootstrap:[e.CloudGemMetricThumbnailComponent,d.CloudGemMetricIndexComponent]})],a)}(),a("CloudGemMetricModule",l)}}}),a.register("9e",["3","5b","a6","a7","a8","a9"],function(a,b){"use strict";var c,d,e,f,g=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){},function(a){},function(a){}],execute:function(){f=function(a){function b(b,c,d){var e=a.call(this,b,c,d)||this;return e.serviceBaseURL=b,e}return g(b,a),b.prototype.getDashboard=function(b){return a.prototype.get.call(this,"dashboard/"+b.toLocaleLowerCase().trim()).map(function(a){var b=JSON.parse(JSON.parse(a.body.text()).result).Items;return b.length>0?b[0].value:b})},b.prototype.postDashboard=function(b,c){return a.prototype.post.call(this,"dashboard/"+b,c)},b.prototype.getCloudWatchMetrics=function(b,c,d,e,f,g,h){return a.prototype.get.call(this,"graph/cloudwatch?namespace="+b+"&metric_name="+c+"&dimension_name="+d+"&dimension_value="+e+"&aggregation_type="+f+"&period_in_seconds="+g+"&time_delta_hours="+h)},b.prototype.getCurrentDeleteDuration=function(){return a.prototype.get.call(this,"graph/consumer/current/duration/delete")},b.prototype.getCurrentSaveDuration=function(){return a.prototype.get.call(this,"graph/consumer/current/duration/save")},b.prototype.getDeleteDuration=function(){return a.prototype.get.call(this,"graph/consumer/delete/duration")},b.prototype.getProcessedBytes=function(){return a.prototype.get.call(this,"graph/consumer/processed/bytes")},b.prototype.getProcessedMessages=function(){return a.prototype.get.call(this,"graph/consumer/processed/messages")},b.prototype.getRowsAdded=function(){return a.prototype.get.call(this,"graph/consumer/rows/added")},b.prototype.getSaveDuration=function(){return a.prototype.get.call(this,"graph/consumer/save/duration")},b.prototype.getPredefinedPartitions=function(){return a.prototype.get.call(this,"partition/predefined")},b.prototype.getCustomPartitions=function(){return a.prototype.get.call(this,"partition/custom")},b.prototype.getDuplicationRate=function(){return a.prototype.get.call(this,"athena/query/duplication/rate")},b.prototype.updatePartitions=function(b){return a.prototype.post.call(this,"partition",b)},b.prototype.getFilters=function(){return a.prototype.get.call(this,"filter")},b.prototype.updateFilters=function(b){return a.prototype.post.call(this,"filter",b)},b.prototype.getPriorities=function(){return a.prototype.get.call(this,"priority")},b.prototype.updatePriorities=function(b){return a.prototype.post.call(this,"priority",b)},b.prototype.getSettings=function(){return a.prototype.get.call(this,"setting")},b.prototype.updateSettings=function(b){return a.prototype.post.call(this,"setting",b)},b.prototype.getFilterEvents=function(){return a.prototype.get.call(this,"athena/query/events")},b.prototype.getFilterPlatforms=function(){return a.prototype.get.call(this,"athena/query/platforms")},b.prototype.postQuery=function(b){var c=this,f=new e.BehaviorSubject(null),g=a.prototype.post.call(this,"athena/query",{sql:b}).map(function(a){var b=JSON.parse(a.body.text()).result;c.getQueryStatus(b,f)},function(a){f.error(a)});return d.Observable.merge(f,g).filter(function(a){return void 0!=a})},b.prototype.getQueryStatus=function(b,c){var d=this;a.prototype.get.call(this,"athena/query/"+b).subscribe(function(a){var e=JSON.parse(a.body.text()).result,f=e.Status.State;"SUCCEEDED"==f||"FAILED"==f||"CANCELLED"==f?c.next(e):setTimeout(d.getQueryStatus(b,c),750)},function(a){c.error(a)})},b.prototype.getCrawlerStatus=function(b){return a.prototype.get.call(this,"glue/crawler/crawl/status?name="+b)},b.prototype.getStatus=function(){return a.prototype.get.call(this,"service/status")},b.prototype.invokeConsumer=function(){return a.prototype.post.call(this,"consumer/consume/message")},b.prototype.invokeAmoeba=function(){return a.prototype.post.call(this,"amoeba/consume/file")},b.prototype.invokeCrawler=function(){return a.prototype.post.call(this,"glue/crawler/crawl")},b.prototype.createHeatmap=function(b){return a.prototype.post.call(this,"heatmaps",b)},b.prototype.getHeatmap=function(b){return a.prototype.get.call(this,"heatmaps/"+b)},b.prototype.deleteHeatmap=function(b){return a.prototype.delete.call(this,"heatmaps/"+b)},b.prototype.listHeatmaps=function(){return a.prototype.get.call(this,"heatmaps")},b.prototype.updateHeatmap=function(b,c){return a.prototype.put.call(this,"heatmaps/"+b,c)},b}(c.ApiHandler),a("CloudGemMetricApi",f)}}}),a.register("aa",["9d","9c","a5","9e"],function(a,b){"use strict";function c(b){var c={};for(var d in b)"default"!==d&&(c[d]=b[d]);a(c)}b&&b.id;return{setters:[function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)}],execute:function(){}}}),a.register("9b",["aa"],function(a,b){"use strict";function c(a){return e.CloudGemMetricModule}function d(){return f.CloudGemMetricApi}b&&b.id;a("definition",c),a("serviceApiType",d);var e,f;return{setters:[function(a){e=a,f=a}],execute:function(){}}})})(function(a){if("function"==typeof define&&define.amd)define(["@angular/core","app/view/game/module/cloudgems/class/index.js","@angular/http","app/aws/aws.service.js","app/view/game/module/shared/class/index.js","app/view/game/module/shared/class/metric-graph.class.js","rxjs/add/operator/combineLatest.js","rxjs/add/operator/do.js","ng2-toastr/ng2-toastr.js","rxjs/add/operator/distinctUntilChanged.js","@angular/forms","app/view/game/module/cloudgems/gem.module.js","app/view/game/module/shared/shared.module.js","app/shared/class/index.js","rxjs/Observable.js","rxjs/BehaviorSubject.js","rxjs/add/observable/merge.js","rxjs/add/operator/filter.js","rxjs/add/observable/throw.js"],a);else{if("object"!=typeof module||!module.exports||"function"!=typeof require)throw new Error("Module must be loaded as AMD or CommonJS");module.exports=a(require("@angular/core"),require("app/view/game/module/cloudgems/class/index.js"),require("@angular/http"),require("app/aws/aws.service.js"),require("app/view/game/module/shared/class/index.js"),require("app/view/game/module/shared/class/metric-graph.class.js"),require("rxjs/add/operator/combineLatest.js"),require("rxjs/add/operator/do.js"),require("ng2-toastr/ng2-toastr.js"),require("rxjs/add/operator/distinctUntilChanged.js"),require("@angular/forms"),require("app/view/game/module/cloudgems/gem.module.js"),require("app/view/game/module/shared/shared.module.js"),require("app/shared/class/index.js"),require("rxjs/Observable.js"),require("rxjs/BehaviorSubject.js"),require("rxjs/add/observable/merge.js"),require("rxjs/add/operator/filter.js"),require("rxjs/add/observable/throw.js"))}});