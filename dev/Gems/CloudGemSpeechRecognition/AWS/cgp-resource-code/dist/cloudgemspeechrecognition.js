!function(a){function b(a,b,c){a in i||(i[a]={name:a,declarative:!0,deps:b,declare:c,normalizedDeps:b})}function c(a){return m[a]||(m[a]={name:a,dependencies:[],exports:{},importers:[]})}function d(b){if(!b.module){var e=b.module=c(b.name),f=b.module.exports,g=b.declare.call(a,function(a,b){if(e.locked=!0,"object"==typeof a)for(var c in a)f[c]=a[c];else f[a]=b;for(var d=0,g=e.importers.length;g>d;d++){var h=e.importers[d];if(!h.locked)for(var i=0;i<h.dependencies.length;++i)h.dependencies[i]===e&&h.setters[i](f)}return e.locked=!1,b},b.name);e.setters=g.setters,e.execute=g.execute;for(var j=0,k=b.normalizedDeps.length;k>j;j++){var l,n=b.normalizedDeps[j],o=i[n],p=m[n];p?l=p.exports:o&&!o.declarative?l=o.esModule:o?(d(o),p=o.module,l=p.exports):l=h(n),p&&p.importers?(p.importers.push(e),e.dependencies.push(p)):e.dependencies.push(null),e.setters[j]&&e.setters[j](l)}}}function e(b){var c={};if(("object"==typeof b||"function"==typeof b)&&b!==a)if(k)for(var d in b)"default"!==d&&f(c,b,d);else{var e=b&&b.hasOwnProperty;for(var d in b)"default"===d||e&&!b.hasOwnProperty(d)||(c[d]=b[d])}return c.default=b,l(c,"__useDefault",{value:!0}),c}function f(a,b,c){try{var d;(d=Object.getOwnPropertyDescriptor(b,c))&&l(a,c,d)}catch(d){return a[c]=b[c],!1}}function g(b,c){var d=i[b];if(d&&!d.evaluated&&d.declarative){c.push(b);for(var e=0,f=d.normalizedDeps.length;f>e;e++){var k=d.normalizedDeps[e];-1==j.call(c,k)&&(i[k]?g(k,c):h(k))}d.evaluated||(d.evaluated=!0,d.module.execute.call(a))}}function h(a){if(o[a])return o[a];if("@node/"==a.substr(0,6))return o[a]=e(n(a.substr(6)));var b=i[a];if(!b)throw"Module "+a+" not present.";return d(i[a]),g(a,[]),i[a]=void 0,b.declarative&&l(b.module.exports,"__esModule",{value:!0}),o[a]=b.declarative?b.module.exports:b.esModule}var i={},j=Array.prototype.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},k=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(a){k=!1}var l;!function(){try{Object.defineProperty({},"a",{})&&(l=Object.defineProperty)}catch(a){l=function(a,b,c){try{a[b]=c.value||c.get.call(a)}catch(a){}}}}();var m={},n="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,o={"@empty":{}};return function(a,c,d,f){return function(g){g(function(g){for(var i=0;i<c.length;i++)!function(a,b){b&&b.__esModule?o[a]=b:o[a]=e(b)}(c[i],arguments[i]);f({register:b});var j=h(a[0]);if(a.length>1)for(var i=1;i<a.length;i++)h(a[i]);return d?j.default:j})}}}("undefined"!=typeof self?self:global)(["42"],["4","9","7","8","a","b","12","41","10","31","13","1a","1b"],!1,function(a){this.require,this.exports,this.module;a.register("43",["4"],function(a,b){"use strict";var c,d,e=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();b&&b.id;return{setters:[function(a){c=a}],execute:function(){d=function(a){function b(b,c,d,e,f){return a.call(this,b,c,d,e,f)||this}return e(b,a),b.prototype.getBotCount=function(){return a.prototype.get.call(this,"admin/numbots")},b.prototype.getBots=function(b){return a.prototype.get.call(this,"admin/listbots/"+b)},b.prototype.getDesc=function(b,c){return a.prototype.get.call(this,"admin/botdesc/"+b+"/"+c)},b.prototype.putDesc=function(b){return a.prototype.put.call(this,"admin/botdesc",b)},b.prototype.publishBot=function(b,c){return a.prototype.put.call(this,"admin/publishbot/"+b+"/"+c)},b.prototype.buildBot=function(b){return a.prototype.put.call(this,"admin/buildbot/"+b)},b.prototype.getBotStatus=function(b){return a.prototype.get.call(this,"admin/botstatus/"+b)},b.prototype.getBuiltinIntents=function(b){return a.prototype.get.call(this,"admin/listbuiltinintents/"+b)},b.prototype.getCustomIntents=function(b){return a.prototype.get.call(this,"admin/listcustomintents/"+b)},b.prototype.getBuiltinSlotTypes=function(b){return a.prototype.get.call(this,"admin/listbuiltinslottypes/"+b)},b.prototype.getCustomSlotTypes=function(b){return a.prototype.get.call(this,"admin/listcustomslottypes/"+b)},b.prototype.deleteBot=function(b){return a.prototype.delete.call(this,"admin/bot/"+b)},b.prototype.deleteBotVersion=function(b,c){return a.prototype.delete.call(this,"admin/bot/version/"+b+"/"+c)},b.prototype.deleteIntent=function(b){return a.prototype.delete.call(this,"admin/intent/"+b)},b.prototype.deleteIntentVersion=function(b,c){return a.prototype.delete.call(this,"admin/intent/version/"+b+"/"+c)},b.prototype.deleteSlotType=function(b){return a.prototype.delete.call(this,"admin/slottype/"+b)},b.prototype.deleteSlotTypeVersion=function(b,c){return a.prototype.delete.call(this,"admin/slottype/version/"+b+"/"+c)},b.prototype.getBot=function(b,c){return a.prototype.get.call(this,"admin/bot/"+b+"/"+c)},b.prototype.updateBot=function(b){return a.prototype.put.call(this,"admin/bot",b)},b.prototype.updateBotVersion=function(b){return a.prototype.put.call(this,"admin/bot/"+b)},b.prototype.createIntent=function(b){return a.prototype.put.call(this,"admin/intent",b)},b.prototype.updateIntentVersion=function(b){return a.prototype.put.call(this,"admin/intent/"+b)},b.prototype.createSlotType=function(b){return a.prototype.put.call(this,"admin/slottype",b)},b.prototype.updateSlotTypeVersion=function(b){return a.prototype.put.call(this,"admin/slottype/"+b)},b.prototype.getIntent=function(b,c){return a.prototype.get.call(this,"admin/intent/"+b+"/"+c)},b.prototype.getSlotType=function(b,c){return a.prototype.get.call(this,"admin/slottype/"+b+"/"+c)},b.prototype.getBotAliases=function(b,c){return a.prototype.get.call(this,"admin/listbotaliases/"+b+"/"+c)},b.prototype.updateBotAlias=function(b){return a.prototype.put.call(this,"admin/bot/alias",b)},b.prototype.deleteBotAlias=function(b,c){return a.prototype.delete.call(this,"admin/bot/alias/"+b+"/"+c)},b.prototype.getBotVersions=function(b,c){return a.prototype.get.call(this,"admin/bot/versions/"+b+"/"+c)},b.prototype.getBotAlias=function(b,c){return a.prototype.get.call(this,"admin/bot/alias/"+b+"/"+c)},b.prototype.getIntentVersions=function(b,c){return a.prototype.get.call(this,"admin/intent/versions/"+b+"/"+c)},b.prototype.getSlotTypeVersions=function(b,c){return a.prototype.get.call(this,"admin/slottype/versions/"+b+"/"+c)},b.prototype.getIntentDenendency=function(){return a.prototype.get.call(this,"admin/intentdependency")},b.prototype.getBuiltinIntent=function(b){return a.prototype.get.call(this,"admin/builtinintent/"+b)},b}(c.ApiHandler),a("SpeechToTextApi",d)}}}),a.register("44",["9","7","45","8","a","b"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(){function a(a,b,d){this.http=a,this.aws=b,this.metricservice=d,this.displayName="Speech Recognition",this.srcIcon="https://m.media-amazon.com/images/G/01/cloudcanvas/images/Speech_Recognition_Gem_optimized._V518452893_.png",this.state=new c.TackableStatus,this.metric=new c.TackableMeasure}return a.prototype.ngOnInit=function(){this._apiHandler=new e.SpeechToTextApi(this.context.ServiceUrl,this.http,this.aws,this.metricservice,this.context.identifier),this.report(this.metric),this.assign(this.state)},a.prototype.report=function(a){a.name="Bots",a.value="Loading...",this._apiHandler.getBotCount().subscribe(function(b){var c=JSON.parse(b.body.text());a.value=c.result.count},function(b){a.value="Offline"})},a.prototype.assign=function(a){a.label="Loading",a.styleType="Loading",this._apiHandler.get("service/status").subscribe(function(b){var c=JSON.parse(b.body.text());a.label="online"==c.result.status?"Online":"Offline",a.styleType="online"==c.result.status?"Enabled":"Offline"},function(b){a.label="Offline",a.styleType="Offline"})},j([d.Input(),k("design:type",Object)],a.prototype,"context",void 0),j([d.Input(),k("design:type",String)],a.prototype,"displayName",void 0),j([d.Input(),k("design:type",String)],a.prototype,"srcIcon",void 0),a=j([d.Component({selector:"cloudgempolly-thumbnail",template:'\n    <thumbnail-gem \n        [title]="displayName" \n        [cost]="\'Low\'" \n        [srcIcon]="srcIcon" \n        [metric]="metric" \n        [state]="state" \n        >\n    </thumbnail-gem>'}),k("design:paramtypes",[f.Http,g.AwsService,h.LyMetricService])],a)}(),a("SpeechToTextThumbnailComponent",i)}}}),a.register("46",[],function(a,b){"use strict";var c;b&&b.id;return{setters:[],execute:function(){c=function(){function a(a,b,c){this.toastr=b,this._apiHandler=c,this.name=a.name,this.description=a.description,this.checksum=a.checksum,this.version=a.version,this.processBehavior=a.processBehavior,this.idleSessionTTLInSeconds=a.idleSessionTTLInSeconds,this.childDirected=a.childDirected,this.intents=a.intents,this.status=a.status,this.update=a.update,this.created=a.created,this.clarificationPrompt=a.clarificationPrompt,this.abortStatement=a.abortStatement,this.locale=a.locale,this.voiceId=a.voiceId,this.expandAllVersions=!1,this.isSelected=!1,this.isLoading=!1}return a.prototype.get=function(b){return new Promise(function(b,c){var d=this;this._apiHandler.getBot(this.name,this.version).subscribe(function(e){var f=JSON.parse(e.body.text());if(f.result.bot.error)d.toastr.error("The bot '"+d.name+"' did not refresh properly. "+f.result.bot.error),c();else{var g=new a(f.result.bot,d.toastr,d._apiHandler);b(g)}},function(a){d.toastr.error("The bot '"+d.name+"' did not refresh properly. "+a.message),c()})}.bind(this))},a.prototype.getVersions=function(b){return this.isLoading=!0,new Promise(function(c,d){var e=this;this._apiHandler.getBotVersions(this.name,b).subscribe(function(f){var g=JSON.parse(f.body.text());if(g.result.bots.error)e.toastr.error("The bot versions did not refresh properly. "+g.result.bots.error),d(),e.isLoading=!1;else{b.length<=1&&(e.versions=[]);for(var h=0,i=g.result.bots;h<i.length;h++){var j=i[h];e.versions.push(new a(j,e.toastr,e._apiHandler))}""!=g.result.nextToken?e.getVersions(g.result.nextToken):(c(),e.isLoading=!1)}},function(a){e.toastr.error("The bot versions did not refresh properly. "+a.message),d(),e.isLoading=!1})}.bind(this))},a.prototype.export=function(){var a=this;this._apiHandler.getDesc(this.name,this.version).subscribe(function(b){var c=JSON.parse(b.body.text());if(c.result.desc_file.error)a.toastr.error("The bot '"+a.name+"' was not exported properly. "+c.result.desc_file.error);else{var d=c.result.desc_file,e=new Blob([JSON.stringify(d,null,4)],{type:"application/json"}),f=a.name+".json";if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(e,f);else{var g=document.createElement("a"),h=URL.createObjectURL(e);g.href=h,g.download=f,window.document.body.appendChild(g),g.click(),window.document.body.removeChild(g),URL.revokeObjectURL(h)}a.toastr.success("The bot '"+a.name+"' was exported.")}},function(b){a.toastr.error("The bot '"+a.name+"' was not exported properly. "+b.message)})},a.prototype.build=function(){var a=this;this._apiHandler.buildBot(this.name).subscribe(function(b){var c=JSON.parse(b.body.text());"READY"==c.result.status?(a.status="BUILDING",a.checkBotStatus()):a.toastr.error("The bot '"+a.name+"' was not built properly. "+c.result.status)},function(b){a.toastr.error("The bot '"+a.name+"' was not built properly. "+b.message)})},a.prototype.publish=function(a){var b=this;this.status="PUBLISHING",this._apiHandler.publishBot(this.name,a).subscribe(function(a){var c=JSON.parse(a.body.text());"READY"==c.result.status?(b.toastr.success("The bot '"+b.name+"' was published."),b.checkBotStatus()):(b.toastr.error("The bot '"+b.name+"' was not published properly. "+c.result.status),b.status="FAILED")},function(a){b.toastr.error("The bot '"+b.name+"' was not published properly. "+a.message),b.status="FAILED"})},a.prototype.delete=function(){return new Promise(function(a,b){var c=this;"$LATEST"==this.version?this._apiHandler.deleteBot(this.name).subscribe(function(d){var e=JSON.parse(d.body.text());"INUSE"==e.result.status?(c.toastr.error("The bot '"+c.name+"' is currently used by an alias. Delete the alisas from '"+c.name+"'"),b()):"DELETED"==e.result.status?(c.toastr.success("The bot '"+c.name+"' was deleted."),a()):(c.toastr.error("The bot '"+c.name+"' could not be deleted. "+e.result.status),b())}):this._apiHandler.deleteBotVersion(this.name,this.version).subscribe(function(d){var e=JSON.parse(d.body.text());"INUSE"==e.result.status?(c.toastr.error("The selected version of the bot '"+c.name+"' is currently used by an alias. Delete the alisas from '"+c.name+"'"),b()):"DELETED"==e.result.status?(c.toastr.success("The selected version of the bot '"+c.name+"' was deleted."),a()):(c.toastr.error("The selected version of the bot '"+c.name+"' could not be deleted. "+e.result.status),b())})}.bind(this))},a.prototype.save=function(a){return new Promise(function(b,c){var d=this;this.processBehavior=a;var e={bot:this.getInfo()};this._apiHandler.updateBot(e).subscribe(function(a){var e=JSON.parse(a.body.text());"ACCEPTED"==e.result.status?(d.toastr.success("The bot '"+d.name+"' was updated."),"BUILD"==d.processBehavior&&(d.status="BUILDING",d.checkBotStatus()),b()):(d.toastr.error("The bot '"+d.name+"' was not updated successfully. "+e.result.status),c())},function(a){d.toastr.error("The bot '"+d.name+"' was not updated successfully. "+a.message),c()})}.bind(this))},a.prototype.saveAlias=function(a){return new Promise(function(b,c){var d=this;a.botName=this.name;var e={alias:a};this._apiHandler.updateBotAlias(e).subscribe(function(e){var f=JSON.parse(e.body.text());"ACCEPTED"==f.result.status?(d.toastr.success("The bot alias '"+a.name+"' was updated successfully."),b()):(d.toastr.error("The bot alias'"+a.name+"' was not updated properly. "+f.result.status),c())},function(b){d.toastr.error("The bot alias'"+a.name+"' was not updated properly. "+b.message),c()})}.bind(this))},a.prototype.deleteAlias=function(a){return new Promise(function(b,c){var d=this;this._apiHandler.deleteBotAlias(a.name,this.name).subscribe(function(e){var f=JSON.parse(e.body.text());"DELETED"==f.result.status?(d.toastr.success("The bot alias '"+a.name+"' was deleted successfully."),b()):(d.toastr.error("The bot alias'"+a.name+"' was not deleted properly. "+f.result.status),c())},function(b){d.toastr.error("The bot alias'"+a.name+"' was not deleted properly. "+b.message),c()})}.bind(this))},a.prototype.checkBotStatus=function(){var a=this;this._apiHandler.getBotStatus(this.name).subscribe(function(b){var c=JSON.parse(b.body.text());c.result.status.indexOf("ERROR")>-1?a.toastr.error("The status of bot '"+a.name+"' did not refresh properly. "+c.result.status):"BUILDING"==c.result.status||"PUBLISHING"==c.result.status?a.checkBotStatus():a.status=c.result.status},function(b){a.toastr.error("The status of bot '"+a.name+"' did not refresh properly. "+b.message)})},a.prototype.getInfo=function(){for(var a={},b=["name","description","locale","childDirected","intents","idleSessionTTLInSeconds","voiceId","checksum","processBehavior","clarificationPrompt","abortStatement"],c=0,d=b;c<d.length;c++){var e=d[c];void 0!=this[e]&&(a[e]=this[e])}return a},a}(),a("BotEntry",c)}}}),a.register("47",[],function(a,b){"use strict";var c;b&&b.id;return{setters:[],execute:function(){c=function(){function a(a,b,c){this.toastr=b,this._apiHandler=c,this.name=a.name,this.description=a.description,this.version=a.version,this.update=a.update,this.created=a.created,this.slots=a.slots,this.sampleUtterances=a.sampleUtterances,this.confirmationPrompt=a.confirmationPrompt,this.conclusionStatement=a.conclusionStatement,this.rejectionStatement=a.rejectionStatement,this.followUpPrompt=a.followUpPrompt,this.dialogCodeHook=a.dialogCodeHook,this.fulfillmentActivity=a.fulfillmentActivity,this.checksum=a.checksum,this.parentIntentSignature=a.parentIntentSignature,this.isSelected=!1,this.expandAllVersions=!1,this.isLoading=!1}return a.prototype.get=function(b){return new Promise(function(c,d){var e=this;this._apiHandler.getIntent(this.name,b).subscribe(function(b){var f=JSON.parse(b.body.text());if(f.result.intent.error)e.toastr.error("The intent '"+e.name+"' did not refresh properly. "+f.result.intent.error),d();else{var g=new a(f.result.intent,e.toastr,e._apiHandler);c(g)}},function(a){e.toastr.error("The intent '"+e.name+"' did not refresh properly. "+a.message),d()})}.bind(this))},a.prototype.getVersions=function(b){return this.isLoading=!0,new Promise(function(c,d){var e=this;this._apiHandler.getIntentVersions(this.name,b).subscribe(function(f){var g=JSON.parse(f.body.text());if(g.result.intents.error)e.toastr.error("The intent versions did not refresh properly. "+g.result.intents.error),d(),e.isLoading=!1;else{b.length<=1&&(e.versions=[]);for(var h=0,i=g.result.intents;h<i.length;h++){var j=i[h];e.versions.push(new a(j,e.toastr,e._apiHandler))}""!=g.result.nextToken?e.getVersions(g.result.nextToken):(c(),e.isLoading=!1)}},function(a){e.toastr.error("The intent versions did not refresh properly. "+a.message),d(),e.isLoading=!1})}.bind(this))},a.prototype.save=function(){return new Promise(function(a,b){var c=this,d={intent:this.getInfo()};this._apiHandler.createIntent(d).subscribe(function(d){var e=JSON.parse(d.body.text());"ACCEPTED"==e.result.status?(c.toastr.success("The intent '"+c.name+"' was saved."),a()):(c.toastr.error("The intent '"+c.name+"' was not saved successfully. "+e.result.status),b())},function(a){c.toastr.error("The intent '"+c.name+"' was not saved successfully. "+a.message),b()})}.bind(this))},a.prototype.delete=function(){return new Promise(function(a,b){var c=this;"$LATEST"==this.version?this._apiHandler.deleteIntent(this.name).subscribe(function(d){var e=JSON.parse(d.body.text());"INUSE"==e.result.status?(c.toastr.error("The intent '"+c.name+"' is in use."),b()):"DELETED"==e.result.status?(c.toastr.success("The intent '"+c.name+"' was deleted."),a()):(c.toastr.error("The intent '"+c.name+"' could not be deleted. "+e.result.status),b())}):this._apiHandler.deleteIntentVersion(this.name,this.version).subscribe(function(d){var e=JSON.parse(d.body.text());"INUSE"==e.result.status?(c.toastr.error("The selected version of the intent '"+c.name+"' is in use."),b()):"DELETED"==e.result.status?(c.toastr.success("The selected version of the intent '"+c.name+"' was deleted."),a()):(c.toastr.error("The selected version of the intent '"+c.name+"' could not be deleted. "+e.result.status),b())})}.bind(this))},a.prototype.getDependency=function(){return new Promise(function(a,b){var c=this;this._apiHandler.getIntentDenendency().subscribe(function(d){var e=JSON.parse(d.body.text());if(e.result.dependency.error)c.toastr.error("The intent dependency did not refresh properly. "+e.result.dependency.error),b();else{var f=e.result.dependency;a(f)}},function(a){c.toastr.error("The intent dependency did not refresh properly. "+a.message),b()})}.bind(this))},a.prototype.getInfo=function(){for(var a={},b=["name","description","slots","sampleUtterances","confirmationPrompt","rejectionStatement","followUpPrompt","conclusionStatement","dialogCodeHook","fulfillmentActivity","parentIntentSignature","checksum"],c=0,d=b;c<d.length;c++){var e=d[c];void 0!=this[e]&&(a[e]=this[e])}return a},a}(),a("IntentEntry",c)}}}),a.register("48",[],function(a,b){"use strict";var c;b&&b.id;return{setters:[],execute:function(){c=function(){function a(a,b,c){this.toastr=b,this._apiHandler=c,this.name=a.name,this.description=a.description,this.enumerationValues=a.enumerationValues,this.update=a.update,this.created=a.created,this.checksum=a.checksum,this.version=a.version,this.valueSelectionStrategy=a.valueSelectionStrategy,this.isSelected=!1,this.expandAllVersions=!1,this.isLoading=!1}return a.prototype.get=function(b){return new Promise(function(b,c){var d=this;this._apiHandler.getSlotType(this.name,this.version).subscribe(function(e){var f=JSON.parse(e.body.text());f.result.slotType.error?(d.isLoadingSlotType=!1,d.toastr.error("The intent '"+d.name+"' was not refreshed properly. "+f.result.slotType.error),c()):(d.currentSlotType=new a(f.result.slotType,d.toastr,d._apiHandler),d.isLoadingSlotType=!1,b(d.currentSlotType)),d.isLoadingSlotType=!1},function(a){d.isLoadingSlotType=!1,d.toastr.error("The intent '"+d.name+"' was not refreshed properly. "+a.message),c()})}.bind(this))},a.prototype.getVersions=function(b){return this.isLoading=!0,new Promise(function(c,d){var e=this;this._apiHandler.getSlotTypeVersions(this.name,b).subscribe(function(f){var g=JSON.parse(f.body.text());if(g.result.slotTypes.error)e.toastr.error("The slot type versions did not refresh properly. "+g.result.slotTypes.error),d(),e.isLoading=!1;else{b.length<=1&&(e.versions=[]);for(var h=0,i=g.result.slotTypes;h<i.length;h++){var j=i[h];e.versions.push(new a(j,e.toastr,e._apiHandler))}""!=g.result.nextToken?e.getVersions(g.result.nextToken):(c(),e.isLoading=!1)}},function(a){e.toastr.error("The slot type versions did not refresh properly. "+a.message),d(),e.isLoading=!1})}.bind(this))},a.prototype.save=function(){return new Promise(function(a,b){var c=this,d={slotType:this.getInfo()};this._apiHandler.createSlotType(d).subscribe(function(d){var e=JSON.parse(d.body.text());"ACCEPTED"==e.result.status?(c.toastr.success("The slot type '"+c.name+"' was saved."),a()):(c.toastr.error("The slot type '"+c.name+"' was not saved successfully. "+e.result.status),b())},function(a){c.toastr.error("The slot type '"+c.name+"' was not saved successfully. "+a.message),b()})}.bind(this))},a.prototype.delete=function(){return new Promise(function(a,b){var c=this;"$LATEST"==this.version?this._apiHandler.deleteSlotType(this.name).subscribe(function(d){var e=JSON.parse(d.body.text());"INUSE"==e.result.status?(c.toastr.error("The slot type '"+c.name+"' is in use."),b()):"DELETED"==e.result.status?(c.toastr.success("The slot type '"+c.name+"' was deleted."),a()):(c.toastr.error("The slot type '"+c.name+"' could not be deleted. "+e.result.status),b())}):this._apiHandler.deleteSlotTypeVersion(this.name,this.version).subscribe(function(d){var e=JSON.parse(d.body.text());"INUSE"==e.result.status?(c.toastr.error("The selected version of the slot type '"+c.name+"' is in use."),b()):"DELETED"==e.result.status?(c.toastr.success("The selected version of the slot type '"+c.name+"' was deleted."),a()):(c.toastr.error("The selected version of the slot type '"+c.name+"' could not be deleted. "+e.result.status),b())})}.bind(this))},a.prototype.getInfo=function(){for(var a={},b=["name","description","enumerationValues","checksum","valueSelectionStrategy"],c=0,d=b;c<d.length;c++){var e=d[c];void 0!=this[e]&&(a[e]=this[e])}return a},a}(),a("SlotTypeEntry",c)}}}),a.register("49",["7","12","b"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},i=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a}],execute:function(){!function(a){a[a.EditPrompt=0]="EditPrompt",a[a.List=1]="List"}(f||(f={})),g=function(){function a(a,b){this.vcr=a,this.metric=b,this.promptContentChange=new c.EventEmitter,this.newPromptMessage=""}return a.prototype.ngOnInit=function(){this.dismissModal=this.dismissModal.bind(this),this.editPromptModal=this.editPromptModal.bind(this),this.sttModes=f,this.mode=f.List},a.prototype.promptChange=function(a,b){this.promptContent&&this.promptContent.messages?(this.promptContent.messages[b].content=a,""==a&&(this.promptContent.messages.splice(b,1),0==this.promptContent.messages.length&&delete this.promptContent)):this.promptContent||(this.promptContent=this.showMaxAttempts?{messages:[],maxAttempts:2}:{messages:[]},this.promptContent.messages.push({content:a,contentType:"PlainText"}),this.newPromptMessage=""),this.promptContentChange.emit(this.promptContent)},a.prototype.savePrompt=function(){this.modalRef.close(),this.mode=f.List,this.promptContent=this.currentPrompt,0==this.promptContent.messages.length&&delete this.promptContent},a.prototype.editPromptModal=function(){this.mode=f.EditPrompt,this.showMaxAttempts?this.currentPrompt=this.promptContent?JSON.parse(JSON.stringify(this.promptContent)):{maxAttempts:2}:this.currentPrompt=this.promptContent?JSON.parse(JSON.stringify(this.promptContent)):{}},a.prototype.dismissModal=function(a){this.mode=f.List},h([c.Input(),i("design:type",Object)],a.prototype,"promptContent",void 0),h([c.Input(),i("design:type",Boolean)],a.prototype,"showMaxAttempts",void 0),h([c.Input(),i("design:type",Object)],a.prototype,"context",void 0),h([c.Input(),i("design:type",Boolean)],a.prototype,"editable",void 0),h([c.Output(),i("design:type",Object)],a.prototype,"promptContentChange",void 0),h([c.ViewChild(d.ModalComponent),i("design:type",d.ModalComponent)],a.prototype,"modalRef",void 0),a=h([c.Component({selector:"prompt",template:'<div class="prompt-input">     <input class="prompt-entry form-control" type="text"            [ngModel]="promptContent && promptContent[\'messages\'].length > 0 ? promptContent[\'messages\'][0][\'content\'] : newPromptMessage"            (ngModelChange)="promptChange($event, 0)"/>     <i *ngIf="editable" class="fa fa-cog" aria-hidden="true" (click)="editPromptModal()"></i> </div>  \x3c!-- Edit prompt modal --\x3e <modal *ngIf="mode == sttModes.EditPrompt"        [title]="\'Edit Prompt\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Save\'"        (modalSubmitted)="savePrompt()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <prompt-configuration [context]="context" [(promptContent)]="currentPrompt" [showMaxAttempts]="showMaxAttempts" [editable]="editable"></prompt-configuration>     </div> </modal>',styles:[".prompt-entry{width:60%;margin-top:2px}.form-control{display:inline}.prompt-input{margin-bottom:10px;vertical-align:baseline}"]}),i("design:paramtypes",[c.ViewContainerRef,e.LyMetricService])],a)}(),a("SpeechToTextPromptComponent",g)}}}),a.register("4a",["7","b"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a,b){this.vcr=a,this.metric=b,this.title="Prompt",this.promptContentChange=new c.EventEmitter,this.newPromptMessage=""}return a.prototype.ngOnInit=function(){this.showMaxAttempts?this.promptContent=this.promptContent?JSON.parse(JSON.stringify(this.promptContent)):{maxAttempts:2}:this.promptContent=this.promptContent?JSON.parse(JSON.stringify(this.promptContent)):{}},a.prototype.removePromptMessage=function(a){this.promptContent.messages.splice(a,1),this.promptContentChange.emit(this.promptContent)},a.prototype.promptMessageChange=function(a,b){""==a&&this.removePromptMessage(b),this.promptContentChange.emit(this.promptContent)},a.prototype.addNewPromptMessage=function(){""!=this.newPromptMessage&&(this.promptContent.messages=this.promptContent.messages?this.promptContent.messages:[],this.promptContent.messages.push({content:this.newPromptMessage,contentType:"PlainText"}),this.promptContentChange.emit(this.promptContent),this.newPromptMessage="")},f([c.Input(),g("design:type",Object)],a.prototype,"promptContent",void 0),f([c.Input(),g("design:type",String)],a.prototype,"title",void 0),f([c.Input(),g("design:type",Boolean)],a.prototype,"showMaxAttempts",void 0),f([c.Input(),g("design:type",Boolean)],a.prototype,"editable",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"context",void 0),f([c.Output(),g("design:type",Object)],a.prototype,"promptContentChange",void 0),a=f([c.Component({selector:"prompt-configuration",template:'<div>     <h2 class="setting">{{title}}</h2>     <div *ngIf="editable" class="prompt-config-input">         <input class="prompt-content form-control" type="text" [(ngModel)]="newPromptMessage" placeholder="Enter your prompt message here" />         <button class="btn l-primary basic-button add-button" (click)="addNewPromptMessage()" data-toggle="tooltip" data-placement="top" title="Add a new prompt message">Add</button>     </div>     <div *ngIf="promptContent && promptContent[\'messages\']" class="prompt-config-input">         <div *ngFor="let promptMessage of promptContent[\'messages\'] let i = index">             <input class="prompt-content form-control" type="text" [(ngModel)]="promptContent[\'messages\'][i][\'content\']" (ngModelChange)="promptMessageChange($event, i)"/>             <i *ngIf="editable" class="fa fa-trash-o" aria-hidden="true" (click)="removePromptMessage(i)"></i>         </div>     </div>     <div *ngIf="showMaxAttempts">         <h2 class="setting">Maximum number of retries</h2>         <div class="prompt-config-input">             <input class="prompt-content form-control" type="number" [(ngModel)]="promptContent[\'maxAttempts\']" />         </div>     </div> </div>',styles:[".prompt-content{width:80%;margin-top:5px}.setting{font-size:18px;margin-top:20px}.form-control{display:inline}.add-button{margin:0px 0px 0px 0px}.prompt-config-input{margin-bottom:10px;vertical-align:baseline}"]}),g("design:paramtypes",[c.ViewContainerRef,d.LyMetricService])],a)}(),a("SpeechToTextPromptConfigurationComponent",e)}}}),a.register("4b",["8","7","12","a","45","41","b"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){j=function(){function a(a,b,c,e,f){this.http=a,this.aws=b,this.toastr=c,this.vcr=e,this.metric=f,this.originalIntentChange=new d.EventEmitter,this.listSampleUtterances=!0,this.showSlots=!0,this.slotTypeVersionMappings={},this.newSampleUtterance=""}return a.prototype.ngOnInit=function(){this._apiHandler=new g.SpeechToTextApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.newSlot={},this.updateBuiltinSlotTypes("t"),this.updateCustomSlotTypes("t"),this.getIntent(this.originalIntent)},a.prototype.ngOnChanges=function(a){a.originalIntent.previousValue&&a.originalIntent.previousValue.name!=a.originalIntent.currentValue.name&&this.getIntent(this.originalIntent)},a.prototype.customTrackBy=function(a,b){return a},a.prototype.changeIntentVersion=function(){this.getIntent(this.currentIntent),this.originalIntentChange.emit(this.currentIntent)},a.prototype.expandProperty=function(a){"sampleUtterances"==a?this.listSampleUtterances=!this.listSampleUtterances:"lambdaInitializationAndValidation"==a?this.showLambdaInitializationAndValidation=!this.showLambdaInitializationAndValidation:"slots"==a?this.showSlots=!this.showSlots:"confirmationPrompt"==a?this.showConfirmationPrompt=!this.showConfirmationPrompt:"fulfillment"==a&&(this.showFulfillment=!this.showFulfillment)},a.prototype.addNewSampleUtterance=function(){""!=this.newSampleUtterance&&(this.currentIntent.sampleUtterances?this.currentIntent.sampleUtterances.push(this.newSampleUtterance):this.currentIntent.sampleUtterances=[this.newSampleUtterance]),this.newSampleUtterance=""},a.prototype.currentSampleUtteranceChange=function(a,b){this.currentIntent.sampleUtterances[b]=a,""==a&&this.currentIntent.sampleUtterances.splice(b,1)},a.prototype.removeSampleUtterance=function(a){this.currentIntent.sampleUtterances.splice(a,1)},a.prototype.changeLambdaInitializationAndValidationState=function(a){a.target.checked?this.currentIntent.dialogCodeHook={uri:"",messageVersion:"1.0"}:(this.lambdaInitializationAndValidationEnabled=!1,delete this.currentIntent.dialogCodeHook)},a.prototype.addSlot=function(){this.newSlot.name&&this.newSlot.slotType&&(this.newSlot.slotConstraint="Required",this.newSlot.priority=this.currentIntent.slots.length+1,this.isBuiltinSlotType(this.newSlot.slotType)||(this.updateSlotTypeVersions(this.newSlot.slotType),this.newSlot.slotTypeVersion="$LATEST"),this.currentIntent.slots.push(JSON.parse(JSON.stringify(this.newSlot))),this.newSlot={})},a.prototype.changePriority=function(a,b){var c=JSON.parse(JSON.stringify(this.currentIntent.slots[a-b]));this.currentIntent.slots[a-b]=JSON.parse(JSON.stringify(this.currentIntent.slots[a])),this.currentIntent.slots[a-b].priority-=b,this.currentIntent.slots[a]=JSON.parse(JSON.stringify(c)),this.currentIntent.slots[a].priority+=b},a.prototype.setslotConstraint=function(a,b){var c=a.target.checked;b.slotConstraint=c?"Required":"Optional"},a.prototype.removeSlot=function(a){for(var b=a;b<this.currentIntent.slots.length-1;b++)this.changePriority(b,-1);this.currentIntent.slots.splice(this.currentIntent.slots.length-1,1)},a.prototype.changeConfirmationPromptState=function(a){a.target.checked||(this.confirmationPromptEnabled=!1,delete this.currentIntent.confirmationPrompt,delete this.currentIntent.rejectionStatement)},a.prototype.updateBuiltinSlotTypes=function(a){var b=this;this.sortDir="asc",this.isLoadingBuiltinSlotTypes=!0,this._apiHandler.getBuiltinSlotTypes(encodeURIComponent(a)).subscribe(function(c){var d=JSON.parse(c.body.text());d.result.slotTypes.error?(b.toastr.error("The builtin slot types did not refresh properly. "+d.result.slotTypes.error),b.isLoadingBuiltinSlotTypes=!1):(b.builtinSlotTypes=a.length<=1?d.result.slotTypes:b.builtinSlotTypes.concat(d.result.slotTypes),""!=d.result.nextToken?b.updateBuiltinSlotTypes(d.result.nextToken):(b.builtinSlotTypes.sort(function(a,b){return a.name<b.name?-1:a.name>b.name?1:0}),b.isLoadingBuiltinSlotTypes=!1))},function(a){b.toastr.error("The builtin slot types did not refresh properly. "+a.message),b.isLoadingBuiltinSlotTypes=!1})},a.prototype.updateCustomSlotTypes=function(a){var b=this;this.sortDir="asc",this.isLoadingCustomSlotTypes=!0,this._apiHandler.getCustomSlotTypes(encodeURIComponent(a)).subscribe(function(c){var d=JSON.parse(c.body.text());d.result.slotTypes.error?(b.toastr.error("The builtin slot types did not refresh properly. "+d.result.slotTypes.error),b.isLoadingCustomSlotTypes=!1):(b.customSlotTypes=a.length<=1?d.result.slotTypes:b.customSlotTypes.concat(d.result.slotTypes),""!=d.result.nextToken?b.updateCustomSlotTypes(d.result.nextToken):(b.customSlotTypes.sort(function(a,b){return a.name<b.name?-1:a.name>b.name?1:0}),b.isLoadingCustomSlotTypes=!1))},function(a){b.toastr.error("The builtin slot types did not refresh properly. "+a.message),b.isLoadingCustomSlotTypes=!1})},a.prototype.saveIntent=function(){this.currentIntent.get("$LATEST").then(function(a){this.currentIntent.checksum=a.checksum,"CodeHook"===this.currentIntent.fulfillmentActivity.type&&(this.currentIntent.fulfillmentActivity.codeHook.messageVersion="1.0"),this.currentIntent.save()}.bind(this))},a.prototype.isBuiltinSlotType=function(a){for(var b=0,c=this.builtinSlotTypes;b<c.length;b++){if(a==c[b].name)return!0}return!1},a.prototype.getIntent=function(a){this.isLoadingIntent=!0,a.get(a.version).then(function(a){if(this.currentIntent=a,this.currentIntent.slots){this.currentIntent.slots.sort(function(a,b){return a.priority<b.priority?-1:a.priority>b.priority?1:0});for(var b=0,c=this.currentIntent.slots;b<c.length;b++){var d=c[b];d.slotTypeVersion&&this.updateSlotTypeVersions(d.slotType)}}this.showConfirmationPrompt=this.currentIntent.confirmationPrompt&&this.currentIntent.confirmationPrompt.messages,this.confirmationPromptEnabled=this.showConfirmationPrompt,this.showLambdaInitializationAndValidation=this.currentIntent.dialogCodeHook&&this.currentIntent.dialogCodeHook.uri,this.lambdaInitializationAndValidationEnabled=this.showLambdaInitializationAndValidation,this.showFulfillment=this.currentIntent.fulfillmentActivity,this.getIntentVersions(this.currentIntent)}.bind(this),function(){this.isLoadingIntent=!1}.bind(this))},a.prototype.getIntentVersions=function(a){this.currentIntent.getVersions("t").then(function(){this.isLoadingIntent=!1}.bind(this),function(){this.isLoadingIntent=!1}.bind(this))},a.prototype.updateSlotTypeVersions=function(a){if(!this.slotTypeVersionMappings[a]){var b=new g.SlotTypeEntry({name:a},this.toastr,this._apiHandler);b.getVersions("t").then(function(){this.slotTypeVersionMappings[a]=b.versions}.bind(this))}},a.prototype.clearLambdaFunctionArn=function(){"CodeHook"===this.currentIntent.fulfillmentActivity.type?(this.currentIntent.fulfillmentActivity.codeHook={},this.currentIntent.fulfillmentActivity.codeHook.uri=""):delete this.currentIntent.fulfillmentActivity.codeHook},k([d.Input(),l("design:type",g.IntentEntry)],a.prototype,"originalIntent",void 0),k([d.Input(),l("design:type",Object)],a.prototype,"context",void 0),k([d.Input(),l("design:type",String)],a.prototype,"oldVersionWarning",void 0),k([d.Output(),l("design:type",Object)],a.prototype,"originalIntentChange",void 0),k([d.ViewChild(e.ModalComponent),l("design:type",e.ModalComponent)],a.prototype,"modalRef",void 0),a=k([d.Component({selector:"edit-intent",template:'<div [ngSwitch]="isLoadingIntent || isLoadingBuiltinSlotTypes || isLoadingCustomSlotTypes">     <div *ngSwitchCase="true">         <div class="loading-spinner-container">             <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>         </div>     </div>     <div class="content-container" *ngSwitchCase="false">         <div *ngIf="currentIntent.version != \'$LATEST\'" class="boxed">             <span class="boxed-content">{{oldVersionWarning}}</span>         </div>         <h2 class="inline-header">{{currentIntent["name"]}}</h2>         <select class="version-list" [(ngModel)]="currentIntent[\'version\']" (ngModelChange)="changeIntentVersion()">             <ng-container *ngFor="let intent of currentIntent.versions">                 <option class="version-option" *ngIf="intent[\'version\'] != \'$LATEST\'" [ngValue]="intent[\'version\']">{{intent[\'version\']}}</option>                 <option class="version-option" *ngIf="intent[\'version\'] == \'$LATEST\'" [ngValue]="intent[\'version\']">Latest</option>             </ng-container>           </select>         <fieldset [disabled]="currentIntent[\'version\'] != \'$LATEST\'">             <div class="intent-property" (click)="expandProperty(\'sampleUtterances\')">                 <i [ngClass]="listSampleUtterances ? \'fa fa-caret-down\' : \'fa fa-caret-right\'" aria-hidden="true"></i>                 <h3 class="inline-header">Sample utterances</h3>                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="right" [ngbTooltip]="\'Spoken or typed phrases that invoke your intent.  Use curly braces to insert slot names. For example, &quot;I want to order a {size} pizza&quot;.\'"></i>             </div>             <div *ngIf="!currentIntent.parentIntentSignature">                 <div *ngIf="listSampleUtterances" class="settings-container">                     <div *ngIf="currentIntent[\'version\'] == \'$LATEST\'" class="intent-input">                         <input class="intent-property-entry form-control" type="text" placeholder="e.g. I would like to book a flight." [(ngModel)]="newSampleUtterance"/>                         <button class="btn l-primary basic-button add-button" (click)="addNewSampleUtterance()" data-toggle="tooltip" data-placement="top" title="Add a new sample utterance">Add</button>                     </div>                     <div *ngFor="let sampleUtterance of currentIntent.sampleUtterances; let i = index; trackBy:customTrackBy" class="intent-input">                         <input class="intent-property-entry form-control" type="text" [ngModel]="currentIntent.sampleUtterances[i]" (ngModelChange)="currentSampleUtteranceChange($event, i)"/>                         <i *ngIf="currentIntent[\'version\'] == \'$LATEST\'" class="fa fa fa-trash-o" aria-hidden="true" (click)="removeSampleUtterance(i)" data-toggle="tooltip" data-placement="top" title="Delete the sample utterance"></i>                     </div>                 </div>             </div>             <div *ngIf="currentIntent.parentIntentSignature" class="boxed settings-container">                 <span class="boxed-content">Bulit-in intents provide an extensive set of pre-built utterances. These utterances cannot be viewed or edited.</span>             </div>             <div class="intent-property" (click)="expandProperty(\'lambdaInitializationAndValidation\')">                 <i [ngClass]="showLambdaInitializationAndValidation ? \'fa fa-caret-down\' : \'fa fa-caret-right\'" aria-hidden="true"></i>                 <h3 class="inline-header">Lambda initialization and validation</h3>                     <i class="fa fa-question-circle-o" aria-hidden="true" placement="right" [ngbTooltip]="\'The business logic required to validate the users\\\'s input\'"></i>             </div>             <div *ngIf="showLambdaInitializationAndValidation" class="settings-container">                 <input type="checkbox" [id]="\'codeHook\'" [(ngModel)]="lambdaInitializationAndValidationEnabled" name="codeHook" (change)="changeLambdaInitializationAndValidationState($event)"/>                 <label class="l-checkbox" [attr.for]="\'codeHook\'" [id]="\'codeHook\'">                     Initialization and validation code hook                 </label>                 <div *ngIf="lambdaInitializationAndValidationEnabled">                     <div>Lambda function ARN</div>                     <input class="intent-property-entry form-control" type="text" [(ngModel)]="currentIntent.dialogCodeHook.uri"/>                 </div>             </div>             <div>                 <div class="intent-property" (click)="expandProperty(\'slots\')">                     <i [ngClass]="showSlots ? \'fa fa-caret-down\' : \'fa fa-caret-right\'" aria-hidden="true"></i>                     <h3 class="inline-header">Slots</h3>                     <i class="fa fa-question-circle-o" aria-hidden="true" placement="right" [ngbTooltip]="\'Data that user must provide to fulfill the intent.  New slot types can be created by returning to the Speech Recognition page and selecting the Slot Types tab.\'"></i>                 </div>                 <div *ngIf="showSlots">                     <div *ngIf="!currentIntent.parentIntentSignature">                         <table [ngClass]="currentIntent.version == \'$LATEST\' ? \'table table-hover\' : \'table\'">                             <thead>                                 <tr>                                     <th class="priority-column">PRIORITY</th>                                     <th class="required-column">REQUIRED</th>                                     <th class="name-column">NAME</th>                                     <th class="slot-type-column">SLOT TYPE AND VERSION</th>                                     <th class="prompt-column">PROMPT</th>                                 </tr>                             </thead>                             <tbody>                                 <tr *ngIf="currentIntent[\'version\'] == \'$LATEST\'">                                     <td class="priority-column"></td>                                     <td class="required-column"></td>                                     <td class="name-column">                                         <div class="intent-input">                                             <input class="slot-name form-control" type="text" [(ngModel)]="newSlot[\'name\']" />                                         </div>                                     </td>                                     <td class="slot-type-column">                                         <select class="slot-type-name" [(ngModel)]="newSlot[\'slotType\']">                                             <option *ngFor="let slotType of customSlotTypes" [ngValue]="slotType[\'name\']">{{slotType["name"]}}</option>                                             <option *ngFor="let slotType of builtinSlotTypes" [ngValue]="slotType[\'name\']">{{slotType["name"]}}</option>                                         </select>                                     </td>                                     <td class="prompt-column">                                         <prompt [context]="context" [(promptContent)]="newSlot[\'valueElicitationPrompt\']" [showMaxAttempts]="true"></prompt>                                     </td>                                     <td>                                         <button *ngIf="currentIntent[\'version\'] == \'$LATEST\'" class="btn l-primary basic-button add-button float-right" (click)="addSlot()" data-toggle="tooltip" data-placement="top" title="Add a new slot">Add</button>                                     </td>                                 </tr>                                 <tr *ngFor="let slot of currentIntent[\'slots\'] let i = index">                                     <td class="priority-column">                                         {{slot["priority"]}}                                         <span *ngIf="currentIntent[\'version\'] == \'$LATEST\'">                                             <i *ngIf="i != 0" class="fa fa-angle-up" aria-hidden="true" (click)="changePriority(i, 1)" data-toggle="tooltip" data-placement="top" title="Change the priority"></i>                                             <i *ngIf="i != currentIntent[\'slots\'].length - 1" class="fa fa-angle-down" aria-hidden="true" (click)="changePriority(i, -1)" data-toggle="tooltip" data-placement="top" title="Change the priority"></i>                                         </span>                                     </td>                                     <td class="required-column">                                         <input type="checkbox" [id]="slot[\'name\']" [checked]="slot[\'slotConstraint\'] == \'Required\'" (change)="setslotConstraint($event, slot)" />                                         <label class="l-checkbox" [attr.for]="slot[\'name\']" [id]="slot[\'name\']">                                         </label>                                     </td>                                     <td class="name-column">                                         <div class="intent-input">                                             <input class="intent-property-entry slot-name form-control" type="text" [(ngModel)]="slot[\'name\']" placeholder="e.g. Location" />                                         </div>                                        </td>                                     <td class="slot-type-column">                                         <select class="slot-type-name" [(ngModel)]="slot[\'slotType\']" (ngModelChange)="updateSlotTypeVersions(slot[\'slotType\'])" placeholder="e.g. AMAZON.US_CITY">                                             <option *ngFor="let slotType of customSlotTypes" [ngValue]="slotType[\'name\']">{{slotType["name"]}}</option>                                             <option *ngFor="let slotType of builtinSlotTypes" [ngValue]="slotType[\'name\']">{{slotType["name"]}}</option>                                         </select>                                         <span *ngIf="isBuiltinSlotType(slot[\'slotType\'])"> Built-in </span>                                         <span *ngIf="!isBuiltinSlotType(slot[\'slotType\'])">                                             <select class="version-list" [(ngModel)]="slot[\'slotTypeVersion\']" (ngModelChange)="updateSlotTypeVersions(slot[\'slotType\'])">                                                 <ng-container *ngFor="let slotType of slotTypeVersionMappings[slot[\'slotType\']]">                                                     <option class="version-option" *ngIf="slotType.version != \'$LATEST\'" [ngValue]="slotType.version">{{slotType.version}}</option>                                                     <option class="version-option" *ngIf="slotType.version == \'$LATEST\'" [ngValue]="slotType.version">Latest</option>                                                 </ng-container>                                             </select>                                         </span>                                     </td>                                     <td class="prompt-column">                                         <prompt class="prompt-content" [context]="context" [(promptContent)]="slot[\'valueElicitationPrompt\']" [showMaxAttempts]="true" [editable]="currentIntent[\'version\'] == \'$LATEST\'"></prompt>                                     </td>                                     <td>                                         <div class="float-right">                                             <i *ngIf="currentIntent[\'version\'] == \'$LATEST\'" class="fa fa fa-trash-o" aria-hidden="true" (click)="removeSlot(i)" data-toggle="tooltip" data-placement="top" title="Delete the slot"></i>                                         </div>                                     </td>                                 </tr>                             </tbody>                         </table>                     </div>                     <div *ngIf="currentIntent.parentIntentSignature" class="boxed settings-container">                         Slots cannot be edited in Built-in intents.                     </div>                 </div>             </div>             <div>                 <div class="intent-property" (click)="expandProperty(\'confirmationPrompt\')">                     <i [ngClass]="showConfirmationPrompt ? \'fa fa-caret-down\' : \'fa fa-caret-right\'" aria-hidden="true"></i>                     <h3 class="inline-header">Confirmation prompt</h3>                         <i class="fa fa-question-circle-o" aria-hidden="true" placement="right" [ngbTooltip]="\'Questions that ask the user to input data\'"></i>                 </div>                 <div *ngIf="showConfirmationPrompt" class="settings-container">                     <input type="checkbox" [id]="\'confirmationPrompt\'" [(ngModel)]="confirmationPromptEnabled" name="confirmationPrompt" (change)="changeConfirmationPromptState($event)" />                     <label class="l-checkbox" [attr.for]="\'confirmationPrompt\'" [id]="\'confirmationPrompt\'">                         Confirmation prompt                     </label>                     <div *ngIf="confirmationPromptEnabled">                         <div>Confirm</div>                         <prompt [context]="context" [(promptContent)]="currentIntent.confirmationPrompt" [showMaxAttempts]="true" [editable] ="true"></prompt>                         <div>Cancel</div>                         <prompt [context]="context" [(promptContent)]="currentIntent.rejectionStatement" [showMaxAttempts]="false" [editable] ="true"></prompt>                     </div>                 </div>             </div>             <div>                 <div class="intent-property" (click)="expandProperty(\'fulfillment\')">                     <i [ngClass]="showFulfillment ? \'fa fa-caret-down\' : \'fa fa-caret-right\'" aria-hidden="true"></i>                     <h3 class="inline-header">Fulfillment</h3>                     <i class="fa fa-question-circle-o" aria-hidden="true" placement="right" [ngbTooltip]="\'The business logic required to fulfill the user intent\'"></i>                 </div>                 <div *ngIf="showFulfillment" class="settings-container">                     <label class="radio-btn-label">                         <input type="radio" [value]="\'CodeHook\'" [(ngModel)]="currentIntent.fulfillmentActivity.type" name="fulfillment" (ngModelChange)="clearLambdaFunctionArn()"/>                         <span></span> AWS Lambda function                     </label>                     <label class="radio-btn-label">                         <input type="radio" [value]="\'ReturnIntent\'" [(ngModel)]="currentIntent.fulfillmentActivity.type" name="fulfillment" (ngModelChange)="clearLambdaFunctionArn()"/>                         <span></span> Return parameters to client                     </label>                     <div *ngIf="currentIntent.fulfillmentActivity.type === \'CodeHook\'">                         <div>Lambda function ARN</div>                         <input class="intent-property-entry form-control" type="text" [(ngModel)]="currentIntent.fulfillmentActivity.codeHook.uri" />                     </div>                 </div>             </div>             <hr>             <div>                 <button class="btn l-primary basic-button" (click)="saveIntent()">                     Save Intent                 </button>             </div>         </fieldset>     </div> </div>',styles:[".inline-header{display:inline}.version-list{border:0;outline:0;background-color:transparent;text-align-last:right}version-option{direction:rtl}.loading-spinner-container{clear:both;text-align:center}.intent-property{margin-top:20px;cursor:pointer}.basic-button{margin-left:5px;margin-right:5px;margin-bottom:20px}.content-container{margin-bottom:30px}table.table{margin-bottom:30px}table.table thead{display:table-header-group}table.table tr .priority-column{width:10%}table.table tr .required-column{width:10%}table.table tr .name-column{width:25%}table.table tr .name-column .slot-name{width:70%;margin-top:2px}table.table tr .slot-type-column{width:25%}table.table tr .slot-type-column .slot-type-name{width:60%;height:20px;margin-top:2px}table.table tr .prompt-column{width:30%}.settings-container{margin-left:15px}.intent-property-entry{width:60%;margin-top:2px}.form-control{display:inline}.boxed{border:1px solid #6441A5;height:50px;line-height:50px;padding-left:5px;margin-bottom:10px}.boxed .boxed-content{display:inline-block;vertical-align:middle;line-height:normal}.add-button{margin:0px 0px 0px 0px}.intent-input{margin-bottom:10px;vertical-align:baseline}"]}),l("design:paramtypes",[c.Http,f.AwsService,h.ToastsManager,d.ViewContainerRef,i.LyMetricService])],a)}(),a("SpeechToTextEditIntentComponent",j)}}}),a.register("4c",["7","8","a","12","10","b","45"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){j=function(){function a(a,b,c,d,e){this.http=a,this.aws=b,this.toastr=c,this.vcr=d,this.metric=e}return a.prototype.ngOnInit=function(){this._apiHandler=new i.SpeechToTextApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.getSlotType(this.originalSlotType)},a.prototype.ngOnChanges=function(a){a.originalSlotType.previousValue&&a.originalSlotType.previousValue.name!=a.originalSlotType.currentValue.name&&this.getSlotType(this.originalSlotType)},a.prototype.addNewSlotTypeValue=function(){this.currentSlotType.enumerationValues.push({value:this.newSlotTypeValue}),this.newSlotTypeValue=""},a.prototype.slotTypeValueChange=function(a,b){this.currentSlotType.enumerationValues[b].value=a,""==a&&this.currentSlotType.enumerationValues.splice(b,1)},a.prototype.removeSlotTypeValue=function(a){this.currentSlotType.enumerationValues.splice(a,1)},a.prototype.saveSlotType=function(){this.currentSlotType.get("$LATEST").then(function(a){this.currentSlotType.checksum=a.checksum,this.currentSlotType.save()}.bind(this))},a.prototype.getSlotType=function(a){this.isLoadingSlotType=!0,a.get(a.version).then(function(b){this.currentSlotType=b,this.getSlotTypeVersions(a),this.isLoadingSlotType=!1}.bind(this),function(){this.isLoadingSlotType=!1}.bind(this))},a.prototype.getSlotTypeVersions=function(a){this.isLoadingSlotType=!0,this.currentSlotType.getVersions("t").then(function(){this.isLoadingSlotType=!1}.bind(this),function(){this.isLoadingSlotType=!1}.bind(this))},k([c.Input(),l("design:type",i.SlotTypeEntry)],a.prototype,"originalSlotType",void 0),k([c.Input(),l("design:type",Object)],a.prototype,"context",void 0),k([c.Input(),l("design:type",String)],a.prototype,"oldVersionWarning",void 0),k([c.ViewChild(f.ModalComponent),l("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),a=k([c.Component({selector:"edit-slot-type",template:'<div [ngSwitch]="isLoadingSlotType">     <div *ngSwitchCase="true">         <div class="loading-spinner-container">             <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>         </div>     </div>     <div class="content-container" *ngSwitchCase="false">         <div *ngIf="currentSlotType.version != \'$LATEST\'" class="boxed">             <span class="boxed-content">{{oldVersionWarning}}</span>         </div>         <h2 class="inline-header">{{currentSlotType["name"]}}</h2>         <select class="version-list" [(ngModel)]="currentSlotType.version" (ngModelChange)="getSlotType(this.currentSlotType)">             <ng-container *ngFor="let slotType of currentSlotType.versions">                 <option class="version-option" *ngIf="slotType.version != \'$LATEST\'" [ngValue]="slotType.version">{{slotType.version}}</option>                 <option class="version-option" *ngIf="slotType.version == \'$LATEST\'" [ngValue]="slotType.version">Latest</option>             </ng-container>         </select>         <fieldset [disabled]="currentSlotType[\'version\'] != \'$LATEST\'">             <div class="slot-description">                 <input class="slot-type-property-entry form-control" type="text" [(ngModel)]="currentSlotType[\'description\']" />             </div>             <div class="slot-type-property">                 <h3 class="inline-header">Value</h3>                 <i class="fa fa-question-circle-o" aria-hidden="true" placement="right" [ngbTooltip]="\'Values are a representative sample for this slot type.\'"></i>             </div>             <div *ngIf="currentSlotType[\'version\'] == \'$LATEST\'" class="slot-type-input">                 <input class="slot-type-property-entry form-control" type="text" [(ngModel)]="newSlotTypeValue" placeholder="e.g. Small" />                 <button class="btn l-primary basic-button add-button" (click)="addNewSlotTypeValue()" data-toggle="tooltip" data-placement="top" title="Add a new value">Add</button>             </div>             <div *ngFor="let slotTypeValue of currentSlotType[\'enumerationValues\'] let i = index" class="slot-type-input">                 <input class="slot-type-property-entry form-control" type="text" [ngModel]="currentSlotType[\'enumerationValues\'][i][\'value\']" (ngModelChange)="slotTypeValueChange($event, i)" />                 <i *ngIf="currentSlotType[\'version\'] == \'$LATEST\'" class="fa fa fa-trash-o" aria-hidden="true" (click)="removeSlotTypeValue(i)" data-toggle="tooltip" data-placement="top" title="Delete the value"></i>             </div>             <hr>             <div>                 <button class="btn l-primary basic-button" (click)="saveSlotType()">                     Save Slot Type                 </button>             </div>         </fieldset>     </div> </div>',styles:[".inline-header{display:inline}.loading-spinner-container{clear:both;text-align:center}.version-list{border:0;outline:0;background-color:transparent;text-align-last:right}version-option{direction:rtl}.basic-button{margin-left:5px;margin-right:5px;margin-bottom:20px}.content-container{margin-bottom:30px}.settings-container{margin-left:15px}.slot-type-property{margin-top:20px;cursor:pointer}.slot-type-property-entry{width:48%;margin-top:2px}.form-control{display:inline}.boxed{border:1px solid #6441A5;height:50px;line-height:50px;padding-left:5px;margin-bottom:10px}.boxed .boxed-content{display:inline-block;vertical-align:middle;line-height:normal}.add-button{margin:0px 0px 0px 0px}.slot-type-input{margin-bottom:10px;vertical-align:baseline}"]}),l("design:paramtypes",[d.Http,e.AwsService,g.ToastsManager,c.ViewContainerRef,h.LyMetricService])],a)}(),a("SpeechToTextEditSlotTypeComponent",j)}}}),a.register("4d",["8","7","12","a","45","9","41","31","13","b"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m,n,o=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),p=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},q=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a},function(a){k=a},function(a){l=a}],execute:function(){!function(a){a[a.Show=0]="Show",a[a.Publish=1]="Publish",a[a.List=2]="List",a[a.Dismiss=3]="Dismiss",a[a.Delete=4]="Delete",a[a.AddIntentsToSelectedBot=5]="AddIntentsToSelectedBot",a[a.Create=6]="Create",a[a.ShowIntentDependency=7]="ShowIntentDependency",a[a.Build=8]="Build",a[a.AddIntentToCurrentBot=9]="AddIntentToCurrentBot"}(m||(m={})),a("Mode",m),n=function(a){function b(b,c,d,e,f,g){var h=a.call(this)||this;return h.http=b,h.aws=c,h.toastr=d,h.metric=f,h.breadcrumbs=g,h.mainPageSubNavActiveIndex=0,h.botEditorSubNavItemIndex=0,h.sidebarIndex=0,h.showBotEditor=!1,h.selectedBotsNum=0,h.showSlotTypeEditor=!1,h.selectedSlotTypesNum=0,h.showIntentEditor=!1,h.selectedIntentsNum=0,h.exportAction=new k.ActionItem("Export",h.export),h.publishAction=new k.ActionItem("Publish",h.publishModal),h.buildAction=new k.ActionItem("Build",h.buildModal),h.botActions=[h.buildAction,h.publishAction,h.exportAction],h.pageSize=10,h.toastr.setRootViewContainerRef(e),h}return o(b,a),b.prototype.ngOnInit=function(){this._apiHandler=new g.SpeechToTextApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.dismissModal=this.dismissModal.bind(this),this.publishModal=this.publishModal.bind(this),this.buildModal=this.buildModal.bind(this),this.deleteModal=this.deleteModal.bind(this),this.createModal=this.createModal.bind(this),this.addIntentsToSelectedBotModal=this.addIntentsToSelectedBotModal.bind(this),this.addIntentToCurrentBotModal=this.addIntentToCurrentBotModal.bind(this),this.showIntentDependencyModal=this.showIntentDependencyModal.bind(this),this.exportAction.onClick=this.exportAction.onClick.bind(this),this.publishAction.onClick=this.publishAction.onClick.bind(this),this.buildAction.onClick=this.buildAction.onClick.bind(this),this.sttModes=m,this.sortDir,this.bots=[],this.createBotTip="Bots can be imported from a JSON file. Information on creating the file can be found here: https://github.com/awslabs/aws-lex-web-ui/tree/master/templates.",this.publishBotTip="It could take several minutes to publish the bot.",this.newAlias={name:"",botName:"",botVersion:""},this.currentIntent=this.defaultIntent(),this.mode=m.List},b.prototype.validateBot=function(a){var b=!0;return a.idleSessionTTLInSeconds.valid=!1,a.idleSessionTTLInSeconds.value&&a.idleSessionTTLInSeconds.value<60?a.idleSessionTTLInSeconds.message="The session timeout cannot be shorter then 60s":a.idleSessionTTLInSeconds.valid=!0,b=b&&a.idleSessionTTLInSeconds.valid,a.name.valid=!1,a.name.value&&/\S/.test(a.name.value)?a.name.value.length<2?a.name.message="The name was not long enough.":a.name.value.length>50?a.name.message="The name was too long. We counted "+a.name.value.length+" characters.  The limit is 50 characters.":a.name.value.indexOf(" ")>-1?a.name.message="The name was invalid":a.name.valid=!0:a.name.message="The name was invalid",b=b&&a.name.valid,a.childDirected.valid=!1,void 0==a.childDirected.value?a.childDirected.message="The COPPA was invalid":a.childDirected.valid=!0,b=b&&a.childDirected.valid},b.prototype.validateTimeout=function(a){var b=!0;return a.idleSessionTTLInSeconds.valid=!1,a.idleSessionTTLInSeconds.value&&a.idleSessionTTLInSeconds.value<60?a.idleSessionTTLInSeconds.message="The session timeout cannot be shorter then 60s":a.idleSessionTTLInSeconds.valid=!0,b=b&&a.idleSessionTTLInSeconds.valid},b.prototype.validateIntent=function(a){var b=!0;return a.name.valid=!1,a.name.value&&/\S/.test(a.name.value)?a.name.value.length<1?a.name.message="The name was not long enough.":a.name.value.length>100?a.name.message="The name was too long. We counted "+a.name.value.length+" characters.  The limit is 100 characters.":a.name.value.indexOf(" ")>-1?a.name.message="The name was invalid":a.name.valid=!0:a.name.message="The name was invalid",b=b&&a.name.valid},b.prototype.validateNewBuiltinIntentName=function(){return this.newIntentName.valid=!1,this.newIntentName.value&&/\S/.test(this.newIntentName.value)?this.newIntentName.value.length<1?this.newIntentName.message="The name was not long enough.":this.newIntentName.value.length>100?this.newIntentName.message="The name was too long. We counted "+this.newIntentName.value.length+" characters.  The limit is 100 characters.":this.newIntentName.value.indexOf(" ")>-1?this.newIntentName.message="The name was invalid":this.newIntentName.valid=!0:this.newIntent.message="The name was invalid",this.newIntentName.valid},b.prototype.validateSlotType=function(a){var b=!0;return a.name.valid=!1,a.name.value&&/\S/.test(a.name.value)?a.name.value.length<1?a.name.message="The name was not long enough.":a.name.value.length>100?a.name.message="The name was too long. We counted "+a.name.value.length+" characters.  The limit is 100 characters.":a.name.value.indexOf(" ")>-1?a.name.message="The name was invalid":a.name.valid=!0:a.name.message="The name was invalid",b=b&&a.name.valid,a.enumerationValues.valid=!1,a.enumerationValues.value?a.enumerationValues.value.length<1?a.enumerationValues.message="No value is provided.":a.enumerationValues.valid=!0:a.enumerationValues.message="The value was invalid",b=b&&a.enumerationValues.valid},b.prototype.update=function(){0==this.mainPageSubNavActiveIndex?(this.bots=[],this.updateBots("t")):1==this.mainPageSubNavActiveIndex?(this.intentCategory="Custom",this.updateCustomIntents("t")):2==this.mainPageSubNavActiveIndex&&(this.slotTypeCategory="Custom",this.updateCustomSlotTypes("t"))},b.prototype.showBot=function(a){this.modalRef&&this.modalRef.close(),this.updateBuiltinSlotTypes("t"),this.currentBot=new g.BotEntry(a,this.toastr,this._apiHandler),this.breadcrumbs.addBreadcrumb(this.currentBot.name,null),this.getBotEditorContent()},b.prototype.export=function(a){a.export()},b.prototype.build=function(){this.modalRef.close(),this.mode=m.List,this.currentBot.build()},b.prototype.publish=function(){this.modalRef.close(),this.mode=m.List,this.currentBot.publish(this.newAlias.name)},b.prototype.getBotEditorContent=function(){this.currentBot.get(this.currentBot.version).then(function(a){this.currentBot=new g.BotEntry(a,this.toastr,this._apiHandler),this.intentsUsedByCurrentBot=this.currentBot.intents?this.currentBot.intents:[],this.slotTypesUsedByCurrentBot=[],this.switchSideBarTabs(0),this.showBotEditor=!0,0==this.intentsUsedByCurrentBot.length&&this.addIntentToCurrentBotModal()}.bind(this))},b.prototype.switchSideBarTabs=function(a){this.sidebarIndex=a,0==this.botEditorSubNavItemIndex?a>=0&&a<this.intentsUsedByCurrentBot.length?(this.currentIntent=this.defaultIntent(),this.currentIntent.name=this.intentsUsedByCurrentBot[a].intentName,this.currentIntent.version=this.intentsUsedByCurrentBot[a].intentVersion,this.getSlotTypesUsedByCurrentIntent(this.currentIntent)):a<this.intentsUsedByCurrentBot.length+this.slotTypesUsedByCurrentBot.length&&(this.currentSlotType=this.slotTypesUsedByCurrentBot[a-this.intentsUsedByCurrentBot.length]):0==this.sidebarIndex&&this.updateBotAliases("e")},b.prototype.selectCustomIntent=function(a){a.isSelected=!a.isSelected;for(var b=0,c=this.customIntents;b<c.length;b++){var d=c[b];d.isSelected=d.name==a.name&&d.isSelected}this.intentCategory="Custom"},b.prototype.selectBuiltinIntent=function(a){this.newIntent=a,this.newIntentName={name:"",valid:!0},this.intentCategory="Builtin"},b.prototype.selectNewIntent=function(){this.newIntent=this.defaultIntent(),this.intentCategory="New"},b.prototype.addIntentsToCurrentBot=function(){this.currentBot.created?(this.modalRef.close(),this.mode=m.List,this.currentBot.get("$LATEST").then(function(a){this.currentBot=a,"Custom"==this.intentCategory?this.addExistingCustomIntentsToBot(this.customIntents,this.currentBot):"Builtin"==this.intentCategory&&this.addBuiltinIntentToBot(this.newIntent,this.currentBot)}.bind(this))):"Builtin"==this.intentCategory?this.validateNewBuiltinIntentName()&&(this.modalRef.close(),this.mode=m.List,this.addBuiltinIntentToBot(this.newIntent,this.currentBot)):"New"==this.intentCategory?this.validateIntent(this.newIntent)&&(this.modalRef.close(),this.mode=m.List,this.addNewCustomIntentToBot(this.currentBot)):"Custom"==this.intentCategory&&this.addExistingCustomIntentsToBot(this.customIntents,this.currentBot)},b.prototype.addBuiltinIntentToBot=function(a,b){var c=this;this._apiHandler.getBuiltinIntent(a.name).subscribe(function(d){var e=JSON.parse(d.body.text());e.result.intent.error?c.toastr.error("The intent '"+a.name+"' was not added to bot properly. "+e.result.intent.error):(e.result.intent.name={valid:!0,value:c.newIntentName.value},c.newIntent=new g.IntentEntry(e.result.intent,c.toastr,c._apiHandler),c.newIntent.parentIntentSignature=a.name,c.newIntent.fulfillmentActivity={type:"ReturnIntent"},c.newIntentName={valid:!0,value:""},c.addNewCustomIntentToBot(b))},function(b){c.toastr.error("The intent '"+a.name+"' was not added to bot properly. "+b.message)})},b.prototype.addExistingCustomIntentsToBot=function(a,b){this.modalRef&&(this.modalRef.close(),this.mode=m.List),this.currentBot.intents||(this.currentBot.intents=[],this.intentsUsedByCurrentBot=this.currentBot.intents),this.currentBot.get("$LATEST").then(function(b){for(var c=0,d=a;c<d.length;c++){var e=d[c];e.isSelected&&(b.intents=b.intents?b.intents:[],this.currentIntent=0==b.intents.length?e:this.currentIntent,b.intents.push({intentName:e.name,intentVersion:e.version}),this.currentBot.intents.push({intentName:e.name,intentVersion:e.version}),e.isSelected=!1,1==this.currentBot.intents.length&&this.switchSideBarTabs(0))}b.aliases&&delete b.aliases,b.save("SAVE")}.bind(this))},b.prototype.intentExistsInCurrentBot=function(a){if(!this.currentBot.intents)return!1;for(var b=0,c=this.currentBot.intents;b<c.length;b++){if(c[b].intentName==a.name)return!0}return!1},b.prototype.removeIntentFromBot=function(a,b){if(1==this.currentBot.intents.length)return void this.toastr.error("Cannot remove '"+a.intentName+"'. A bot must have at least one Intent.");this.currentBot.get("$LATEST").then(function(c){for(var d=0;d<c.intents.length;d++)if(c.intents[d].intentName==a.intentName){c.intents.splice(d,1);break}c.save("SAVE").then(function(){this.removeIntentAndSlotTypesFromSidebar(a,b)}.bind(this))}.bind(this))},b.prototype.updateBotAliases=function(a){var b=this;this.sortDir="asc",this.isLoadingBotAliases=!0,this._apiHandler.getBotAliases(this.currentBot.name,a).subscribe(function(c){var d=JSON.parse(c.body.text());d.result.aliases.error?(b.toastr.error("The bots did not refresh properly. "+d.result.aliases.error),b.isLoadingBotAliases=!1):(b.currentBot.aliases=a.length<=1?d.result.aliases:b.currentBot.aliases.concat(d.result.aliases),""!=d.result.nextToken?b.updateBotAliases(d.result.nextToken):(b.sort(b.currentBot.aliases,"name",b.sortDir),b.updatePaginationInfo(),b.updateCurrentPage(1),b.updateCurrentBotVersions("e"),b.isLoadingBotAliases=!1))},function(a){b.toastr.error("The bots did not refresh properly. "+a.message),b.isLoadingBotAliases=!1})},b.prototype.addBotAlias=function(){this.currentBot.saveAlias(this.newAlias).then(function(){this.currentBot.aliases.unshift(this.newAlias),this.updatePaginationInfo(),this.updateCurrentPage(1),this.newAlias={name:"",botName:"",botVersion:""}}.bind(this))},b.prototype.deleteBotAlias=function(a){this.currentBot.deleteAlias(a).then(function(){var b=this.currentBot.aliases.indexOf(a,0);b>-1&&this.currentBot.aliases.splice(b,1),this.updatePaginationInfo(),this.updateCurrentPage(1)}.bind(this))},b.prototype.saveIntentChangesToCurrentBot=function(a){this.currentIntent=a,this.currentBot.get("$LATEST").then(function(b){for(var c=0,d=b.intents;c<d.length;c++){var e=d[c];if(e.intentName=a.name){this.getSlotTypesUsedByCurrentIntent(a),e.intentVersion=a.version,b.save("SAVE");break}}}.bind(this))},b.prototype.updateBuiltinIntents=function(a){var b=this;this.sortDir="asc",this.isLoadingIntents=!0,this._apiHandler.getBuiltinIntents(encodeURIComponent(a)).subscribe(function(c){var d=JSON.parse(c.body.text());if(d.result.intents.error)b.toastr.error("The slot types did not refresh properly. "+d.result.intents.error),b.isLoadingIntents=!1;else if(b.builtinIntents=a.length<=1?d.result.intents:b.builtinIntents.concat(d.result.intents),""!=d.result.nextToken)b.updateBuiltinIntents(d.result.nextToken);else{for(var e=0,f=b.builtinIntents;e<f.length;e++){var g=f[e];b.initializeIntent(g)}b.sort(b.builtinIntents,"name",b.sortDir),b.updatePaginationInfo(),b.updateCurrentPage(1),b.isLoadingIntents=!1}},function(a){b.toastr.error("The slot types did not refresh properly. "+a.message),b.isLoadingIntents=!1})},b.prototype.updateCustomIntents=function(a){var b=this;this.sortDir="asc",this.isLoadingIntents=!0,this._apiHandler.getCustomIntents(encodeURIComponent(a)).subscribe(function(c){var d=JSON.parse(c.body.text());if(d.result.intents.error)b.toastr.error("The slot types did not refresh properly. "+d.result.intents.error),b.isLoadingIntents=!1;else{b.customIntents=a.length<=1?[]:b.customIntents;for(var e=0,f=d.result.intents;e<f.length;e++){var h=f[e],i=new g.IntentEntry(h,b.toastr,b._apiHandler);b.customIntents.push(i)}if(""!=d.result.nextToken)b.updateCustomIntents(d.result.nextToken);else{for(var j=0,k=b.customIntents;j<k.length;j++){var h=k[j];b.initializeIntent(h)}b.sort(b.customIntents,"name",b.sortDir),b.updatePaginationInfo(),b.updateCurrentPage(1),b.isLoadingIntents=!1}}},function(a){b.toastr.error("The slot types did not refresh properly. "+a.message),b.isLoadingIntents=!1})},b.prototype.showIntent=function(a){"Builtin"!=this.intentCategory&&(this.currentIntent=new g.IntentEntry(a,this.toastr,this._apiHandler),this.breadcrumbs.addBreadcrumb(this.currentIntent.name,null),this.showIntentEditor=!0)},b.prototype.switchCategory=function(){1==this.mainPageSubNavActiveIndex?(this.selectedIntentsNum=0,"Custom"==this.intentCategory?this.updateCustomIntents("t"):"Builtin"==this.intentCategory&&this.updateBuiltinIntents("t")):2==this.mainPageSubNavActiveIndex&&(this.selectedSlotTypesNum=0,"Custom"==this.slotTypeCategory?this.updateCustomSlotTypes("t"):"Builtin"==this.slotTypeCategory&&this.updateBuiltinSlotTypes("t"))},b.prototype.updateBuiltinSlotTypes=function(a){var b=this;this.sortDir="asc",this.isLoadingSlotTypes=!0,this._apiHandler.getBuiltinSlotTypes(encodeURIComponent(a)).subscribe(function(c){var d=JSON.parse(c.body.text());if(d.result.slotTypes.error)b.toastr.error("The builtin slot types did not refresh properly. "+d.result.slotTypes.error),b.isLoadingSlotTypes=!1;else if(b.builtinSlotTypes=a.length<=1?d.result.slotTypes:b.builtinSlotTypes.concat(d.result.slotTypes),""!=d.result.nextToken)b.updateBuiltinSlotTypes(d.result.nextToken);else{for(var e=0,f=b.builtinSlotTypes;e<f.length;e++){var g=f[e];b.initializeSlotType(g)}b.sort(b.builtinSlotTypes,"name",b.sortDir),b.updatePaginationInfo(),b.updateCurrentPage(1),b.isLoadingSlotTypes=!1}},function(a){b.toastr.error("The builtin slot types did not refresh properly. "+a.message),b.isLoadingSlotTypes=!1})},b.prototype.updateCustomSlotTypes=function(a){var b=this;this.sortDir="asc",this.isLoadingSlotTypes=!0,this._apiHandler.getCustomSlotTypes(encodeURIComponent(a)).subscribe(function(c){var d=JSON.parse(c.body.text());if(d.result.slotTypes.error)b.toastr.error("The custom slot types did not refresh properly. "+d.result.slotTypes.error),b.isLoadingSlotTypes=!1;else{b.customSlotTypes=a.length<=1?[]:b.customSlotTypes;for(var e=0,f=d.result.slotTypes;e<f.length;e++){var h=f[e],i=new g.SlotTypeEntry(h,b.toastr,b._apiHandler);b.customSlotTypes.push(i)}if(""!=d.result.nextToken)b.updateCustomSlotTypes(d.result.nextToken);else{for(var j=0,k=b.customSlotTypes;j<k.length;j++){var h=k[j];b.initializeSlotType(h)}b.sort(b.customSlotTypes,"name",b.sortDir),b.updatePaginationInfo(),b.updateCurrentPage(1),b.isLoadingSlotTypes=!1}}},function(a){b.toastr.error("The custom slot types did not refresh properly. "+a.message),b.isLoadingSlotTypes=!1})},b.prototype.showSlotType=function(a){"Builtin"!=this.slotTypeCategory&&(this.currentSlotType=new g.SlotTypeEntry(a,this.toastr,this._apiHandler),this.breadcrumbs.addBreadcrumb(this.currentSlotType.name,null),this.showSlotTypeEditor=!0)},b.prototype.createModal=function(a){this.mode=m.Create,this.createModalType=a,"bot"==a?this.currentBot=this.defaultBot():"intent"==a?this.currentIntent=this.defaultIntent():"slotType"==a&&(this.currentSlotType=this.defaultSlotType())},b.prototype.buildModal=function(a){this.mode=m.Build,this.currentBot=a},b.prototype.publishModal=function(a){this.mode=m.Publish,this.currentBot=a,this.newAlias.name=""},b.prototype.dismissModal=function(a){this.mode=m.List},b.prototype.deleteModal=function(a){this.mode=m.Delete,0==this.mainPageSubNavActiveIndex?this.currentBot=a:1==this.mainPageSubNavActiveIndex?this.currentIntent=a:2==this.mainPageSubNavActiveIndex&&(this.currentSlotType=a)},b.prototype.addIntentsToSelectedBotModal=function(){this.updateBots("t"),"Builtin"==this.intentCategory&&(this.newIntentName={name:"",valid:!0}),this.mode=m.AddIntentsToSelectedBot},b.prototype.addIntentToCurrentBotModal=function(){if(this.builtinIntents&&0!=this.builtinIntents.length)for(var a=0,b=this.builtinIntents;a<b.length;a++){var c=b[a];c.isSelected=!1}else this.updateBuiltinIntents("e");if(this.customIntents&&0!=this.customIntents.length)for(var d=0,e=this.customIntents;d<e.length;d++){var f=e[d];f.isSelected=!1}else this.updateCustomIntents("e");this.intentCategory="Custom",this.mode=m.AddIntentToCurrentBot},b.prototype.showIntentDependencyModal=function(a){this.currentIntent=a,this.mode=m.ShowIntentDependency,this.isLoadingIntentDependency=!0,this.currentIntent.getDependency().then(function(a){this.intentDependency=a,this.isLoadingIntentDependency=!1}.bind(this),function(){this.isLoadingIntentDependency=!1}.bind(this))},b.prototype.createModalTitle=function(){return"bot"==this.createModalType?"Create Bot":"intent"==this.createModalType?"Create Intent":"slotType"==this.createModalType?"Create Slot Type":void 0},b.prototype.create=function(){"bot"==this.createModalType?this.validateBot(this.currentBot)&&(this.modalRef.close(),this.mode=m.List,this.currentBot.name=this.currentBot.name.value,this.currentBot.idleSessionTTLInSeconds=this.currentBot.idleSessionTTLInSeconds.value,this.currentBot.childDirected=this.currentBot.childDirected.value,this.currentBot.save("SAVE").then(function(){this.update()}.bind(this))):"intent"==this.createModalType?this.validateIntent(this.currentIntent)&&(this.modalRef.close(),this.mode=m.List,this.currentIntent.name=this.currentIntent.name.value,this.currentIntent.save().then(function(){this.update()}.bind(this))):"slotType"==this.createModalType&&this.validateSlotType(this.currentSlotType)&&(this.modalRef.close(),this.mode=m.List,this.currentSlotType.name=this.currentSlotType.name.value,this.currentSlotType.enumerationValues=this.currentSlotType.enumerationValues.value,this.currentSlotType.save().then(function(){this.update()}.bind(this)))},b.prototype.deleteModalTitle=function(){return 0==this.mainPageSubNavActiveIndex?"Delete Bot":1==this.mainPageSubNavActiveIndex?"Delete Intent":2==this.mainPageSubNavActiveIndex?"Delete Slot Type":void 0},b.prototype.delete=function(){this.modalRef.close(),this.mode=m.List,0==this.mainPageSubNavActiveIndex?this.deleteBot(this.currentBot):1==this.mainPageSubNavActiveIndex?this.deleteIntent(this.currentIntent):2==this.mainPageSubNavActiveIndex&&this.deleteSlotType(this.currentSlotType)},b.prototype.updateCurrentPage=function(a){var b=(a-1)*this.pageSize,c=a*this.pageSize;0==this.mainPageSubNavActiveIndex?this.showBotEditor?1==this.botEditorSubNavItemIndex&&0==this.sidebarIndex&&(this.aliasPageIndex=a,this.aliasesOnCurrentPage=this.currentBot.aliases.slice(b,c)):(this.botPageIndex=a,this.botsOnCurrentPage=this.bots.slice(b,c)):1==this.mainPageSubNavActiveIndex?(this.intentPageIndex=a,this.intentsOnCurrentPage="Builtin"==this.intentCategory?this.builtinIntents.slice(b,c):this.customIntents.slice(b,c)):2==this.mainPageSubNavActiveIndex&&(this.slotTypePageIndex=a,this.slotTypesOnCurrentPage="Builtin"==this.slotTypeCategory?this.builtinSlotTypes.slice(b,c):this.customSlotTypes.slice(b,c))},b.prototype.clickUploadButton=function(){this.uploadButtonRef.nativeElement.click()},b.prototype.uploadBotDefinition=function(a){var b=a.target,c=b.files[0],d=new FileReader;d.onload=function(a){var b=this,c=a.target.result,d=JSON.parse(c).bot,e={desc_file:JSON.parse(c)};this._apiHandler.putDesc(e).subscribe(function(a){var c=JSON.parse(a.body.text());"ACCEPTED"==c.result.status?(b.toastr.success("The bot '"+d.name+"' was uploaded successfully."),b.update()):b.toastr.error(c.result.status)},function(a){b.toastr.error("The bot '"+d.name+"' was not uploaded properly. "+a.message)})}.bind(this),d.readAsText(c),b.value=""},b.prototype.openAWSConsole=function(){this.consoleLinkRef.nativeElement.href="https://console.aws.amazon.com/lex/home?region"+this.aws.context.region},b.prototype.sortTable=function(){var a=[];0==this.mainPageSubNavActiveIndex?this.showBotEditor||(a=this.bots):1==this.mainPageSubNavActiveIndex?a="Custom"==this.intentCategory?this.customIntents:this.builtinIntents:2==this.mainPageSubNavActiveIndex&&(a="Custom"==this.slotTypeCategory?this.customSlotTypes:this.builtinSlotTypes),this.sort(a,"name",this.getSortOrder()),this.paginationRef.reset()},b.prototype.expandAllVersions=function(a,b){a.isLoading||(a.expandAllVersions?this.hideAllVersions(b):(0==this.mainPageSubNavActiveIndex?this.expandBotVersions(a,b+1):1==this.mainPageSubNavActiveIndex&&this.expandIntentVersions(a,b+1),2==this.mainPageSubNavActiveIndex&&this.expandSlotTypeVersions(a,b+1)),a.expandAllVersions=!a.expandAllVersions)},b.prototype.selectAll=function(a,b){var c=a.target.checked,d=[];0==this.mainPageSubNavActiveIndex?d=this.bots:1==this.mainPageSubNavActiveIndex?d="Builtin"==this.intentCategory?this.builtinIntents:this.customIntents:2==this.mainPageSubNavActiveIndex&&(d="Builtin"==this.slotTypeCategory?this.builtinSlotTypes:this.customSlotTypes);for(var e=0,f=d;e<f.length;e++){var g=f[e];g.isSelected!=c&&(this.updateSelectedEntriesNum(g),g.isSelected=c)}},b.prototype.removeEntry=function(a,b){var c=a.indexOf(b,0);c>-1&&a.splice(c,1)},b.prototype.updateSelectedEntriesNum=function(a){var b=a.isSelected?1:-1;0==this.mainPageSubNavActiveIndex?(this.selectedBotsNum+=window.navigator.msSaveOrOpenBlob?b:-b,a.isSelected&&(this.selectAllBotsRef.nativeElement.checked=!1)):1==this.mainPageSubNavActiveIndex?(this.selectedIntentsNum+=window.navigator.msSaveOrOpenBlob?b:-b,a.isSelected&&(this.selectAllIntentsRef.nativeElement.checked=!1)):2==this.mainPageSubNavActiveIndex&&(this.selectedSlotTypesNum+=window.navigator.msSaveOrOpenBlob?b:-b,a.isSelected&&(this.selectAllSlotTypesRef.nativeElement.checked=!1))},b.prototype.getMainPageSubNavItem=function(a){(this.showBotEditor||this.showIntentEditor||this.showSlotTypeEditor)&&this.breadcrumbs.removeLastBreadcrumb(),this.mainPageSubNavActiveIndex=a,this.showBotEditor=!1,this.showIntentEditor=!1,this.showSlotTypeEditor=!1,this.selectedBotsNum=0,this.selectedIntentsNum=0,this.selectedSlotTypesNum=0,this.update()},b.prototype.getBotSubNavItem=function(a){this.botEditorSubNavItemIndex=a,this.switchSideBarTabs(0)},b.prototype.updateBots=function(a){var b=this;this.sortDir="asc",this.isLoadingBots=!0,this._apiHandler.getBots(a).subscribe(function(c){var d=JSON.parse(c.body.text());if(d.result.bots.error)b.toastr.error("The bots did not refresh properly. "+d.result.bots.error),b.isLoadingBots=!1;else{b.bots=a.length<=1?[]:b.bots;for(var e=0,f=d.result.bots;e<f.length;e++){var h=f[e],i=new g.BotEntry(h,b.toastr,b._apiHandler);b.bots.push(i)}b.bots[0];if(""!=d.result.nextToken)b.updateBots(d.result.nextToken);else{for(var j=0,k=b.bots;j<k.length;j++){var h=k[j];h.checkBotStatus()}b.sort(b.bots,"name",b.sortDir),b.updatePaginationInfo(),b.updateCurrentPage(1),b.isLoadingBots=!1}}},function(a){b.toastr.error("The bots did not refresh properly. "+a.message),b.isLoadingBots=!1})},b.prototype.expandBotVersions=function(a,b){a.getVersions("t").then(function(){for(var c=0,d=a.versions;c<d.length;c++){var e=d[c];"$LATEST"!=e.version&&(this.bots.splice((this.botPageIndex-1)*this.pageSize+b,0,e),this.botsOnCurrentPage.splice(b,0,e))}}.bind(this))},b.prototype.updateCurrentBotVersions=function(a){this.isLoadingBotVersions=!0,this.currentBot.getVersions("t").then(function(){this.isLoadingBotVersions=!1}.bind(this),function(){this.isLoadingBotVersions=!1}.bind(this))},b.prototype.addNewCustomIntentToBot=function(a){this.newIntent.name=this.newIntent.name.value,this.newIntent.save().then(function(){this.newIntent.isSelected=!0,this.newIntent.version="$LATEST";var b=[this.newIntent];this.addExistingCustomIntentsToBot(b,a)}.bind(this))},b.prototype.deleteBot=function(a){a.delete().then(function(){var b=this.bots.indexOf(a,0);b>-1&&("$LATEST"==a.version&&this.hideAllVersions(b),this.bots.splice(b,1)),a.isSelected&&this.selectedBotsNum--,this.updatePaginationInfo(),this.paginationRef.reset()}.bind(this))},b.prototype.expandIntentVersions=function(a,b){a.getVersions("t").then(function(){for(var c=0,d=a.versions;c<d.length;c++){var e=d[c];"$LATEST"!=e.version&&(this.customIntents.splice((this.intentPageIndex-1)*this.pageSize+b,0,e),this.intentsOnCurrentPage.splice(b,0,e))}}.bind(this))},b.prototype.initializeIntent=function(a){a.updated=a.updated?a.updated:"",a.created=a.created?a.created:"",a.version=a.version?a.version:""},b.prototype.getSlotTypesUsedByCurrentIntent=function(a){a.get(a.version).then(function(a){this.slotTypesUsedByCurrentBot=[];for(var b=0,c=a.slots;b<c.length;b++){var d=c[b];if(d.slotTypeVersion){var e=this.defaultSlotType();e.name=d.slotType,e.version=d.slotTypeVersion,this.slotTypesUsedByCurrentBot.push(e)}}}.bind(this))},b.prototype.removeIntentAndSlotTypesFromSidebar=function(a,b){var c=this.defaultIntent();c.name=a.intentName,c.get(a.intentVersion).then(function(a){for(var c=0,d=a.slots;c<d.length;c++){var e=d[c];if(e.slotTypeVersion)for(var f=0;f<this.slotTypesUsedByCurrentBot.length;f++)if(e.slotType==this.slotTypesUsedByCurrentBot[f].name){this.slotTypesUsedByCurrentBot.splice(f,1);break}}this.currentBot.intents.splice(b,1),b<this.sidebarIndex?(this.sidebarIndex--,this.switchSideBarTabs(this.sidebarIndex)):b==this.sidebarIndex&&this.switchSideBarTabs(this.sidebarIndex)}.bind(this))},b.prototype.deleteIntent=function(a){a.delete().then(function(){var b=this.customIntents.indexOf(a,0);b>-1&&("$LATEST"==a.version&&this.hideAllVersions(b),this.customIntents.splice(b,1)),a.isSelected&&this.selectedIntentsNum--,this.updatePaginationInfo(),this.paginationRef.reset()}.bind(this))},b.prototype.expandSlotTypeVersions=function(a,b){a.getVersions("t").then(function(){for(var c=0,d=a.versions;c<d.length;c++){var e=d[c];"$LATEST"!=e.version&&(this.customSlotTypes.splice((this.botPageIndex-1)*this.pageSize+b,0,e),this.slotTypesOnCurrentPage.splice(b,0,e))}}.bind(this))},b.prototype.initializeSlotType=function(a){a.update=a.update?a.update:"",a.created=a.created?a.created:"",a.version=a.version?a.version:""},b.prototype.addNewValueToSlotType=function(){""!=this.newSlotTypeValue&&(this.currentSlotType.enumerationValues.value.push({value:this.newSlotTypeValue}),this.newSlotTypeValue="")},b.prototype.slotTypeValueChange=function(a,b){""==a&&this.currentSlotType.enumerationValues.value.splice(b,1)},b.prototype.deleteSlotType=function(a){a.delete().then(function(){var b=this.customSlotTypes.indexOf(a,0);b>-1&&("$LATEST"==a.version&&this.hideAllVersions(b),this.customSlotTypes.splice(b,1)),a.isSelected&&this.selectedSlotTypesNum--,this.updatePaginationInfo(),this.paginationRef.reset()}.bind(this))},b.prototype.defaultBot=function(){return new g.BotEntry({name:{valid:!0,value:""},locale:"en-US",childDirected:{valid:!0},clarificationPrompt:{messages:[{contentType:"PlainText",content:"Sorry, can you please repeat that?"}],maxAttempts:5},abortStatement:{messages:[{contentType:"PlainText",content:"Sorry, I could not understand. Goodbye."}]},idleSessionTTLInSeconds:{valid:!0,value:300}},this.toastr,this._apiHandler)},b.prototype.defaultIntent=function(){return new g.IntentEntry({name:{valid:!0,value:""},fulfillmentActivity:{type:"ReturnIntent"}},this.toastr,this._apiHandler)},b.prototype.defaultSlotType=function(){return new g.SlotTypeEntry({name:{valid:!0,value:""},description:"",enumerationValues:{valid:!0,value:[]}},this.toastr,this._apiHandler)},b.prototype.hideAllVersions=function(a){if(0==this.mainPageSubNavActiveIndex)for(;a+1<this.botsOnCurrentPage.length&&this.botsOnCurrentPage[a+1].name==this.botsOnCurrentPage[a].name;)this.bots.splice((this.botPageIndex-1)*this.pageSize+a+1,1),this.botsOnCurrentPage.splice(a+1,1);else if(1==this.mainPageSubNavActiveIndex)for(;a+1<this.intentsOnCurrentPage.length&&this.intentsOnCurrentPage[a+1].name==this.intentsOnCurrentPage[a].name;)this.customIntents.splice((this.intentPageIndex-1)*this.pageSize+a+1,1),this.intentsOnCurrentPage.splice(a+1,1);else if(2==this.mainPageSubNavActiveIndex)for(;a+1<this.slotTypesOnCurrentPage.length&&this.slotTypesOnCurrentPage[a+1].name==this.slotTypesOnCurrentPage[a].name;)this.customSlotTypes.splice((this.slotTypePageIndex-1)*this.pageSize+a+1,1),this.slotTypesOnCurrentPage.splice(a+1,1)},b.prototype.updatePaginationInfo=function(){if(0==this.mainPageSubNavActiveIndex)if(this.showBotEditor&&1==this.botEditorSubNavItemIndex&&0==this.sidebarIndex){var a=this.currentBot.aliases.length;this.aliasPages=Math.ceil(a/this.pageSize)}else{var b=this.bots.length;this.botPages=Math.ceil(b/this.pageSize)}else if(1==this.mainPageSubNavActiveIndex){var c="Builtin"==this.intentCategory?this.builtinIntents.length:this.customIntents.length;this.intentPages=Math.ceil(c/this.pageSize)}else if(2==this.mainPageSubNavActiveIndex){var d="Builtin"==this.slotTypeCategory?this.builtinSlotTypes.length:this.customSlotTypes.length;this.slotTypePages=Math.ceil(d/this.pageSize)}},b.prototype.getSortOrder=function(){return""==this.sortDir?this.sortDir="asc":this.sortDir="asc"==this.sortDir?"desc":"asc",this.sortDir},b.prototype.sort=function(a,b,c){"asc"==c?a.sort(function(a,c){return a[b]<c[b]?-1:a[b]>c[b]?1:0}):a.sort(function(a,c){return a[b]>c[b]?-1:a[b]<c[b]?1:0})},p([d.Input(),q("design:type",Object)],b.prototype,"context",void 0),p([d.ViewChild(e.ModalComponent),q("design:type",e.ModalComponent)],b.prototype,"modalRef",void 0),p([d.ViewChild(j.PaginationComponent),q("design:type",j.PaginationComponent)],b.prototype,"paginationRef",void 0),p([d.ViewChild("upload"),q("design:type",d.ElementRef)],b.prototype,"uploadButtonRef",void 0),p([d.ViewChild("selectAllBots"),q("design:type",d.ElementRef)],b.prototype,"selectAllBotsRef",void 0),p([d.ViewChild("selectAllIntents"),q("design:type",d.ElementRef)],b.prototype,"selectAllIntentsRef",void 0),p([d.ViewChild("selectAllSlotTypes"),q("design:type",d.ElementRef)],b.prototype,"selectAllSlotTypesRef",void 0),p([d.ViewChild("consoleLink"),q("design:type",d.ElementRef)],b.prototype,"consoleLinkRef",void 0),b=p([d.Component({selector:"speech-to-text-index",template:'<div [ngSwitch]="showBotEditor">     <div *ngSwitchCase="false">         <facet-generator [context]="context"                          [tabs]="[\'Bots\', \'Intents\', \'Slot Types\', \'Settings\']"                          (tabClicked)="getMainPageSubNavItem($event)" [metricIdentifier]="context.identifier"></facet-generator>     </div>     <div *ngSwitchCase="true">         <facet-generator [context]="context"                          [tabs]="[\'Editor\', \'Settings\']"                          (tabClicked)="getBotSubNavItem($event)" [metricIdentifier]="context.identifier"></facet-generator>     </div> </div> <div *ngIf="mainPageSubNavActiveIndex == 0">     <div *ngIf="!showBotEditor">         <button class="btn l-primary basic-button" (click)="createModal(\'bot\')">             Create Bot         </button>         <button class="btn btn-outline-primary basic-button" (click)="clickUploadButton()">             Import Bot         </button>         <input #upload class="upload-input" type="file" (change)="uploadBotDefinition($event)" accept=".json"/>         <i class="fa fa-question-circle-o upload-tooltip" aria-hidden="true" placement="right" triggers="click" [ngbTooltip]="createBotTip"></i>         <label class="number float-right">{{selectedBotsNum}} Selected</label>                  <div [ngSwitch]="isLoadingBots">             <div *ngSwitchCase="true">                 <div class="loading-spinner-container">                     <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                 </div>             </div>             <div class="content-container" *ngSwitchCase="false">                 <div *ngIf="!bots || bots.length == 0">                     No bot                 </div>                 <div *ngIf="bots.length > 0">                     <table class="table table-hover">                         <thead>                             <tr>                                 <th class="arrow-column"></th>                                 <th class="select-column">                                     <input #selectAllBots type="checkbox" [id]="\'select-all-bots\'" name="\'select-all-bots\'" (change)="selectAll($event)">                                     <label [attr.for]="\'select-all-bots\'"></label>                                 </th>                                 <th class="name-column" (click)="sortTable()">                                     NAME                                     <i *ngIf="sortDir == \'asc\'" class="fa fa-sort-amount-asc" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Sort by name"></i>                                     <i *ngIf="sortDir == \'desc\'" class="fa fa-sort-amount-desc" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Sort by name"></i>                                 </th>                                 <th class="version-column"> VERSION </th>                                 <th class="status-column"> STATUS </th>                                 <th class="updated-column"> UPDATED </th>                                 <th class="created-column"> CREATED </th>                             </tr>                         </thead>                         <tbody>                             <ng-container *ngFor="let bot of botsOnCurrentPage let i = index">                                 <tr>                                     <td class="arrow-column">                                         <span *ngIf="bot.version == \'$LATEST\'" (click)="expandAllVersions(bot, i)">                                             <i [ngClass]="bot.expandAllVersions &&  bot.expandAllVersions ? \'fa fa-angle-down\' : \'fa fa-angle-right\'" aria-hidden="true" data-toggle="tooltip" data-placement="top" [title]="bot.expandAllVersions ? \'Hide all versions\' : \'Expand all versions\'"></i>                                         </span>                                     </td>                                     <td class="select-column">                                         <span *ngIf="bot.version == \'$LATEST\'">                                             <input type="checkbox" [id]="bot.name" [(ngModel)]="bot.isSelected" (click)="updateSelectedEntriesNum(bot)">                                             <label [attr.for]="bot.name"></label>                                         </span>                                     </td>                                     <td class="name-column" (click)="showBot(bot)">                                         <span *ngIf="bot.version == \'$LATEST\'">{{bot.name}}</span>                                     </td>                                     <td class="version-column" (click)="showBot(bot)">                                         <div *ngIf="bot.version != \'$LATEST\'">                                             {{bot.version}}                                         </div>                                         <div *ngIf="bot.version == \'$LATEST\'">                                             Latest                                         </div>                                     </td>                                     <td class="status-column" (click)="showBot(bot)">                                         <span *ngIf="bot.version == \'$LATEST\'">                                             <i *ngIf="bot.status == \'PUBLISHING\'" class="fa fa-question-circle-o question-mark" aria-hidden="true" placement="left" [ngbTooltip]="publishBotTip"></i>                                             {{bot.status}}                                             <i *ngIf="bot.status == \'PUBLISHING\' || bot.status == \'BUILDING\'" class="fa fa-refresh fa-spin" aria-hidden="true"></i>                                         </span>                                         <span *ngIf="bot.version != \'$LATEST\'">                                             {{bot.status}}                                         </span>                                     </td>                                     <td class="updated-column" (click)="showBot(bot)">                                         {{bot.update}}                                     </td>                                     <td class="created-column" (click)="showBot(bot)">                                         {{bot.created}}                                     </td>                                     <td>                                         <div class="float-right">                                             <action-stub-items *ngIf="bot.version == \'$LATEST\'" class="float-right" [model]="bot" [delete]="deleteModal" [custom]="botActions"></action-stub-items>                                             <i *ngIf="bot.version != \'$LATEST\'" (click)="deleteModal(bot)" class="fa fa-trash-o delete-icon" data-toggle="tooltip" data-placement="top" title="Delete"></i>                                         </div>                                     </td>                                 </tr>                                 <tr *ngIf="bot.expandAllVersions && bot.isLoading">                                     <td colspan="8">                                         <div class="loading-spinner-container">                                             <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                                         </div>                                     </td>                                 </tr>                             </ng-container>                                                    </tbody>                     </table>                 </div>             </div>             <pagination [pages]="botPages"                         (pageChanged)="updateCurrentPage($event)"></pagination>         </div>     </div> </div> \x3c!--Template for viewing bot editor--\x3e <div *ngIf="showBotEditor">     <div *ngIf="botEditorSubNavItemIndex == 0">         <div class="sidebar">             <div class="sidebar-section">                 <div class="add-intent">                     <h2 class="inline-header">Intents</h2>                     <button *ngIf="currentBot.version == \'$LATEST\'" class="btn l-primary basic-button float-right add-button" (click)="addIntentToCurrentBotModal()" data-toggle="tooltip" data-placement="top" title="Add an intent to the bot">Add</button>                 </div>                 <p *ngIf="intentsUsedByCurrentBot.length == 0">No intents created</p>             </div>             <div *ngFor="let intent of intentsUsedByCurrentBot let i = index">                 <div [ngClass]="sidebarIndex == i ? \'active option-button\' : \'option-button\'">                     <span (click)="switchSideBarTabs(i)">{{intent["intentName"]}}</span>                     <i *ngIf="currentBot.version == \'$LATEST\'" class="fa fa-times-circle float-right remove-intent" aria-hidden="true" (click)="removeIntentFromBot(intent, i)" data-toggle="tooltip" data-placement="top" title="Delete"></i>                 </div>             </div>             <hr>             <div class="sidebar-section">                 <h2>Slot types</h2>                 <p *ngIf="intentsUsedByCurrentBot.length == 0">No slots created</p>             </div>              <button *ngFor="let slotType of slotTypesUsedByCurrentBot let i = index" [ngClass]="sidebarIndex == intentsUsedByCurrentBot.length + i ? \'active option-button\' : \'option-button\'" (click)="switchSideBarTabs(intentsUsedByCurrentBot.length + i)">{{slotType["name"]}}</button>             <hr>             <button [ngClass]="sidebarIndex == intentsUsedByCurrentBot.length + slotTypesUsedByCurrentBot.length ? \'active option-button\' : \'option-button\'" (click)="switchSideBarTabs(intentsUsedByCurrentBot.length + slotTypesUsedByCurrentBot.length)"><h2>Error handling</h2></button>         </div>         <fieldset [disabled]="currentBot.version != \'$LATEST\'">             <div *ngIf="intentsUsedByCurrentBot.length > 0">                 <div *ngIf="sidebarIndex < intentsUsedByCurrentBot.length && !isLoadingSlotTypes" class="sidebar-content">                     <edit-intent *ngIf="currentBot.version == \'$LATEST\'" [context]="context" [originalIntent]="currentIntent" (originalIntentChange)="saveIntentChangesToCurrentBot($event)" oldVersionWarning="Editing of this intent is disabled because this is an older version. To update this bot to use the latest version of the intent, use the dropdown below and switch the version &#34;Latest&#34;."></edit-intent>                     <edit-intent *ngIf="currentBot.version != \'$LATEST\'" [context]="context" [originalIntent]="currentIntent" (originalIntentChange)="saveIntentChangesToCurrentBot($event)" oldVersionWarning="Editing of this bot is disabled because this is an older version. To update this bot, switch back to the main page and select the latest version."></edit-intent>                 </div>                 <div *ngIf="sidebarIndex >= intentsUsedByCurrentBot.length && sidebarIndex < intentsUsedByCurrentBot.length + slotTypesUsedByCurrentBot.length" class="sidebar-content">                     <edit-slot-type *ngIf="currentBot.version == \'$LATEST\'" [context]="context" [originalSlotType]="currentSlotType" oldVersionWarning="Editing of this slot type is disabled because this is an older version. To update the latest version of this slot type, use the dropdown below and switch the version &#34;Latest&#34;."></edit-slot-type>                     <edit-slot-type *ngIf="currentBot.version != \'$LATEST\'" [context]="context" [originalSlotType]="currentSlotType" oldVersionWarning="Editing of this bot is disabled because this is an older version. To update this bot, switch back to the main page and select the latest version."></edit-slot-type>                 </div>             </div>             <div *ngIf="sidebarIndex == intentsUsedByCurrentBot.length + slotTypesUsedByCurrentBot.length" class="sidebar-content">                 <div *ngIf="currentBot.version != \'$LATEST\'" class="boxed">                     <span class="boxed-content">Editing of this bot is disabled because this is an older version. To update this bot, switch back to the main page and select the latest version.</span>                 </div>                 <h2>Error handling</h2>                 <prompt-configuration [context]="context" [(promptContent)]="currentBot[\'clarificationPrompt\']" [showMaxAttempts]="true" title="Clarification prompts" [editable]="currentBot.version == \'$LATEST\'"></prompt-configuration>                 <prompt-configuration [context]="context" [(promptContent)]="currentBot[\'abortStatement\']" [showMaxAttempts]="false" title="Hang-up phrase"></prompt-configuration>                 <hr>                 <div>                     <button class="btn l-primary basic-button" (click)="currentBot.save(\'SAVE\')">                         Save                     </button>                 </div>             </div>         </fieldset>     </div>     <div *ngIf="botEditorSubNavItemIndex == 1">         <div class="sidebar">             <h2>Settings</h2>             <button [ngClass]="sidebarIndex == 0 ? \'active option-button\' : \'option-button\'" (click)="switchSideBarTabs(0)">Aliases</button>             <button [ngClass]="sidebarIndex == 1 ? \'active option-button\' : \'option-button\'" (click)="switchSideBarTabs(1)">General</button>         </div>         <fieldset [disabled]="currentBot.version != \'$LATEST\'">             <div *ngIf="sidebarIndex == 0" class="sidebar-content">                 <h2>Aliases</h2>                 <div [ngSwitch]="isLoadingBotAliases || isLoadingBotVersions">                     <div *ngSwitchCase="true">                         <div class="loading-spinner-container">                             <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                         </div>                     </div>                     <div class="content-container" *ngSwitchCase="false">                         <div *ngIf="!currentBot[\'aliases\'] || currentBot[\'aliases\'].length == 0">                             No alias                         </div>                         <div *ngIf="currentBot[\'aliases\'].length > 0">                             <table class="table table-hover">                                 <thead>                                     <tr>                                         <th class="alias-name-column">                                             ALIAS NAME                                         </th>                                         <th class="bot-version-column"> Bot version </th>                                     </tr>                                 </thead>                                 <tbody>                                     <tr>                                         <td class="alias-name-column">                                             <input class="setting-box" type="text" [(ngModel)]="newAlias[\'name\']" />                                         </td>                                         <td class="bot-version-column">                                             <select class="setting-box" [(ngModel)]="newAlias[\'botVersion\']">                                                 <option *ngFor="let bot of currentBot[\'versions\']" [ngValue]="bot.version">{{bot.version}}</option>                                             </select>                                         </td>                                         <td>                                             <div class="float-right">                                                 <i class="fa fa-plus-circle" aria-hidden="true" (click)="addBotAlias()"></i>                                             </div>                                         </td>                                     </tr>                                     <tr *ngFor="let alias of aliasesOnCurrentPage let i = index">                                         <td class="alias-name-column">                                             {{alias["name"]}}                                         </td>                                         <td class="bot-version-column">                                             <select class="setting-box" [(ngModel)]="alias[\'botVersion\']" (ngModelChange)="currentBot.updateAlias(alias)">                                                 <option *ngFor="let bot of currentBot[\'versions\']" [ngValue]="bot.version">{{bot.version}}</option>                                             </select>                                         </td>                                         <td>                                             <div class="float-right">                                                 <i class="fa fa-trash-o" aria-hidden="true" (click)="deleteBotAlias(alias)"></i>                                             </div>                                         </td>                                     </tr>                                 </tbody>                             </table>                             <pagination [pages]="aliasPages"                                         (pageChanged)="updateCurrentPage($event)"></pagination>                         </div>                     </div>                 </div>             </div>             <div *ngIf="sidebarIndex == 1" class="sidebar-content">                 <h2>General</h2>                 <div class="bot-info-row">                     <label class="bot-info-name">Bot name</label>                     <label class="label-content">{{currentBot.name}}</label>                 </div>                 <div class="bot-info-row">                     <label class="bot-info-name">Description</label>                     <input class="bot-info-content form-control" type="text" [(ngModel)]="currentBot.description">                 </div>                 <div class="bot-info-row">                     <label class="bot-info-name">Language</label>                     <label class="label-content">{{currentBot.locale}}</label>                 </div>                 <div class="bot-info-row">                     <label class="bot-info-name">Session timeout</label>                     <input class="bot-info-content form-control" type="number" min="60" [(ngModel)]="currentBot.idleSessionTTLInSeconds"> seconds                     <i class="fa fa-info-circle" aria-hidden="true" placement="right" [ngbTooltip]="\'How long your bot should retain context\'"></i>                 </div>                 <div class="bot-info-row">                     <label class="bot-info-name">COPPA</label>                     <label class="label-content">                         Please indicate if your use of this bot is subject to the Children\'s Online Privacy Protection Act (COPPA).                         <i class="fa fa-info-circle" aria-hidden="true" placement="right" [ngbTooltip]="\'Why are we asking this? You can use Amazon Lex in connection with websites, programs or other applications that are subject to COPPA, but you need to let us know by answering this question. For more information, please see the Amazon Lex FAQs. Amazon Lex does not store or retain voice or text utterance information from bots that you identify as subject to COPPA, which can limit improvement of bot performance over time.\'"></i>                     </label>                     <div>                         <label class="bot-info-name"></label>                         <label class="label-content">                             <a href="https://aws.amazon.com/lex/faqs/" target="_blank">learn more</a>                         </label>                     </div>                     <div>                         <label class="bot-info-name"></label>                         <span class="bot-info-content">                             <label class="radio-btn-label">                                 <input type="radio" [value]="true" [(ngModel)]="currentBot[\'childDirected\']" name="coppa" />                                 <span></span> Yes                             </label>                             <label class="radio-btn-label">                                 <input type="radio" [value]="false" [(ngModel)]="currentBot[\'childDirected\']" name="coppa" />                                 <span></span> No                             </label>                         </span>                     </div>                 </div>                 <hr>                 <div>                     <button class="btn l-primary basic-button" (click)="saveGeneralBotInfo()">                         Save                     </button>                 </div>             </div>         </fieldset>     </div> </div> <div *ngIf="mainPageSubNavActiveIndex == 1">     <div *ngIf="!showBotEditor">         <div [ngSwitch]="showIntentEditor">             <div *ngSwitchCase="false">                 <button class="btn l-primary  basic-button" (click)="createModal(\'intent\')">                     Create Intent                 </button>                 <button class="btn l-primary  basic-button float-right" [hidden]="!selectedIntentsNum > 0" (click)="addIntentsToSelectedBotModal()">                     Add to bot                 </button>                 <label *ngIf="intentCategory==\'Custom\'" class="number float-right">{{selectedIntentsNum}} Selected</label>                 <span class="category-selection">                     <label class="radio-btn-label">                         <input type="radio" value="Custom" name="intent" [(ngModel)]="intentCategory" (ngModelChange)="switchCategory()" />                         <span></span> Custom                     </label>                     <label class="radio-btn-label">                         <input type="radio" value="Builtin" name="intent" [(ngModel)]="intentCategory" (ngModelChange)="switchCategory()" />                         <span></span> Built-in                     </label>                 </span>             </div>             <div *ngIf="!showIntentEditor" [ngSwitch]="isLoadingIntents">                 <div *ngSwitchCase="true">                     <div class="loading-spinner-container">                         <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                     </div>                 </div>                 <div class="content-container" *ngSwitchCase="false">                     <div *ngIf="!intentsOnCurrentPage || intentsOnCurrentPage.length == 0">                         No Intents                     </div>                     <div *ngIf="intentsOnCurrentPage.length > 0">                         <table class="table table-hover">                             <thead>                                 <tr>                                     <th class="arrow-column"></th>                                     <th class="select-column">                                         <span *ngIf="intentCategory==\'Custom\'">                                             <input #selectAllIntents type="checkbox" [id]="\'select-all-intents\'" name="\'select-all-intents\'" (change)="selectAll($event, intentCategory)">                                             <label [attr.for]="\'select-all-intents\'"></label>                                         </span>                                     </th>                                     <th class="name-column" (click)="sortTable()">                                         NAME                                         <i *ngIf="sortDir == \'asc\'" class="fa fa-sort-amount-asc" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Sort by name"></i>                                         <i *ngIf="sortDir == \'desc\'" class="fa fa-sort-amount-desc" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Sort by name"></i>                                     </th>                                     <th *ngIf="intentCategory == \'Custom\'" class="bots-column"> USED IN BOTS </th>                                     <th class="version-column"> VERSION </th>                                     <th class="updated-column"> UPDATED </th>                                     <th class="created-column"> CREATED </th>                                 </tr>                             </thead>                             <tbody>                                 <ng-container *ngFor="let intent of intentsOnCurrentPage let i = index">                                     <tr>                                         <td class="arrow-column">                                             <span *ngIf="intentCategory==\'Custom\' && intent.version == \'$LATEST\'" (click)="expandAllVersions(intent, i)">                                                 <i [ngClass]="intent.expandAllVersions ? \'fa fa-angle-down\' : \'fa fa-angle-right\'" aria-hidden="true" data-toggle="tooltip" data-placement="top" [title]="intent.expandAllVersions ? \'Hide all versions\' : \'Expand all versions\'"></i>                                             </span>                                         </td>                                         <td class="select-column">                                             <span *ngIf="intentCategory==\'Custom\' && intent.version == \'$LATEST\'">                                                 <input type="checkbox" [id]="intent.name" [(ngModel)]="intent.isSelected" (click)="updateSelectedEntriesNum(intent)">                                                 <label [attr.for]="intent.name"></label>                                             </span>                                             <span *ngIf="intentCategory==\'Builtin\'">                                                 <label class="radio-btn-label">                                                     <input type="radio" [value]="intent" name="builtinIntent" [(ngModel)]="newIntent" (ngModelChange)="selectedIntentsNum = 1"/>                                                     <span></span>                                                 </label>                                             </span>                                         </td>                                         <td class="name-column" (click)="showIntent(intent)">                                             <span *ngIf="intentCategory ==\'Builtin\' || intent.version == \'$LATEST\'">{{intent.name}}</span>                                         </td>                                         <td *ngIf="intentCategory == \'Custom\'" class="bots-column" (click)="showIntentDependencyModal(intent)"><a>View Bots</a></td>                                         <td class="version-column" (click)="showIntent(intent)">                                             <div *ngIf="intent.version != \'$LATEST\'">                                                 {{intent.version}}                                             </div>                                             <div *ngIf="intent.version == \'$LATEST\'">                                                 Latest                                             </div>                                         </td>                                         <td class="updated-column" (click)="showIntent(intent)">{{intent.update}}</td>                                         <td class="created-column" (click)="showIntent(intent)">{{intent.created}}</td>                                         <td>                                             <div *ngIf="intentCategory==\'Custom\'" class="float-right">                                                 <i *ngIf="intent.version == \'$LATEST\'" (click)="deleteModal(intent)" class="fa fa-trash-o delete-icon" data-toggle="tooltip" data-placement="top" title="Delete"></i>                                                 <i *ngIf="intent.version != \'$LATEST\'" (click)="deleteModal(intent)" class="fa fa-trash-o delete-icon" data-toggle="tooltip" data-placement="top" title="Delete"></i>                                             </div>                                         </td>                                     </tr>                                     <tr *ngIf="intent.expandAllVersions && intent.isLoading">                                         <td colspan="8">                                             <div class="loading-spinner-container">                                                 <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                                             </div>                                         </td>                                     </tr>                                 </ng-container>                             </tbody>                         </table>                     </div>                     <pagination [pages]="intentPages"                                 (pageChanged)="updateCurrentPage($event)"></pagination>                 </div>             </div>             <div *ngIf="showIntentEditor">                 <edit-intent [context]="context" [originalIntent]="currentIntent" oldVersionWarning="Editing of this intent is disabled because this is an older version. To update the latest version of the intent, use the dropdown below and switch the version &#34;Latest&#34;."></edit-intent>             </div>         </div>     </div> </div> <div *ngIf="mainPageSubNavActiveIndex == 2">     <div [ngSwitch]="showSlotTypeEditor">         <div *ngSwitchCase="false">             <button class="btn l-primary basic-button" (click)="createModal(\'slotType\')">                 Create Slot Type             </button>             <label *ngIf="slotTypeCategory == \'Custom\'" class="number float-right">{{selectedSlotTypesNum}} Selected</label>             <span class="category-selection">                 <label class="radio-btn-label">                     <input type="radio" value="Custom" name="slotType" [(ngModel)]="slotTypeCategory" (ngModelChange)="switchCategory()" />                     <span></span> Custom                 </label>                 <label class="radio-btn-label">                     <input type="radio" value="Builtin" name="slotType" [(ngModel)]="slotTypeCategory" (ngModelChange)="switchCategory()" />                     <span></span> Built-in                 </label>             </span>         </div>         <div *ngIf="!showSlotTypeEditor" [ngSwitch]="isLoadingSlotTypes">             <div *ngSwitchCase="true">                 <div class="loading-spinner-container">                     <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                 </div>             </div>             <div class="content-container" *ngSwitchCase="false">                 <div *ngIf="!slotTypesOnCurrentPage || slotTypesOnCurrentPage.length == 0">                     No Slot Types                 </div>                 <div *ngIf="slotTypesOnCurrentPage.length > 0">                     <table class="table table-hover">                         <thead>                             <tr>                                 <th *ngIf="slotTypeCategory==\'Custom\'" class="arrow-column"></th>                                 <th *ngIf="slotTypeCategory == \'Custom\'" class="select-column">                                     <input #selectAllSlotTypes type="checkbox" [id]="\'select-all-slot-types\'" name="\'select-all-slot-types\'" (change)="selectAll($event, slotTypeCategory)">                                     <label [attr.for]="\'select-all-slot-types\'"></label>                                 </th>                                 <th class="name-column" (click)="sortTable()">                                     NAME                                     <i *ngIf="sortDir == \'asc\'" class="fa fa-sort-amount-asc" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Sort by name"></i>                                     <i *ngIf="sortDir == \'desc\'" class="fa fa-sort-amount-desc" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="Sort by name"></i>                                 </th>                                 <th class="version-column"> VERSION </th>                                 <th class="updated-column"> UPDATED </th>                                 <th class="created-column"> CREATED </th>                             </tr>                         </thead>                         <tbody>                             <ng-container *ngFor="let slotType of slotTypesOnCurrentPage let i = index">                                 <tr>                                     <td *ngIf="slotTypeCategory==\'Custom\'" class="arrow-column">                                         <span *ngIf="slotType.version == \'$LATEST\'" (click)="expandAllVersions(slotType, i)">                                             <i [ngClass]="slotType.expandAllVersions ? \'fa fa-angle-down\' : \'fa fa-angle-right\'" aria-hidden="true" data-toggle="tooltip" data-placement="top" [title]="slotType.expandAllVersions ? \'Hide all versions\' : \'Expand all versions\'"></i>                                         </span>                                     </td>                                     <td *ngIf="slotTypeCategory == \'Custom\'" class="select-column">                                         <span *ngIf="slotType.version == \'$LATEST\'">                                             <input type="checkbox" [id]="slotType.name" [(ngModel)]="slotType.isSelected" (click)="updateSelectedEntriesNum(slotType)">                                             <label [attr.for]="slotType.name"></label>                                         </span>                                     </td>                                     <td class="name-column" (click)="showSlotType(slotType)">                                         <span *ngIf="slotTypeCategory == \'Builtin\' || slotType.version == \'$LATEST\'">{{slotType.name}}</span>                                     </td>                                     <td class="version-column" (click)="showSlotType(slotType)">                                         <div *ngIf="slotType.version != \'$LATEST\'">                                             {{slotType.version}}                                         </div>                                         <div *ngIf="slotType.version == \'$LATEST\'">                                             Latest                                         </div>                                     </td>                                     <td class="updated-column" (click)="showslotType(slotType)">                                         {{slotType.update}}                                     </td>                                     <td class="created-column" (click)="showslotType(slotType)">                                         {{slotType.created}}                                     </td>                                     <td>                                         <div *ngIf="slotTypeCategory==\'Custom\'" class="float-right">                                             <i *ngIf="slotType.version == \'$LATEST\'" (click)="deleteModal(slotType)" class="fa fa-trash-o delete-icon" data-toggle="tooltip" data-placement="top" title="Delete"></i>                                             <i *ngIf="slotType.version != \'$LATEST\'" (click)="deleteModal(slotType)" class="fa fa-trash-o delete-icon" data-toggle="tooltip" data-placement="top" title="Delete"></i>                                         </div>                                     </td>                                 </tr>                                 <tr *ngIf="slotType.expandAllVersions && slotType.isLoading">                                     <td colspan="8">                                         <div class="loading-spinner-container">                                             <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                                         </div>                                     </td>                                 </tr>                             </ng-container>                         </tbody>                     </table>                 </div>                 <pagination [pages]="slotTypePages"                             (pageChanged)="updateCurrentPage($event)"></pagination>             </div>         </div>          <div *ngIf="showSlotTypeEditor">             <edit-slot-type [context]="context" [originalSlotType]="currentSlotType" oldVersionWarning="Editing of this slot type is disabled because this is an older version. To update the latest version of the slot type, use the dropdown below and switch the version &#34;Latest&#34;."></edit-slot-type>         </div>     </div> </div> <div *ngIf="mainPageSubNavActiveIndex == 3">     <span class="col-md-10"> Additional settings can be configured through the <a #consoleLink href="" (click)="openAWSConsole()" target="_blank">Amazon Lex Console <i class="fa fa-external-link"></i></a>.</span> </div>  \x3c!-- Create modal --\x3e <modal *ngIf="mode == sttModes.Create"        [title]="createModalTitle()"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Add\'"        (modalSubmitted)="create()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <div [ngSwitch]="createModalType">             <div *ngSwitchCase="\'bot\'">                 <form>                     <div class="form-group row" [class.has-danger]="!currentBot.name.valid">                         <label class="col-3 col-form-label affix">Bot name</label>                         <div class="col-9">                             <input type="text" class="form-control" [(ngModel)]="currentBot.name.value" name="new-bot-name" placeholder="Enter your new bot name here">                             <div *ngIf="!currentBot.name.valid" class="form-control-feedback">{{currentBot.name.message}}</div>                         </div>                     </div>                     <div class="form-group row">                         <label class="col-3 col-form-label affix">Bot description</label>                         <div class="col-9">                             <textarea class="form-control" [(ngModel)]="currentBot.description" name="new-bot-description" placeholder="Enter your new bot description here" cols="100" rows="5"></textarea>                         </div>                     </div>                     <div class="form-group row" [class.has-danger]="!currentBot.idleSessionTTLInSeconds.valid" (focusout)="validateTimeout(currentBot)">                         <label class="col-3 col-form-label affix">Session timeout</label>                         <div class="col-9">                             <input  class="col-6 form-control" type="number" min="60" [(ngModel)]="currentBot.idleSessionTTLInSeconds.value" name="new-bot-timeout" placeholder="Enter your session timeout here"> seconds                             <i class="fa fa-info-circle" aria-hidden="true" placement="right" [ngbTooltip]="\'How long your bot should retain context\'"></i>                             <div *ngIf="!currentBot.idleSessionTTLInSeconds.valid" class="form-control-feedback">{{currentBot.idleSessionTTLInSeconds.message}}</div>                         </div>                     </div>                     <div class="form-group row" [class.has-danger]="!currentBot.childDirected.valid">                         <label class="col-3 col-form-label affix">COPPA</label>                         <div class="col-9">                             Please indicate if your use of this bot is subject to the Children\'s Online Privacy Protection Act (COPPA).                             <label class="bot-info-name"></label>                             <label class="label-content">                                 <a href="https://aws.amazon.com/lex/faqs/" target="_blank">learn more</a>                             </label>                             <div>                                 <label class="radio-btn-label">                                     <input type="radio" [value]="true" [(ngModel)]="currentBot.childDirected.value" name="coppa" />                                     <span></span> Yes                                 </label>                                 <label class="radio-btn-label">                                     <input type="radio" [value]="false" [(ngModel)]="currentBot.childDirected.value" name="coppa" />                                     <span></span> No                                 </label>                                 <div *ngIf="!currentBot.childDirected.valid" class="form-control-feedback">{{currentBot.childDirected.message}}</div>                             </div>                         </div>                     </div>                 </form>                            </div>             <div *ngSwitchCase="\'intent\'">                 <form>                     <div class="form-group row" [class.has-danger]="!currentIntent.name.valid">                         <label class="col-3 col-form-label affix">Intent name</label>                         <div class="col-9">                             <input type="text" class="form-control" [(ngModel)]="currentIntent.name.value" name="new-intent" placeholder="Give a unique name for the new intent">                             <div *ngIf="!currentIntent.name.valid" class="form-control-feedback">{{currentIntent.name.message}}</div>                         </div>                     </div>                 </form>             </div>             <div *ngSwitchCase="\'slotType\'">                 <form>                     <div class="form-group row" [class.has-danger]="!currentSlotType.name.valid">                         <label class="col-3 col-form-label affix">Slot type name</label>                         <div class="col-9">                             <input type="text" class="form-control" [(ngModel)]="currentSlotType.name.value" name="new-slot-type" placeholder="Give a unique name for the new slot type">                             <div *ngIf="!currentSlotType.name.valid" class="form-control-feedback">{{currentSlotType.name.message}}</div>                         </div>                     </div>                     <div class="form-group row">                         <label class="col-3 col-form-label affix">Description</label>                         <div class="col-9">                             <textarea class="form-control" [(ngModel)]="currentSlotType.description" name="new-slot-type-description" placeholder="Enter your new slot type description here" cols="100" rows="5"></textarea>                         </div>                     </div>                     <div class="form-group row" [class.has-danger]="!currentSlotType.enumerationValues.valid">                         <label class="col-3 col-form-label affix">Value</label>                         <div class="col-9">                             <div class="slot-type-input">                                 <input name="new-slot-type-value" class="col-10 form-control" type="text" [(ngModel)]="newSlotTypeValue" placeholder="Enter your new slot type value here" />                                 <button class="btn l-primary basic-button add-value-button" (click)="addNewValueToSlotType()" data-toggle="tooltip" data-placement="top" title="Add a new value">Add</button>                             </div>                             <div *ngFor="let enumerationValue of currentSlotType.enumerationValues.value let i = index" class="slot-type-input">                                 <input [name]="\'slot-value\' + i" class="col-10 form-control" type="text" [(ngModel)]="currentSlotType.enumerationValues.value[i][\'value\']" (ngModelChange)="slotTypeValueChange($event, i)"/>                                 <i class="fa fa-trash-o" aria-hidden="true" (click)="removeEntry(currentSlotType.enumerationValues.value, enumerationValue)"></i>                             </div>                             <div *ngIf="!currentSlotType.enumerationValues.valid" class="form-control-feedback">{{currentSlotType.enumerationValues.message}}</div>                         </div>                     </div>                 </form>             </div>         </div>     </div> </modal>  \x3c!-- Build modal --\x3e <modal *ngIf="mode == sttModes.Build"        [title]="\'Build your bot\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Build\'"        (modalSubmitted)="build()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         You can start testing the Bot once the build completes successfully.     </div> </modal>  \x3c!-- Publish modal --\x3e <modal *ngIf="mode == sttModes.Publish"        [title]="\'Publish Bot\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Publish Bot\'"        (modalSubmitted)="publish()"        [metricIdentifier]="context.identifier">         <div class="modal-body">             <form>                 <div class="form-group row">                     <label class="col-3 col-form-label affix">Alias</label>                     <div class="col-8">                         <input type="text" class="form-control" [(ngModel)]="newAlias.name" name="alias" placeholder="MyBotAlias">                     </div>                 </div>             </form>             <p>                 For more information on Lex versioning and aliases, see the documentation <a href="http://docs.aws.amazon.com/lex/latest/dg/versioning-aliases.html" target="_blank">here</a>.             </p>         </div> </modal>  \x3c!-- Delete modal --\x3e <modal *ngIf="mode == sttModes.Delete"        [title]="deleteModalTitle()"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Delete\'"        (modalSubmitted)="delete()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <div *ngIf="mainPageSubNavActiveIndex == 0">             <p> Are you sure you want to delete the selected bot?</p>             \x3c!--<pre>{{currentBot | json | devonly}}</pre>--\x3e         </div>         <div *ngIf="mainPageSubNavActiveIndex == 1">             <p> Are you sure you want to delete the selected intent?</p>             \x3c!--<pre>{{currentIntent | json | devonly}}</pre>--\x3e         </div>         <div *ngIf="mainPageSubNavActiveIndex == 2">             <p> Are you sure you want to delete the selected slot type?</p>             \x3c!--<pre>{{currentSlotType | json | devonly}}</pre>--\x3e         </div>     </div> </modal>  \x3c!-- ShowIntentDependency modal --\x3e <modal *ngIf="mode == sttModes.ShowIntentDependency"        [title]="currentIntent.name"        [autoOpen]="true"        [hasSubmit]="false"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Close\'"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <div [ngSwitch]="isLoadingIntentDependency">             <div *ngSwitchCase="true">                 <div class="loading-spinner-container">                     <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                 </div>             </div>             <div class="content-container" *ngSwitchCase="false">                 <div *ngIf="!intentDependency[currentIntent.name] || !intentDependency[currentIntent.name][currentIntent.version]">                     No bot                 </div>                 <div *ngIf="intentDependency[currentIntent.name] && intentDependency[currentIntent.name][currentIntent.version]">                     <div class="table-scroll">                         <table class="table table-hover">                             <thead>                                 <tr>                                     <th class="name-column">BOT NAME</th>                                     <th class="version-column"> VERSION </th>                                     <th class="updated-column"> UPDATED </th>                                     <th class="created-column"> CREATED </th>                                 </tr>                             </thead>                             <tbody>                                 <tr *ngFor="let bot of intentDependency[currentIntent.name][currentIntent.version]">                                     <td class="name-column" (click)="showBot(bot)">                                         {{bot.name}}                                     </td>                                     <td class="version-column" (click)="showBot(bot)">                                         <div *ngIf="bot.version != \'$LATEST\'">                                             {{bot.version}}                                         </div>                                         <div *ngIf="bot.version == \'$LATEST\'">                                             Latest                                         </div>                                     </td>                                     <td class="updated-column" (click)="showBot(bot)">                                         {{bot.update}}                                     </td>                                     <td class="created-column" (click)="showBot(bot)">                                         {{bot.created}}                                     </td>                                 </tr>                             </tbody>                         </table>                     </div>                 </div>             </div>         </div>     </div> </modal>  \x3c!-- AddIntentsToSelectedBot modal --\x3e <modal *ngIf="mode == sttModes.AddIntentsToSelectedBot"        [title]="\'Add to bot\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Add\'"        (modalSubmitted)="addIntentsToCurrentBot()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <p>You are going to add the selected intent(s) to the following Bot:</p>         <div *ngIf="intentCategory == \'Builtin\'" class="form-group row">             <label class="col-3 col-form-label affix">Intent Name</label>             <div class="col-9">                 <input class="form-control full-width" type="text" [(ngModel)]="newIntentName[\'value\']" placeholder="e.g. TodaysWeather, GetDrinkOrder">                 <div *ngIf="!newIntentName.valid" class="form-control-feedback">{{newIntentName.message}}</div>             </div>         </div>         <div [ngSwitch]="isLoadingBots">             <div *ngSwitchCase="true">                 <div class="loading-spinner-container">                     <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>                 </div>             </div>             <div class="content-container" *ngSwitchCase="false">                 <div *ngIf="!bots || bots.length == 0">                     No bot                 </div>                 <div *ngIf="bots.length > 0">                     <div class="table-scroll">                         <table class="table table-hover">                             <thead>                                 <tr>                                     <th class="radio-button-column"></th>                                     <th class="name-column">BOT NAME</th>                                     <th class="status-column"> STATUS </th>                                     <th class="updated-column"> UPDATED </th>                                     <th class="created-column"> CREATED </th>                                 </tr>                             </thead>                             <tbody>                                 <tr *ngFor="let bot of bots">                                     <td class="radio-button-column">                                         <label class="radio-btn-label">                                             <input type="radio" [value]="bot" name="bot" [(ngModel)]="currentBot"/>                                             <span></span>                                         </label>                                     </td>                                     <td class="name-column">                                         {{bot.name}}                                     </td>                                     <td class="status-column">                                         {{bot.status}}                                     </td>                                     <td class="updated-column">                                         {{bot.update}}                                     </td>                                     <td class="created-column">                                         {{bot.created}}                                     </td>                                 </tr>                             </tbody>                         </table>                     </div>                 </div>             </div>         </div>     </div> </modal>  \x3c!-- AddIntentToCurrentBot modal --\x3e <modal *ngIf="mode == sttModes.AddIntentToCurrentBot"        [title]="\'Add Intent\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Add\'"        (modalSubmitted)="addIntentsToCurrentBot()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <div *ngIf="intentCategory == \'Custom\'">             <div>                 <button class="btn l-primary basic-button" (click)="selectNewIntent()">                     Create new intent                 </button>             </div>             <div>                 <hr class="col-5 float-left">                 <span class="col-2"> Or </span>                 <hr class="col-5 float-right">             </div>             <h2>Select existing intent</h2>             <div class="available-intents">                 <h3>Custom intents</h3>                 <ul>                     <ng-container *ngFor="let intent of customIntents">                         <li *ngIf="!intentExistsInCurrentBot(intent)" (click)="selectCustomIntent(intent)" [ngClass]="intent[\'isSelected\'] ? \'selected existing-intents\' : \'existing-intents\'">                             <a>{{intent.name}}</a>                         </li>                     </ng-container>                 </ul>                 <h3>Built-in intents</h3>                 <ul>                     <li *ngFor="let intent of builtinIntents" (click)="selectBuiltinIntent(intent)" class="existing-intents">                         <a class="intent-name">{{intent.name}}</a>                     </li>                 </ul>             </div>         </div>         <div *ngIf="intentCategory == \'Builtin\'">             <div  class="form-group" [class.has-danger]="!newIntentName.valid">                 <p class="description">Give a new name for the built-in intent</p>                 <input class="form-control" type="text" [(ngModel)]="newIntentName[\'value\']" placeholder="e.g. TodaysWeather, GetDrinkOrder">                 <div *ngIf="!newIntentName.valid" class="form-control-feedback">{{newIntentName.message}}</div>             </div>         </div>         <div *ngIf="intentCategory == \'New\'">             <div class="form-group row" [class.has-danger]="!newIntent.name.valid">                 <label class="col-3 col-form-label affix">Intent name</label>                 <div class="col-9">                     <input type="text" class="form-control" [(ngModel)]="newIntent.name.value" name="new-intent" placeholder="e.g. TodaysWeather, GetDrinkOrder">                     <div *ngIf="!newIntent.name.valid" class="form-control-feedback">{{newIntent.name.message}}</div>                 </div>             </div>         </div>     </div> </modal>',styles:[".basic-button{margin-left:5px;margin-right:5px;margin-top:0px}.number{margin-top:8px;margin-right:5px}.upload-input{display:none}.upload-tooltip{cursor:pointer}.inline-header{display:inline;margin-bottom:0;vertical-align:middle}.loading-spinner-container{clear:both;text-align:center}.content-container{margin-bottom:30px}.category-selection{margin-left:10px}table.table{margin-bottom:30px}table.table thead{display:table-header-group}table.table tr .arrow-column{width:2%}table.table tr .name-column{width:15%}table.table tr .version-column{width:15%}table.table tr .preview-column{width:15%}table.table tr .status-column{width:15%}table.table tr .updated-column{width:15%}table.table tr .created-column{width:15%}table.table tr .alias-name-column{width:40%}table.table tr .bot-version-column{width:40%}table.table tr .select-column{width:5%}table.table tr .radio-button-column{width:5%}.table-scroll{height:400px;overflow:auto}div.sidebar{float:left;border:1px solid #ccc;background-color:#f8f8f8;width:13%;padding-top:10px}div.sidebar .add-intent{min-height:20px;overflow:hidden}div.sidebar .add-intent .add-button{margin-top:1px}div.sidebar .add-intent .add-button:hover{color:#fff}div.sidebar .option-button{background-color:inherit;color:black;padding:5px;width:100%;border:none;outline:none;text-align:left;cursor:pointer;transition:0.3s}div.sidebar .option-button .remove-intent{display:none}div.sidebar .option-button:hover{color:#6441A5}div.sidebar .option-button:hover .remove-intent{padding-top:3px;cursor:pointer;display:inline;color:#000}div.sidebar .option-button.active{color:#6441A5;font-weight:bold;border-left:4px solid #6441A5}.sidebar-section{padding-left:4px}.sidebar-content{float:left;padding:0px 30px;width:87%;border-left:none;overflow:hidden}.bot-info-row{margin-bottom:20px}.bot-info-row .bot-info-name{width:30%;text-align:right;vertical-align:top}.bot-info-row .bot-info-content{margin-left:20px;width:40%;vertical-align:top}.bot-info-row .label-content{margin-left:20px;width:40%;vertical-align:top}.setting-box{width:48%;height:20px;margin-top:2px}.description{margin-bottom:5px}.property-content{width:90%;height:20px;margin-bottom:5px}.available-intents{overflow:auto}li{list-style-type:none;cursor:pointer}.selected{background-color:#f8f8f8}.existing-intents{color:#6441A5}.existing-intents:hover{background-color:#f8f8f8}.slot-description{padding-top:8px}.form-control{display:inline}.row-basic-container{padding-left:0;padding-right:0}.row-radio-buttons-container{padding-left:0;padding-right:0;margin-top:5px}.boxed{border:1px solid #6441A5;height:50px;line-height:50px;padding-left:5px;margin-bottom:10px}.boxed .boxed-content{display:inline-block;vertical-align:middle;line-height:normal}.intent-name{color:#6441A5}.slot-type-input{margin-bottom:10px;vertical-align:baseline}.slot-type-input .add-value-button{margin:0px 0px 0px 0px}"]}),q("design:paramtypes",[c.Http,f.AwsService,i.ToastsManager,d.ViewContainerRef,l.LyMetricService,l.BreadcrumbService])],b)}(h.AbstractCloudGemIndexComponent),a("SpeechToTextIndexComponent",n)}}}),a.register("4e",["1a","45","1b","7"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(){}return a=h([f.NgModule({imports:[e.GameSharedModule,c.GemModule],declarations:[d.SpeechToTextIndexComponent,d.SpeechToTextThumbnailComponent,d.SpeechToTextEditIntentComponent,d.SpeechToTextEditSlotTypeComponent,d.SpeechToTextPromptComponent,d.SpeechToTextPromptConfigurationComponent],providers:[],bootstrap:[d.SpeechToTextThumbnailComponent,d.SpeechToTextIndexComponent]})],a)}(),a("CloudGemSpeechRecognitionModule",g)}}}),a.register("45",["43","44","46","47","48","49","4a","4b","4c","4d","4e"],function(a,b){"use strict";function c(b){var c={};for(var d in b)"default"!==d&&(c[d]=b[d]);a(c)}b&&b.id;return{setters:[function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)}],execute:function(){}}}),a.register("42",["45"],function(a,b){"use strict";function c(){return d.CloudGemSpeechRecognitionModule}b&&b.id;a("definition",c);var d;return{setters:[function(a){d=a}],execute:function(){}}})})(function(a){if("function"==typeof define&&define.amd)define(["app/shared/class/index.js","app/view/game/module/cloudgems/class/index.js","@angular/core","@angular/http","app/aws/aws.service.js","app/shared/service/index.js","app/shared/component/index.js","ng2-toastr/ng2-toastr.js","ng2-toastr","app/view/game/module/shared/component/index.js","app/view/game/module/shared/class/index.js","app/view/game/module/cloudgems/gem.module.js","app/view/game/module/shared/shared.module.js"],a);else{if("object"!=typeof module||!module.exports||"function"!=typeof require)throw new Error("Module must be loaded as AMD or CommonJS");module.exports=a(require("app/shared/class/index.js"),require("app/view/game/module/cloudgems/class/index.js"),require("@angular/core"),require("@angular/http"),require("app/aws/aws.service.js"),require("app/shared/service/index.js"),require("app/shared/component/index.js"),require("ng2-toastr/ng2-toastr.js"),require("ng2-toastr"),require("app/view/game/module/shared/component/index.js"),require("app/view/game/module/shared/class/index.js"),require("app/view/game/module/cloudgems/gem.module.js"),require("app/view/game/module/shared/shared.module.js"))}});