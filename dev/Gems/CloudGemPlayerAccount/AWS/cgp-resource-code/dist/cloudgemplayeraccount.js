!function(a){function b(a,b,c){a in i||(i[a]={name:a,declarative:!0,deps:b,declare:c,normalizedDeps:b})}function c(a){return m[a]||(m[a]={name:a,dependencies:[],exports:{},importers:[]})}function d(b){if(!b.module){var e=b.module=c(b.name),f=b.module.exports,g=b.declare.call(a,function(a,b){if(e.locked=!0,"object"==typeof a)for(var c in a)f[c]=a[c];else f[a]=b;for(var d=0,g=e.importers.length;g>d;d++){var h=e.importers[d];if(!h.locked)for(var i=0;i<h.dependencies.length;++i)h.dependencies[i]===e&&h.setters[i](f)}return e.locked=!1,b},b.name);e.setters=g.setters,e.execute=g.execute;for(var j=0,k=b.normalizedDeps.length;k>j;j++){var l,n=b.normalizedDeps[j],o=i[n],p=m[n];p?l=p.exports:o&&!o.declarative?l=o.esModule:o?(d(o),p=o.module,l=p.exports):l=h(n),p&&p.importers?(p.importers.push(e),e.dependencies.push(p)):e.dependencies.push(null),e.setters[j]&&e.setters[j](l)}}}function e(b){var c={};if(("object"==typeof b||"function"==typeof b)&&b!==a)if(k)for(var d in b)"default"!==d&&f(c,b,d);else{var e=b&&b.hasOwnProperty;for(var d in b)"default"===d||e&&!b.hasOwnProperty(d)||(c[d]=b[d])}return c.default=b,l(c,"__useDefault",{value:!0}),c}function f(a,b,c){try{var d;(d=Object.getOwnPropertyDescriptor(b,c))&&l(a,c,d)}catch(d){return a[c]=b[c],!1}}function g(b,c){var d=i[b];if(d&&!d.evaluated&&d.declarative){c.push(b);for(var e=0,f=d.normalizedDeps.length;f>e;e++){var k=d.normalizedDeps[e];-1==j.call(c,k)&&(i[k]?g(k,c):h(k))}d.evaluated||(d.evaluated=!0,d.module.execute.call(a))}}function h(a){if(o[a])return o[a];if("@node/"==a.substr(0,6))return o[a]=e(n(a.substr(6)));var b=i[a];if(!b)throw"Module "+a+" not present.";return d(i[a]),g(a,[]),i[a]=void 0,b.declarative&&l(b.module.exports,"__esModule",{value:!0}),o[a]=b.declarative?b.module.exports:b.esModule}var i={},j=Array.prototype.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},k=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(a){k=!1}var l;!function(){try{Object.defineProperty({},"a",{})&&(l=Object.defineProperty)}catch(a){l=function(a,b,c){try{a[b]=c.value||c.get.call(a)}catch(a){}}}}();var m={},n="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,o={"@empty":{}};return function(a,c,d,f){return function(g){g(function(g){for(var i=0;i<c.length;i++)!function(a,b){b&&b.__esModule?o[a]=b:o[a]=e(b)}(c[i],arguments[i]);f({register:b});var j=h(a[0]);if(a.length>1)for(var i=1;i<a.length;i++)h(a[i]);return d?j.default:j})}}}("undefined"!=typeof self?self:global)(["33"],["4","9","7","8","a","b","11","12","13","10","1a","1b"],!1,function(a){this.require,this.exports,this.module;a.register("34",["4"],function(a,b){"use strict";var c,d,e=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();b&&b.id;return{setters:[function(a){c=a}],execute:function(){d=function(a){function b(b,c,d,e,f){return void 0===e&&(e=null),void 0===f&&(f=""),a.call(this,b,c,d,e,f)||this}return e(b,a),b.prototype.searchCognitoEmail=function(b){return a.prototype.get.call(this,"admin/accountSearch?CognitoIdentityId=&CognitoUsername=&Email="+encodeURIComponent(b)+"&StartPlayerName=")},b.prototype.searchCognitoUsername=function(b){return a.prototype.get.call(this,"admin/accountSearch?CognitoIdentityId=&CognitoUsername="+encodeURIComponent(b)+"&Email=&StartPlayerName=")},b.prototype.searchCognitoId=function(b){return a.prototype.get.call(this,"admin/accountSearch?CognitoIdentityId="+encodeURIComponent(b)+"&CognitoUsername=&Email=&StartPlayerName=")},b.prototype.searchPlayerName=function(b,c){return c?a.prototype.get.call(this,"admin/accountSearch?Email=&CognitoIdentityId=&CognitoUsername=&StartPlayerName="+encodeURIComponent(b)+"&PageToken="+encodeURIComponent(c)):a.prototype.get.call(this,"admin/accountSearch?Email=&CognitoIdentityId=&CognitoUsername=&StartPlayerName="+encodeURIComponent(b))},b.prototype.searchAccountId=function(b){return""!=b?a.prototype.get.call(this,"admin/accounts/"+encodeURIComponent(b)):a.prototype.get.call(this,"admin/accountSearch")},b.prototype.searchBannedPlayers=function(b){return a.prototype.get.call(this,"admin/accounts/"+encodeURIComponent(b))},b.prototype.emptySearch=function(){return a.prototype.get.call(this,"admin/accountSearch")},b.prototype.editAccount=function(b,c){return a.prototype.put.call(this,"admin/accounts/"+encodeURIComponent(b),c)},b.prototype.createAccount=function(b){return a.prototype.post.call(this,"admin/accounts",b)},b.prototype.resetUserPassword=function(b){return a.prototype.post.call(this,"admin/identityProviders/Cognito/users/"+b+"/resetUserPassword")},b.prototype.confirmUser=function(b){return a.prototype.post.call(this,"admin/identityProviders/Cognito/users/"+b+"/confirmSignUp")},b}(c.ApiHandler),a("PlayerAccountApi",d)}}}),a.register("35",["9","7","36","8","a","b"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(a){function b(b,d,e){var f=a.call(this)||this;return f.http=b,f.aws=d,f.metricservice=e,f.displayName="Player Account",f.srcIcon="https://m.media-amazon.com/images/G/01/cloudcanvas/images/player_account_optimized._V518452893_.png",f.state=new c.TackableStatus,f.metric=new c.TackableMeasure,f}return j(b,a),b.prototype.ngOnInit=function(){this._apiHandler=new e.PlayerAccountApi(this.context.ServiceUrl,this.http,this.aws,this.metricservice,this.context.identifier),this.report(this.metric),this.assign(this.state)},b.prototype.report=function(a){a.name="Registered Player(s)",a.value="Loading...",this._apiHandler.get("admin/identityProviders/Cognito").subscribe(function(b){var c=JSON.parse(b.body.text());a.value=c.result.EstimatedNumberOfUsers.toString()})},b.prototype.assign=function(a){a.label="Loading",a.styleType="Loading",this._apiHandler.get("service/status").subscribe(function(b){var c=JSON.parse(b.body.text());a.label="online"==c.result.status?"Online":"Offline",a.styleType="online"==c.result.status?"Enabled":"Offline"},function(b){a.label="Offline",a.styleType="Offline"})},k([d.Input(),l("design:type",Object)],b.prototype,"context",void 0),k([d.Input(),l("design:type",String)],b.prototype,"displayName",void 0),k([d.Input(),l("design:type",String)],b.prototype,"srcIcon",void 0),b=k([d.Component({selector:"cloudgemplayeraccount-thumbnail",template:'\n    <thumbnail-gem \n        [title]="displayName" \n        [cost]="\'Low\'" \n        [srcIcon]="srcIcon" \n        [metric]="metric" \n        [state]="state" \n        >\n    </thumbnail-gem>'}),l("design:paramtypes",[f.Http,g.AwsService,h.LyMetricService])],b)}(c.AbstractCloudGemThumbnailComponent),a("PlayerAccountThumbnailComponent",i)}}}),a.register("37",[],function(a,b){"use strict";var c,d,e,f,g,h,i;b&&b.id;return{setters:[],execute:function(){c=function(){function a(a,b){void 0===a&&(a=!0),void 0===b&&(b=null),this.isvalid=!0,this.message=null,this.isvalid=a,this.message=b}return a}(),a("ValidationModelEntry",c),d=function(){function a(){this.username=new c(!0,"Username is required"),this.playerName=new c,this.gender=new c,this.locale=new c,this.givenName=new c,this.middleName=new c,this.familyName=new c,this.email=new c(!0,"Email is required"),this.accountId=new c,this.birthdate=new c,this.phone=new c,this.nickName=new c}return a}(),a("ValidationModel",d),e=function(){function a(){}return a}(),a("PlayerAccountEditModel",e),f=function(){function a(){}return a}(),a("SerializationModel",f),g=function(){function a(){}return a}(),a("PlayerAccountModel",g),h=function(){function a(){}return a}(),a("IdentityModel",h),i=function(){function a(){}return a}(),a("CognitoModel",i)}}}),a.register("38",["7","11","4","12","13","9","36","8","a","10","b"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m,n,o,p=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),q=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},r=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a},function(a){k=a},function(a){l=a},function(a){m=a}],execute:function(){!function(a){a[a.List=0]="List",a[a.Edit=1]="Edit",a[a.Delete=2]="Delete",a[a.Add=3]="Add",a[a.Show=4]="Show",a[a.Ban=5]="Ban"}(n||(n={})),a("Mode",n),o=function(a){function b(b,c,f,g,h){var i=a.call(this)||this;return i.http=b,i.aws=c,i.toastr=f,i.metric=h,i.activeSubMenuIndex=0,i.searchControl=new d.FormControl,i.dateTimeUtil=e.DateTimeUtil,i.awsCognitoLink="https://console.aws.amazon.com/cognito/home",i.currentPageIndex=0,i.enablePagination=!1,i.previousPaginationToken="",i.nextPaginationToken="",i.accountStatus={active:"active",pending:"pending",anonymous:"anonymous",unconfirmed:"unconfirmed",archived:"archived",confirmed:"confirmed",compromised:"compromised",reset_required:"reset_required",force_change_password:"force_change_password",disabled:"disabled",unknown:"unknown"},i}return p(b,a),b.prototype.ngOnInit=function(){this.mode=n.List,this.modes=n,this._apiHandler=new i.PlayerAccountApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.show=this.show.bind(this),this.onAdd=this.onAdd.bind(this),this.dismissAddModal=this.dismissAddModal.bind(this),this.addAccount=this.addAccount.bind(this),this.onEdit=this.onEdit.bind(this),this.dismissEditModal=this.dismissEditModal.bind(this),this.edit=this.edit.bind(this),this.changePassword=this.changePassword.bind(this),this.confirmAccount=this.confirmAccount.bind(this),this.banAccount=this.banAccount.bind(this),this.removeBan=this.removeBan.bind(this),this._apiHandler.searchAccountId=this._apiHandler.searchAccountId.bind(this._apiHandler),this._apiHandler.searchPlayerName=this._apiHandler.searchPlayerName.bind(this._apiHandler),this._apiHandler.searchCognitoId=this._apiHandler.searchCognitoId.bind(this._apiHandler),this._apiHandler.searchCognitoUsername=this._apiHandler.searchCognitoUsername.bind(this._apiHandler),this._apiHandler.searchCognitoEmail=this._apiHandler.searchCognitoEmail.bind(this._apiHandler),this._apiHandler.searchBannedPlayers=this._apiHandler.searchBannedPlayers.bind(this._apiHandler);for(var a in this.actionStubActions)this.actionStubActions[a].onClick=this.actionStubActions[a].onClick.bind(this);this.searchTypes=[{text:"Account Id",functionCb:this._apiHandler.searchAccountId},{text:"Player Name",functionCb:this._apiHandler.searchPlayerName},{text:"Cognito Identity",functionCb:this._apiHandler.searchCognitoId},{text:"Cognito Username",functionCb:this._apiHandler.searchCognitoUsername},{text:"Cognito Email",functionCb:this._apiHandler.searchCognitoEmail}],this.list()},Object.defineProperty(b.prototype,"searchType",{get:function(){var a=localStorage.getItem(this.context.name+"searchTypeId"),b=parseInt(a);return null===a||void 0===a||""===a||NaN===b?0:b},set:function(a){void 0!==a&&localStorage.setItem(this.context.name+"searchTypeId",a.toString())},enumerable:!0,configurable:!0}),b.prototype.search=function(a,b){var c=this;this.enablePagination=!1,this.currentSearch=a,a.value=a.value.trim();for(var d=null,e=0,f=this.searchTypes;e<f.length;e++){var g=f[e];if(g.text===a.id){d=g.functionCb;break}}this.mode=n.List,this.isLoading=!0,d(a.value,b).subscribe(function(a){var b=JSON.parse(a.body.text());c.nextPaginationToken=b.result.next?b.result.next:"",c.previousPaginationToken=b.result.previous?b.result.previous:"",c.enablePagination=!(!b.result.previous&&!b.result.next),void 0===b.result.Accounts?(c.listModel=[],c.listModel.push(b.result)):c.listModel=b.result.Accounts,c.isLoading=!1},function(a){c.isLoading=!1,c.listModel=[]})},b.prototype.pageChanged=function(a){"Player Name"===this.currentSearch.id&&(-1===a?(this.search(this.currentSearch,this.previousPaginationToken),this.currentPageIndex--):(this.search(this.currentSearch,this.nextPaginationToken),this.currentPageIndex++))},b.prototype.containsAccountStatus=function(a,b){return void 0!==a&&void 0!==a.IdentityProviders&&-1!=a.IdentityProviders.Cognito.status.toLowerCase().indexOf(b)},b.prototype.list=function(){var a=this;this.mode=n.List,this.isLoading=!0,this.listModel=[],this.getAccountsSub&&this.getAccountsSub.unsubscribe(),this.getAccountsSub=this._apiHandler.emptySearch().subscribe(function(b){var c=JSON.parse(b.body.text());if(1===a.activeSubMenuIndex)for(var d=0,e=c.result.Accounts;d<e.length;d++){var f=e[d];f.AccountBlacklisted&&a.listModel.push(f)}else for(var g=0,h=c.result.Accounts;g<h.length;g++){var f=h[g];f.AccountBlacklisted||a.listModel.push(f)}a.isLoading=!1},function(b){a.toastr.clearAllToasts(),a.toastr.error("The player list failed to update with error. "+b.message)})},b.prototype.show=function(a){this.mode=n.Show,this.actionStubActions=[],a.IdentityProviders&&"RESET_REQUIRED"===a.IdentityProviders.Cognito.status.toString()?this.actionStubActions.push(new g.ActionItem("Reset Password",this.changePassword)):a.IdentityProviders&&"FORCE_CHANGE_PASSWORD"!==a.IdentityProviders.Cognito.status&&"CONFIRMED"!==a.IdentityProviders.Cognito.status&&this.actionStubActions.push(new g.ActionItem("Confirm Account",this.confirmAccount)),this.showModel=a},b.prototype.onAdd=function(){new i.PlayerAccountModel;this.addModel={serialization:{CognitoUsername:"",IdentityProviders:{Cognito:{gender:"None"}}},validation:new i.ValidationModel},this.mode=n.Add},b.prototype.onEdit=function(a){this.editModel={accountId:a.AccountId,username:a.CognitoUsername,status:a.IdentityProviders?a.IdentityProviders.Cognito.status:"ANONYMOUS",lastModified:a.IdentityProviders?a.IdentityProviders.Cognito.last_modified_date:"",serialization:{PlayerName:a.PlayerName},validation:new i.ValidationModel},a.IdentityProviders&&(this.editModel.serialization.IdentityProviders={Cognito:{email:a.IdentityProviders.Cognito.email,given_name:a.IdentityProviders.Cognito.given_name,family_name:a.IdentityProviders.Cognito.family_name,locale:a.IdentityProviders.Cognito.locale,nickname:a.IdentityProviders.Cognito.nickname,gender:a.IdentityProviders.Cognito.gender?a.IdentityProviders.Cognito.gender:"None"}}),this.mode=n.Edit},b.prototype.validate=function(a,b){var c=!1;if(b&&!a.serialization.CognitoUsername&&(a.validation.username.isvalid=!1,c=!0),a.serialization.IdentityProviders&&!a.serialization.IdentityProviders.Cognito.email&&(a.validation.email.isvalid=!1,c=!0),!c)return!0},b.prototype.addAccount=function(){var a=this;this.validate(this.addModel,!0)&&this._apiHandler.createAccount(this.addModel.serialization).subscribe(function(b){a.modalRef.close(),a.toastr.clearAllToasts(),a.toastr.success("The player '"+a.addModel.serialization.CognitoUsername+"' has been added"),a.list()},function(b){a.toastr.clearAllToasts(),a.toastr.error("Unable to create new account: "+b.message),console.error(b)})},b.prototype.edit=function(a){var b=this;this.validate(a,!1)&&(a.serialization.IdentityProviders&&"None"==a.serialization.IdentityProviders.Cognito.gender&&(a.serialization.IdentityProviders.Cognito.gender=""),this._apiHandler.editAccount(a.accountId,a.serialization).subscribe(function(c){b.modalRef.close(),b.toastr.clearAllToasts(),b.toastr.success("The player '"+a.username+"' has been updated."),b.list()},function(a){b.toastr.clearAllToasts(),b.toastr.error("The player did not save correctly. "+a.message)}))},b.prototype.banAccount=function(){var a=this,b={AccountBlacklisted:!0};this._apiHandler.editAccount(this.currentAccount.AccountId,b).subscribe(function(b){a.toastr.success("The player '"+a.currentAccount.CognitoUsername+"' has been banned"),a.modalRef.close(),a.list()},function(b){a.toastr.clearAllToasts(),a.toastr.error("The player could not be banned. "+b.message)})},b.prototype.removeBan=function(){var a=this,b={AccountBlacklisted:!1};this._apiHandler.editAccount(this.currentAccount.AccountId,b).subscribe(function(b){a.toastr.success("The player '"+a.currentAccount.CognitoUsername+"'is no longer banned"),a.modalRef.close(),a.list()},function(b){a.toastr.clearAllToasts(),a.toastr.error("Unable to remove the ban. "+b.message),console.log(b)})},b.prototype.changePassword=function(a){var b=this;this._apiHandler.resetUserPassword(a.CognitoUsername).subscribe(function(c){b.toastr.clearAllToasts(),b.toastr.success("Password has been reset"),a.IdentityProviders.Cognito.status=b.accountStatus.reset_required.toUpperCase()},function(a){b.toastr.clearAllToasts(),b.toastr.error("Could not reset password: "+a.message),console.log(a)})},b.prototype.confirmAccount=function(a){var b=this;this._apiHandler.confirmUser(a.CognitoUsername).subscribe(function(c){b.toastr.clearAllToasts(),b.toastr.success("User has been confirmed"),b._apiHandler.searchAccountId(a.AccountId),a.IdentityProviders.Cognito.status=b.accountStatus.confirmed.toUpperCase()},function(a){b.toastr.clearAllToasts(),b.toastr.error("Could not reset password: "+a.message),console.log(a)})},b.prototype.changeSubMenuIndex=function(a){this.activeSubMenuIndex=a,this.list()},b.prototype.dismissAddModal=function(){this.mode=n.List},b.prototype.dismissEditModal=function(){this.mode=n.Show},q([c.Input(),r("design:type",Object)],b.prototype,"context",void 0),q([c.ViewChild(f.ModalComponent),r("design:type",f.ModalComponent)],b.prototype,"modalRef",void 0),b=q([c.Component({selector:"player-account-index",template:'<facet-generator [context]="context"         [tabs]="[\'Overview\', \'Banned Players\']"         (tabClicked)="changeSubMenuIndex($event)"         [metricIdentifier]="context.identifier"></facet-generator> <div *ngIf="activeSubMenuIndex == 0 || activeSubMenuIndex == 1">     <div *ngIf="activeSubMenuIndex == 0" class="row search-row no-gutters">         <div [ngSwitch]="mode == modes.Show || mode == modes.Edit">             <button *ngSwitchCase="true" (click)="mode = modes.List" class="btn l-primary back-button">                 < Back to all Player Accounts             </button>             <button *ngSwitchCase="false" (click)="onAdd()" class="btn l-primary back-button">                 Add Account             </button>         </div>         <div class="col-6">             <search class="float-right" [dropdownOptions]="searchTypes" (searchUpdated)="search($event)"></search>         </div>     </div>     <div *ngIf="mode == modes.List || mode == modes.Add || mode == modes.Ban || mode == modes.RemoveBan">         <div [ngSwitch]="isLoading">             \x3c!-- display loading icon if the leaderboards are still being loaded --\x3e             <div *ngSwitchCase="true">                 <loading-spinner></loading-spinner>             </div>             <div *ngSwitchCase="false">                 <table class="table table-hover">                     <thead>                         <tr>                             <th class="" width="10%"> USER NAME </th>                             <th class="" width="15%"> PLAYER NAME </th>                             <th class="" width="15%"> COGNITO IDENTITY ID </th>                             <th class="" width="15%"> EMAIL </th>                             <th class="" width="15%"> ACCOUNT ID </th>                             <th class="" width="15%"> ACCOUNT STATUS </th>                             <th class="" width="15%"> LAST MODIFIED </th>                         </tr>                     </thead>                     <tbody>                         <tr *ngFor="let entry of listModel">                             <td class="" (click)="show(entry)"> {{entry.CognitoUsername}} </td>                             <td class="" (click)="show(entry)"> {{entry.PlayerName}} </td>                             <td class="" (click)="show(entry)"> {{entry.CognitoIdentityId}} </td>                             <td class="" (click)="show(entry)"> {{entry.IdentityProviders ? entry.IdentityProviders.Cognito.email : \'\'}} </td>                             <td class="" (click)="show(entry)"> {{entry.AccountId}} </td>                             <td class="" (click)="show(entry)">                                 <i class="fa" [class.success-overlay-color]="containsAccountStatus(entry, accountStatus.active) || containsAccountStatus(entry, accountStatus.confirmed)" [class.fa-check-circle]="containsAccountStatus(entry, accountStatus.active) || containsAccountStatus(entry, accountStatus.confirmed)"                                     [class.warning-overlay-color]="containsAccountStatus(entry, accountStatus.pending) || containsAccountStatus(entry, accountStatus.unconfirmed)" [class.fa-clock-o]="containsAccountStatus(entry, accountStatus.pending) || containsAccountStatus(entry, accountStatus.unconfirmed)"                                     [class.fa-user-secret]="containsAccountStatus(entry, accountStatus.anonymous)"></i> {{entry.IdentityProviders ? entry.IdentityProviders.Cognito.status : \'ANONYMOUS\'}}                                 <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(entry, accountStatus.archived)" placement="bottom" ngbTooltip="The account has been archived due to inactivity.  This can only be corrected at {{awsCognitoLink}}."></i>                                 <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(entry, accountStatus.unconfirmed)" placement="bottom" ngbTooltip="After the player creates an account, it\'s not usable until they confirm their email address."></i>                                 <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(entry, accountStatus.compromised)" placement="bottom" ngbTooltip="Please investigate this account further at {{awsCognitoLink}}."></i>                                 <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(entry, accountStatus.reset_required)" placement="bottom" ngbTooltip="The user was imported but has not logged in."></i>                                 <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(entry, accountStatus.force_change_password)" ngbTooltip="After a AWS admin creates an account at {{awsCognitoLink}}, the user is forced to change their password before they can successfully sign in."></i>                                 <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(entry, accountStatus.disabled)" placement="bottom" ngbTooltip="The user has been disabled on the Amazon Cognito site ({{awsCognitoLink}})."></i>                                 <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(entry, accountStatus.unknown)" placement="bottom" ngbTooltip="Mic drop!  ...you hear foot steps walking away..."></i>                             </td>                             <td class="" (click)="show(entry)"> {{ entry.IdentityProviders ? (entry.IdentityProviders.Cognito.last_modified_date * 1000 | date: \'medium\') : \'\'}} </td>                             <td>                                 <div class="float-right" [ngSwitch]="activeSubMenuIndex">                                     <div *ngSwitchCase="0">                                         <i (click)="currentAccount = entry; mode = modes.Ban" class="fa fa-ban" data-toggle="tooltip" data-placement="top" title="Ban user"></i>                                     </div>                                     <div *ngSwitchCase="1">                                         <i (click)="currentAccount = entry; mode = modes.RemoveBan" class="fa fa-ban" data-toggle="tooltip" data-placement="top" title="Remove Ban"></i>                                     </div>                                 </div>                             </td>                         </tr>                     </tbody>                 </table>                 <ng-container *ngIf="enablePagination">                     <pagination type="Token" [showPrevious]="previousPaginationToken && currentPageIndex > 0"                     [showNext]="nextPaginationToken && listModel.length >= 20"                     (pageChanged)="pageChanged($event)"></pagination>                 </ng-container>             </div>         </div>     </div>     <div *ngIf="mode == modes.Show || mode == modes.Edit">         <div [ngSwitch]="isLoading">             <div *ngSwitchCase="true">                 <loading-spinner></loading-spinner>             </div>             <div *ngSwitchCase="false">                 <form>                     <h2>Player Account Profile</h2>                     <div class="row asb-container">                         <action-stub-basic class="col-6 player-account-asb" [model]="showModel" [edit]="onEdit" [custom]="actionStubActions" [hideEdit]="!showModel || !showModel.AccountId">                             <div class="account-id">                                 {{showModel ? showModel.AccountId : ""}}                             </div>                             <div class="player-name">                                 {{showModel ? showModel.PlayerName : ""}}                             </div>                             <div>                                 {{ (showModel && showModel.IdentityProviders) ? showModel.IdentityProviders.Cognito.email : \'\'}}                             </div>                             <div>                                 <div class="row">                                     <i *ngIf="containsAccountStatus(showModel, accountStatus.active) ||                                     containsAccountStatus(showModel, accountStatus.pending) ||                                     containsAccountStatus(showModel, accountStatus.confirmed) ||                                     containsAccountStatus(showModel, accountStatus.unconfirmed) ||                                     containsAccountStatus(showModel, accountStatus.anonymous)                                     " class="fa" [class.success-overlay-color]="containsAccountStatus(showModel, accountStatus.active) || containsAccountStatus(showModel, accountStatus.confirmed)" [class.fa-check-circle]="containsAccountStatus(showModel, accountStatus.active) || containsAccountStatus(showModel, accountStatus.confirmed)"                                         [class.warning-overlay-color]="containsAccountStatus(showModel, accountStatus.pending) || containsAccountStatus(showModel, accountStatus.unconfirmed)" [class.fa-clock-o]="containsAccountStatus(showModel, accountStatus.pending) || containsAccountStatus(showModel, accountStatus.unconfirmed)"                                         [class.fa-user-secret]="containsAccountStatus(showModel, accountStatus.anonymous)"></i> {{ (showModel && showModel.IdentityProviders) ? showModel.IdentityProviders.Cognito.status : \'ANONYMOUS\'}}                                     <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(showModel, accountStatus.archived)" placement="bottom" ngbTooltip="The account has been archived due to inactivity.  This can only be corrected at {{awsCognitoLink}}."></i>                                     <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(showModel, accountStatus.unconfirmed)" placement="bottom" ngbTooltip="After the player creates an account, it\'s not usable until they confirm their email address."></i>                                     <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(showModel, accountStatus.compromised)" placement="bottom" ngbTooltip="Please investigate this account further at {{awsCognitoLink}}."></i>                                     <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(showModel, accountStatus.reset_required)" placement="bottom" ngbTooltip="The user was imported but has not logged in."></i>                                     <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(showModel, accountStatus.force_change_password)" placement="bottom" ngbTooltip="After a AWS admin creates an account at {{awsCognitoLink}}, the user is forced to change their password before they can successfully sign in."></i>                                     <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(showModel, accountStatus.disabled)" placement="bottom" ngbTooltip="The user has been disabled on the Amazon Cognito site ({{awsCognitoLink}})."></i>                                     <i class="fa fa-question-circle-o" *ngIf="containsAccountStatus(showModel, accountStatus.unknown)" placement="bottom" ngbTooltip="Mic drop!  ...you hear foot steps walking away..."></i>                                 </div>                             </div>                         </action-stub-basic>                     </div>                     <div class="player-account-details">                         <h2>Additional Account Details</h2>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>User Name</div>                             <div>{{showModel.CognitoUsername}}</div>                         </div>                         <div *ngIf="showModel">                             <div>Cognito Identity Id</div>                             <div>{{showModel.CognitoIdentityId}}</div>                         </div>                          <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Email</div>                             <div>{{showModel.IdentityProviders.Cognito.email}}</div>                         </div>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Nickname</div>                             <div>{{showModel.IdentityProviders.Cognito.nickname}}</div>                         </div>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Given Name</div>                             <div>{{showModel.IdentityProviders.Cognito.given_name}}</div>                         </div>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Family Name</div>                             <div>{{showModel.IdentityProviders.Cognito.family_name}}</div>                         </div>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Gender</div>                             <div>{{showModel.IdentityProviders.Cognito.gender}}</div>                         </div>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Locale</div>                             <div>{{showModel.IdentityProviders.Cognito.locale}}</div>                         </div>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Enabled</div>                             <div>{{showModel.IdentityProviders.Cognito.enabled}}</div>                         </div>                         \x3c!--<div *ngIf="showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                           <div>Identity Provider Id</div>                           <div>{{showModel.IdentityProviders.Cognito.IdentityProviderId}}</div>                       </div>--\x3e                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Last Modified</div>                             <div>{{showModel.IdentityProviders.Cognito.last_modified_date * 1000 | date:\'medium\'}}</div>                         </div>                         <div *ngIf="showModel && showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                             <div>Created</div>                             <div>{{showModel.IdentityProviders.Cognito.create_date * 1000 | date:\'medium\'}}</div>                         </div>                     </div>                 </form>             </div>             <div>                 <pre>{{showModel | json | devonly}}</pre>             </div>         </div>     </div> </div> \x3c!-- Modals --\x3e \x3c!-- Add player modal --\x3e <modal *ngIf="mode == modes.Add" title="Add Account" [metricIdentifier]="context.identifier" [autoOpen]="true" (modalSubmitted)="addAccount()" [hasSubmit]="true" submitButtonText="Add account" [onClose]="dismissAddModal" [onDismiss]="dismissAddModal">     <div class="modal-body">         <form>             <div class="form-group row" [class.has-danger]="addModel.validation.username.isvalid == false">                 <label class="col-5 col-form-label affix"> Username* </label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="addModel.serialization.CognitoUsername" name="username" type="text" />                     <div *ngIf="addModel.validation.username.isvalid == false" class="form-control-feedback">{{addModel.validation.username.message}}</div>                 </div>             </div>             <div class="form-group row">                 <label class="col-5 col-form-label affix"> Player Name </label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="addModel.serialization.PlayerName" name="addModal.serialization.PlayerName" type="text" />                 </div>             </div>             <div class="form-group row">                 <label class="col-5 col-form-label affix"> Nickname </label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="addModel.serialization.IdentityProviders.Cognito.nickname" name="addModal.serialization.IdentityProviders.Cognito.nickname" type="text" />                 </div>             </div>             <div class="form-group row">                 <label class="col-5 col-form-label affix"> Given Name </label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="addModel.serialization.IdentityProviders.Cognito.given_name" name="addModal.serialization.IdentityProviders.Cognito.given_name" type="text" />                 </div>             </div>             <div class="form-group row">                 <label class="col-5 col-form-label affix"> Family Name </label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="addModel.serialization.IdentityProviders.Cognito.family_name" name="addModal.serialization.IdentityProviders.Cognito.family_name" type="text" />                 </div>             </div>             <div class="form-group row">                 <label class="col-5 col-form-label affix"> Gender </label>                 <div class="col-7">                     <div ngbDropdown>                         {{addModel.serialization.IdentityProviders.Cognito.gender}}<i id="gender-dropdown" ngbDropdownToggle></i>                         <div class="dropdown-menu" aria-labelledby="gender-dropdown">                             <button *ngFor="let gender of [\'Male\',\'Female\',\'Both\', \'None\']" (click)="addModel.serialization.IdentityProviders.Cognito.gender = gender" type="button" class="dropdown-item"> {{gender}} </button>                         </div>                     </div>                 </div>             </div>             <div class="form-group row" [class.has-danger]="addModel.validation.email.isvalid == false">                 <label class="col-5 col-form-label affix"> Email* </label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="addModel.serialization.IdentityProviders.Cognito.email" name="addModal.serialization.IdentityProviders.Cognito.email" type="email" />                     <div *ngIf="addModel.validation.email.isvalid == false" class="form-control-feedback">{{addModel.validation.email.message}}</div>                 </div>             </div>             <div class="form-group row">                 <label class="col-5 col-form-label affix"> Locale </label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="addModel.serialization.IdentityProviders.Cognito.locale" name="addModal.serialization.IdentityProviders.Cognito.locale" type="text" />                 </div>             </div>         </form>     </div> </modal>  \x3c!-- Edit player modal --\x3e <modal *ngIf="mode == modes.Edit" [title]="\'Edit Player Account\'" [metricIdentifier]="context.identifier" [autoOpen]="true" (modalSubmitted)="edit(editModel)" [hasSubmit]="true" submitButtonText="Save" [onClose]="dismissEditModal" [onDismiss]="dismissEditModal">     <div class="modal-body">         <form>             <div class="form-group row">                 <label class="col-5 col-form-label affix ">Account ID</label>                 <div class="col-7">                     <label class="full-width">{{editModel.accountId}}</label>                 </div>             </div>             <div *ngIf="showModel.IdentityProviders && showModel.IdentityProviders.Cognito" class="form-group row">                 <label class="col-5 col-form-label affix ">Username</label>                 <div class="col-7">                     {{ editModel.username }}                 </div>             </div>             <div *ngIf="showModel.IdentityProviders && showModel.IdentityProviders.Cognito" class="form-group row">                 <label class="col-5 col-form-label affix ">Last modified</label>                 <div class="col-7">                     {{editModel.lastModified * 1000 | date: \'medium\'}}                 </div>             </div>             <div class="form-group row" [class.has-danger]="editModel.validation.playerName.isvalid == false">                 <label class="col-5 col-form-label affix ">Player Name</label>                 <div class="col-7">                     <input class="form-control full-width" [(ngModel)]="editModel.serialization.PlayerName" name="editModel.serialization.PlayerName" type="text" />                     <div *ngIf="editModel.validation.playerName.isvalid == false" class="form-control-feedback">{{editModel.validation.playerName.message}}</div>                 </div>             </div>             <div *ngIf="showModel.IdentityProviders && showModel.IdentityProviders.Cognito">                 <div class="form-group row" [class.has-danger]="editModel.validation.nickName.isvalid == false">                     <label class="col-5 col-form-label affix ">Nickname</label>                     <div class="col-7">                         <input class="form-control full-width" [(ngModel)]="editModel.serialization.IdentityProviders.Cognito.nickname" name="editModel.serialization.IdentityProviders.Cognito.nickname" type="text" />                         <div *ngIf="editModel.validation.nickName.isvalid == false" class="form-control-feedback">{{editModel.validation.nickName.message}}</div>                     </div>                 </div>                 <div class="form-group row" [class.has-danger]="editModel.validation.givenName.isvalid == false">                     <label class="col-5 col-form-label affix ">Given Name</label>                     <div class="col-7">                         <input class="form-control full-width" [(ngModel)]="editModel.serialization.IdentityProviders.Cognito.given_name" name="editModel.serialization.IdentityProviders.Cognito.given_name" type="text" />                         <div *ngIf="editModel.validation.givenName.isvalid == false" class="form-control-feedback">{{editModel.validation.givenName.message}}</div>                     </div>                 </div>                 <div class="form-group row" [class.has-danger]="editModel.validation.familyName.isvalid == false">                     <label class="col-5 col-form-label affix ">Family Name</label>                     <div class="col-7">                         <input class="form-control full-width" [(ngModel)]="editModel.serialization.IdentityProviders.Cognito.family_name" name="editModel.serialization.IdentityProviders.Cognito.family_name" type="text" />                         <div *ngIf="editModel.validation.familyName.isvalid == false" class="form-control-feedback">{{editModel.validation.familyName.message}}</div>                     </div>                 </div>                 <div class="form-group row" [class.has-danger]="editModel.validation.gender.isvalid == false">                     <label class="col-5 col-form-label affix ">Gender</label>                     <div class="col-7">                         <div class="col-xs-1">                             <div ngbDropdown>                                 {{editModel.serialization.IdentityProviders.Cognito.gender}}<i id="gender-dropdown" ngbDropdownToggle></i>                                 <div class="dropdown-menu" aria-labelledby="gender-dropdown">                                     <button *ngFor="let gender of [\'Male\',\'Female\',\'Both\', \'None\']" (click)="editModel.serialization.IdentityProviders.Cognito.gender = gender" type="button" class="dropdown-item"> {{gender}} </button>                                 </div>                             </div>                         </div>                         <div *ngIf="editModel.validation.gender.isvalid == false" class="form-control-feedback">{{editModel.validation.gender.message}}</div>                     </div>                 </div>                 <div class="form-group row" [class.has-danger]="editModel.validation.email.isvalid == false">                     <label class="col-5 col-form-label affix ">Email*</label>                     <div class="col-7">                         <input class="form-control full-width" [(ngModel)]="editModel.serialization.IdentityProviders.Cognito.email" name="editModel.serialization.IdentityProviders.Cognito.email" type="text" />                         <div *ngIf="editModel.validation.email.isvalid == false" class="form-control-feedback">{{editModel.validation.email.message}}</div>                     </div>                 </div>                 <div class="form-group row" [class.has-danger]="editModel.validation.locale.isvalid == false">                     <label class="col-5 col-form-label affix ">Locale</label>                     <div class="col-7">                         <input class="form-control full-width" [(ngModel)]="editModel.serialization.IdentityProviders.Cognito.locale" name="editModel.serialization.IdentityProviders.Cognito.locale" type="text" />                         <div *ngIf="editModel.validation.locale.isvalid == false" class="form-control-feedback">{{editModel.validation.locale.message}}</div>                     </div>                 </div>             </div>         </form>         <pre>{{editModel | json | devonly}}</pre>     </div> </modal>  <modal *ngIf="mode == modes.Ban" [title]="\'Ban Player Account\'" [metricIdentifier]="context.identifier" [autoOpen]="true" (modalSubmitted)="banAccount(currentPlayerAccount)" [hasSubmit]="true" [onDismiss]="dismissAddModal" [onClose]="dismissAddModal">     <div class="modal-body">         <p>             Are you sure you want you want to ban player {{currentAccount.CognitoUsername}}?         </p>     </div> </modal>  <modal *ngIf="mode == modes.RemoveBan" [title]="\'Ban Player Account\'" [metricIdentifier]="context.identifier" [autoOpen]="true" (modalSubmitted)="removeBan(currentPlayerAccount)" [hasSubmit]="true" [onDismiss]="dismissAddModal" [onClose]="dismissAddModal">     <div class="modal-body">         <p>             Are you sure you want you want to remove the ban on player {{currentAccount.CognitoUsername}}?         </p>     </div> </modal>',styles:['.back-button{margin-left:-5px}.row.search-row{-ms-flex-pack:justify;justify-content:space-between;margin-bottom:30px;margin:0 0 30px}.row.asb-container{margin-left:-15px}.search-row .row .form-control{padding-left:5px}.player-account-asb{margin-bottom:32px;margin-top:10px}.player-account-details>div{margin:10px 0}.player-account-details>div>*{display:inline-block}.player-account-details>div>div:first-child{font-family:"AmazonEmber-Bold";width:200px}.asb-container .row info{margin:0 5px}action-stub-basic .fa{margin-top:4px;margin-right:5px}']}),r("design:paramtypes",[j.Http,k.AwsService,l.ToastsManager,c.ViewContainerRef,m.LyMetricService])],b)}(h.AbstractCloudGemIndexComponent),a("PlayerAccountIndexComponent",o)}}}),a.register("39",["7","1a","36","1b"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(){}return a=h([c.NgModule({imports:[f.GameSharedModule,d.GemModule],declarations:[e.PlayerAccountIndexComponent,e.PlayerAccountThumbnailComponent],providers:[],bootstrap:[e.PlayerAccountThumbnailComponent,e.PlayerAccountIndexComponent]})],a)}(),a("CloudGemPlayerAccountModule",g)}}}),a.register("36",["34","35","37","38","39"],function(a,b){"use strict";function c(b){var c={};for(var d in b)"default"!==d&&(c[d]=b[d]);a(c)}b&&b.id;return{setters:[function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)}],execute:function(){}}}),a.register("33",["36"],function(a,b){"use strict";function c(){return d.CloudGemPlayerAccountModule}b&&b.id;a("definition",c);var d;return{setters:[function(a){d=a}],execute:function(){}}})})(function(a){if("function"==typeof define&&define.amd)define(["app/shared/class/index.js","app/view/game/module/cloudgems/class/index.js","@angular/core","@angular/http","app/aws/aws.service.js","app/shared/service/index.js","@angular/forms","app/shared/component/index.js","app/view/game/module/shared/class/index.js","ng2-toastr","app/view/game/module/cloudgems/gem.module.js","app/view/game/module/shared/shared.module.js"],a);else{if("object"!=typeof module||!module.exports||"function"!=typeof require)throw new Error("Module must be loaded as AMD or CommonJS");module.exports=a(require("app/shared/class/index.js"),require("app/view/game/module/cloudgems/class/index.js"),require("@angular/core"),require("@angular/http"),require("app/aws/aws.service.js"),require("app/shared/service/index.js"),require("@angular/forms"),require("app/shared/component/index.js"),require("app/view/game/module/shared/class/index.js"),require("ng2-toastr"),require("app/view/game/module/cloudgems/gem.module.js"),require("app/view/game/module/shared/shared.module.js"))}});