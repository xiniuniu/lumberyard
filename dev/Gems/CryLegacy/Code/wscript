########################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
########################################################################################

def build(bld):

    # CryAction_AutoFlowNode is used to define the storage location for the symbols that
    # are used in the automatic flow node registration system (see CAutoRegFlowNodeBase)
    #
    # These symbols must be present in every executable or shared object that uses the
    # automatic registration pattern. Creating this modules independently of CryAction
    # allows us to depend on it from multiple locations -- e.g. Gems --
    # without pulling in a dependency on CryAction itself.
    #
    # (This works in all builds including monolithic)
    bld.CryEngineStaticLibrary(
        target          = 'CryAction_AutoFlowNode',
        vs_filter       = 'CryEngine',
        copyright_org   = 'Amazon-CryTek',
        file_list       = 'Source/CryAction/cryaction_autoflownode.waf_files',
        export_includes = 'Source/CryAction',
        platforms       = ['all'],
        configurations  = ['all'],
        use             = ['AzCore'],
        includes        = [bld.Path('Code/CryEngine/CryCommon')
                          ],
    )

    kw = dict(
        # Add custom build options here
        defines             = ['USE_CRY_NEW_AND_DELETE'],
        includes            = [bld.Path('Code/CryEngine/CryCommon'),
                               bld.Path('Code/CryEngine/CryAction'),
                               bld.Path('Gems/CryLegacy/Code/Source/CryAction'),
                               bld.Path('Gems/CryLegacy/Code/Source/CryAISystem'),
                               bld.Path('Gems/CryLegacy/Code/Source/CryAnimation'),
                               bld.Path('Gems/CryLegacy/Code/Source/CryEntitySystem'),
                               bld.Path('Gems/CryLegacy/Code/Source/CryScriptSystem'),
                               bld.Path('Code/CryEngine')],

        use                 = ['CryAction_AutoFlowNode','AzFramework'],

        win_lib             = [ 'Ws2_32', 'Shell32', 'mswsock', 'gdi32', 'wininet', 'Ole32' ],
        win_linkflags       = '/NODEFAULTLIB:libcmt.lib',

        darwin_lib          = ['curl'],
        appletv_framework   = ['security'],

        restricted_script   = 'update_restricted_parameters',

        win_file_list       = [ ],

        # Testing
        test_all_uselib     = ['AWS_CPP_SDK_GAMELIFT', 'AWS_CPP_SDK_CORE']
    )
    for p0, p1, p2, p3 in bld.env['RESTRICTED_PLATFORMS']:
        kw['{}_file_list'.format(p1)] = [
            'Source/CryAction/{0}/cryaction_{1}.waf_files'.format(p0, p1),
            'Source/CryAISystem/{0}/cryaisystem_{1}.waf_files'.format(p0, p1),
            'Source/CryAnimation/{0}/cryanimation_{1}.waf_files'.format(p0, p1),
            'Source/CryScriptSystem/ScriptBindings/{0}/cryscriptsystem_{1}.waf_files'.format(p0, p1),
            'Source/Input/{0}/crylegacy_{1}.waf_files'.format(p0, p1),
        ]
        kw['win_file_list'] += [
            'Source/CryAction/{0}/cryaction_tools_{1}.waf_files'.format(p0, p1),
            'Source/Input/{0}/crylegacy_tools_{1}.waf_files'.format(p0, p1)
        ]
    bld.DefineGem(**kw)
